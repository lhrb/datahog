{"version":3,"sources":["nextjournal/clojure_mode/commands.cljs"],"mappings":";;;AAUA,iDAAA,jDAAMA,0GAAcC;AAApB,AACE,kBAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,EAAA,EAAA,GAAA,CAAAA,cAAA,SAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAC,gCAAA,AAAAD,+BAAA,KAAA,OAAA,QAAA,AAAAE,8CAAAC,mBAAAH,YAAAA;YAAA,iBAAAI,WAAAJ,pCAAwBY;IAAxBP,SAAA;AAAA,AAAA,GAAA,iBAAAC,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAAC,gDAAAF,OAAAC;;AAAA,QAAAF,SAAAC;;AAAAG;;;eAAA,iBAAAC,WAAAT,vCAA8Ba;IAA9BH,SAAA;AAAA,AAAA,GAAA,iBAAAC,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAAJ,gDAAAG,OAAAC;;AAAA,QAAAF,SAAAC;;AAAAF;;;AAAA,AAAA,AACE,IAAAM,iBAAQ,CAAChB,kCAAAA,yCAAAA,TAAEc,qBAAAA;AAAX,AAAA,GAAA,CAAAE,kBAAA;AAAA;AACQ,iFAAAA,qCAAAA,rHAACD,yCAAAA,yDAAAA;;;AAFX;;;AAKF,iDAAA,jDAAME,0GAASH;AAAf,AACE,OAACI,0EAAgBJ,MACf,WAAAK;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,EAAA,EAAA,GAAA,CAAAA,cAAA,SAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAjB,gCAAA,AAAAiB,+BAAA,KAAA,OAAA,QAAA,AAAAhB,8CAAAC,mBAAAe,YAAAA;YAAAA,RAAiBU;WAAjB,iBAAAT,WAAAD,nCAA8BW;IAA9BT,SAAA;AAAA,AAAA,GAAA,iBAAAC,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAAd,gDAAAa,OAAAC;;AAAA,QAAAF,SAAAC;;AAAAZ;;;SAAA,iBAAAc,WAAAJ,jCAAmCY;IAAnCP,SAAA;AAAA,AAAA,GAAA,iBAAAC,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAAjB,gDAAAgB,OAAAC;;AAAA,QAAAF,SAAAC;;AAAAf;;;YAAA,iBAAAiB,WAAAP,pCAAsCa;IAAtCL,SAAA;AAAA,AAAA,GAAA,iBAAAC,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAApB,gDAAAmB,OAAAC;;AAAA,QAAAF,SAAAC;;AAAAlB;;;AAAA,AAAA,AACE,oBAAMuB;AAAN,AACE,IAAAC,qBACW,iBAAAE,WAAQ,4EAAA,5EAACC,iEAAOvB,MAAMiB;IAAtBK,eAAA,EAAA,CAAAA,YAAA,OAAA,KACQ,sCAAAA,tCAACE,+CAAUC;AADnB,AAAA,GAAA,CAAAH,gBAAA;AAAA;;AAEQ,2CAAAA,pCAACI,iDAAQC;;;AAH5B,AAAA,oBAAAP;AAAA,AAAA,4BAAAA,xBAAWC;AAAX,AAAA,kDAAA,sEAAA,wDAAA,rEAIW,QAAA,PAAKJ,uJACH,AAACW,oEAAU,AAACC,mCAAOR,wBACnB,AAACO,oEAAU,AAACE,wCAAYT;;AANrC;;;AADF;;;;AASN,4DAAA,5DAAMU,gIAAoBC;AAA1B,AACE,IAAUC,WAAS,iBAAAC,WAAOG;IAAPF,SAAA;AAAA,AAAA,GAAA,iBAAAC,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAAzC,gDAAAwC,OAAAC;;AAAA,QAAAF,SAAAC;;AAAAvC;;;IACb0C,WAAS,uBAAA,vBAACC;AADhB,AAEE,sBAAA,QAAA,9BAAeD;;AACf,IAAAE,iBAAUF;qEAnBY,rEAmBtB,AAAA,IAAAG,iBAAA,EAAA,GAAA,CAAAD,kBAAA,SAAAA;AAAA,AAAA,CAAAC,eAAA,eAA8BT;;AAA9BS;AACIJ,AAAmB,AAAA,0BAAcC;;AACrC,AAAQA;;AACR,AAASA;;AACT,qBAAA,rBAACI;;AACD,eAAA,mBAAA,lCAAQT;;OACJI,PAAmB,OAAA,0BAAcC;;AAEzC,+CAAA,/CAAMK,sGAAW3C;AAAjB,AACE,OAACI,0EAAgBJ,MACf,WAAA4C;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,EAAA,EAAA,GAAA,CAAAA,cAAA,SAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAxD,gCAAA,AAAAwD,+BAAA,KAAA,OAAA,QAAA,AAAAvD,8CAAAC,mBAAAsD,YAAAA;YAAAA,RAAiB7B;WAAjB,iBAAA8B,WAAAD,nCAA8B5B;IAA9B8B,SAAA;AAAA,AAAA,GAAA,iBAAAC,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAArD,gDAAAoD,OAAAC;;AAAA,QAAAF,SAAAC;;AAAAnD;;;SAAA,iBAAAqD,WAAAJ,jCAAmC3B;IAAnCgC,SAAA;AAAA,AAAA,GAAA,iBAAAC,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAAxD,gDAAAuD,OAAAC;;AAAA,QAAAF,SAAAC;;AAAAtD;;;YAAA,iBAAAwD,WAAAP,pCAAsC1B;IAAtCkC,SAAA;AAAA,AAAA,GAAA,iBAAAC,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAA3D,gDAAA0D,OAAAC;;AAAA,QAAAF,SAAAC;;AAAAzD;;;AAAA,AAAA,AACE,oBAAIuB;AACF,IAAMoC,OAAK,AAAChC,iEAAOvB,MAAMiB;IACnBuC,SAAO,2CAAA,WAAAC,tDAACjC,sCAAU+B;AAAX,AAAiB,IAAAG,mBAAI,0CAAAD,1CAAChC;AAAL,AAAA,oBAAAiC;AAAAA;;AAAA,SACI,4CAAAD,5CAACE,mEACD,yCAAAF,zCAACG;;;IAC7BC,WAAS,AAAM,AAAS,AAAO7D,iBAAOiB;IACtC6C,gBAAc,0BAAA,sFAAA,9FAAMN,QAAO,iFAAA,jFAACO,qEAAWP,OAAOvC;IAC9C+C,qBACA,0BAAA,RAAMR,QAAO,iBAAAS,WAASH;IAATG,eAAA,EAAA,CAAAA,YAAA,OAAA,KACS,AAACC,mDAAW,mDAAA,WAAAC,9DAACC;AAAD,AACE,QAAI,oCAAAD,pCAACE,yDAAWR;IAD9BI;AADT,AAAA,GAAA,CAAAA,gBAAA;AAAA;;AAAA,sBAAAA,fAGSK;;KAHtB;IAIApD,SAAG,EAAM,AAACyC,4CAAUH,SAAQ,iBAAMe,UAAQ,4CAAK,AAACC,mEAASxE,MAAMwD;IAC7BiB,eAAa,AAACC,6CAAKH,QAAQ,CAAGtD,OAAK,AAACoD,oCAAQb;IAC5CmB,eAAa,qBAAA,rBAAUF;AAF7B,AAGE,GAAI,gBAAA,fAAME;AACR,oDAAA,5CAAK,AAACC,kCAAMpB;;AACZ,QAAA,wBAAA,vBAAGvC,OAAK0D;;KALrC,0NAAA,xMAMMX,oBAAmB,EAAI,AAACa,8CAAYb,qBACf,AAACK,oCAAQL,oBACT,AAACY,kCAAMZ,uCAC5B,iBAAAc,WAAQ,AAACC,gBAAMjB;IAAfgB,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,oCAAAA,pCACQT;AADR,AAAA,GAAA,CAAAS,gBAAA;AAAA;;AAEQ,QAAAA,eAAGjB;;0EAXjB,pEAW4B,oCAAI,AAACkB,gBAAMjB,pDAAeO;AAtB/D,AAuBE,AAACtC,0DAAmB,AAACyC,mEAASxE,MAAMiB,KAAKC;;AACzC,oBAAMA;AAAN,AAAA,kDAAA,8DAAA,wDAAA,2CAAA,0DAAA,lKACWD,6JACQA,qDACFC;;AAHjB;;;AAIF,AACE,AAACa,0DAAmB,AAACyC,mEAASxE,MAAMiB,KAAKC;;AAD3C,kDAAA,8DAAA,LAEWD,6DACC,AAAC+D,sCAAU/D,KAAKC;;;;AAEpC,2DAAA,3DAAM+D,8HAAuBjF;AAA7B,AACE,IAAMkF,MAAI,AAACC,mEAA2BnF;AAAtC,AACE,OAACI,0EAAgBJ,MACf,WAAAoF;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,EAAA,EAAA,GAAA,CAAAA,cAAA,SAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAhG,gCAAA,AAAAgG,+BAAA,KAAA,OAAA,QAAA,AAAA/F,8CAAAC,mBAAA8F,YAAAA;YAAAA,RAAiBrE;WAAjB,iBAAAsE,WAAAD,nCAA8BpE;IAA9BsE,SAAA;AAAA,AAAA,GAAA,iBAAAC,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAA7F,gDAAA4F,OAAAC;;AAAA,QAAAF,SAAAC;;AAAA3F;;;SAAA,iBAAA6F,WAAAJ,jCAAmCnE;IAAnCwE,SAAA;AAAA,AAAA,GAAA,iBAAAC,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAAhG,gDAAA+F,OAAAC;;AAAA,QAAAF,SAAAC;;AAAA9F;;;YAAA,iBAAAgG,WAAAP,pCAAsClE;IAAtC0E,SAAA;AAAA,AAAA,GAAA,iBAAAC,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAAnG,gDAAAkG,OAAAC;;AAAA,QAAAF,SAAAC;;AAAAjG;;;AAAA,AAAA,AACE,IAAMmG,YAAU,oCAAA,yCAAI,AAACvE,sCAAU,AAACD,iEAAOvB,MAAMiB,MAAM,AAAC+E,gDAAQvE,0CAAQmC,tPAChDqC,pCACA5B;IACd6B,SAAO,AAACC,+DAAuBjB,IAAIa;IACnCK,YAAU,CAAA,iDAAc,AAACC,sDAAcrG,MAAMkG;AAJnD,AAAA,kDAAA,uFAAA,wDAAA,mFAAA,2CAAA,0DAAA,mDAAA,jUAKW,CAAGjF,OAAK,EAAOmF,+PACNnF,qDACFC,4DACIkF;;;AAE9B,iDAAA,jDAAME,0GAActG,MAAMiB,KAAKsF;AAA/B,AACE,IAAA7C,mBAAI,iBAAA8C,WAAQ,mHAAA,WAAAC,9HAACjF,sCAAU,AAACD,iEAAOvB,MAAMiB;AAAzB,AACY,IAAAyC,mBAAI,0CAAA+C,1CAAChF;AAAL,AAAA,oBAAAiC;AAAAA;;AAAA,SACI,4CAAA+C,5CAAC9C,mEACD,yCAAA8C,zCAAC7C;;;IAHzB4C,eAAA,EAAA,CAAAA,YAAA,OAAA,KAIQ,qEAAAA,rEAACzC,8EAAW9C,KAAKsF;IAJzBC,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAAA,gBAAAA,hBAKQzB;AALR,AAAA,GAAA,CAAAyB,gBAAA;AAAA;;AAMQ,IAAAE,WAAAF;IAAAG,SAAA,AAAAC,yCAAO,iBAAAE,WAAMP;AAAN,AAAA,QAAAO;KAAA;AAAA;;;KAAA;AAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,mEAAAD;;;;AAAP,AAAA,GAAA,iBAAAD,WAAAH;AAAA,AAAA,SAAA,GAAA,CAAAG,YAAA,aAAA,AAAAlH,gDAAAgH,OAAAE;;AAAA,QAAAH,SAAAC;;AAAA/G;;;;AANZ,AAAA,oBAAA8D;AAAAA;;AAOI,OAACsD,8CAAchH,MAAM,CAAGiB,OAAKsF;;;AAEnC,wCAAA,xCAAMU,wFAAKV;AAAX,AACE,kBAAKvG;AAAL,AACE,OAACI,0EAAgBJ,MACf,WAAAkH;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,EAAA,EAAA,GAAA,CAAAA,cAAA,SAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA9H,gCAAA,AAAA8H,+BAAA,KAAA,OAAA,QAAA,AAAA7H,8CAAAC,mBAAA4H,YAAAA;YAAAA,RAAiBnG;WAAjB,iBAAAoG,WAAAD,nCAA8BlG;IAA9BoG,SAAA;AAAA,AAAA,GAAA,iBAAAC,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAA3H,gDAAA0H,OAAAC;;AAAA,QAAAF,SAAAC;;AAAAzH;;;SAAA,iBAAA2H,WAAAJ,jCAAmCjG;IAAnCsG,SAAA;AAAA,AAAA,GAAA,iBAAAC,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAA9H,gDAAA6H,OAAAC;;AAAA,QAAAF,SAAAC;;AAAA5H;;;YAAA,iBAAA8H,WAAAP,pCAAsChG;IAAtCwG,SAAA;AAAA,AAAA,GAAA,iBAAAC,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAAjI,gDAAAgI,OAAAC;;AAAA,QAAAF,SAAAC;;AAAA/H;;;AAAA,AAAA,AACE,oBAAIuB;AAAJ,kDAAA,yDACW,AAACmF,+CAAatG,MAAMiB,KAAKsF;;AADpC,kDAAA,yDAEW,iBAAAsB,WAAO,AAAC7C,sCAAU/D,KAAKC;IAAvB4G,SAAA,AAAAlB,yCAA2B,iBAAAoB,WAAMzB;AAAN,AAAA,QAAAyB;KAAA;AAAA;;;KAAA;AAAA;;;;AAAA,MAAA,KAAAjB,MAAA,CAAA,mEAAAiB;;;;AAA3B,AAAA,GAAA,iBAAAD,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAApI,gDAAAmI,OAAAC;;AAAA,QAAAF,SAAAC;;AAAAlI;;;;;;;AAEnB,+CAAA,/CAAMqI,sGAAY1B;AAAlB,AACE,kBAASvG;AAAT,AACE,OAACI,0EAAgBJ,MACf,WAAAkI;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,EAAA,EAAA,GAAA,CAAAA,cAAA,SAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA9I,gCAAA,AAAA8I,+BAAA,KAAA,OAAA,QAAA,AAAA7I,8CAAAC,mBAAA4I,YAAAA;YAAAA,RAAiBnH;WAAjB,iBAAAoH,WAAAD,nCAA8BlH;IAA9BoH,SAAA;AAAA,AAAA,GAAA,iBAAAC,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAA3I,gDAAA0I,OAAAC;;AAAA,QAAAF,SAAAC;;AAAAzI;;;SAAA,iBAAA2I,WAAAJ,jCAAmCjH;IAAnCsH,SAAA;AAAA,AAAA,GAAA,iBAAAC,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAA9I,gDAAA6I,OAAAC;;AAAA,QAAAF,SAAAC;;AAAA5I;;;YAAA,iBAAA8I,WAAAP,pCAAsChH;IAAtCwH,SAAA;AAAA,AAAA,GAAA,iBAAAC,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAAjJ,gDAAAgJ,OAAAC;;AAAA,QAAAF,SAAAC;;AAAA/I;;;AAAA,AAAA,AACE,oBAAIuB;AAAJ,kDAAA,uDACU,AAAC0H,2EAAiB7I,MAAMiB,KAAK,AAACqF,+CAAatG,MAAMiB,KAAKsF;;AADhE,kDAAA,uDAEU,iBAAAuC,aAA+B,AAAC9D,sCAAU/D,KAAKC;IAA/C4H,iBAAA,EAAA,EAAA,GAAA,CAAAA,cAAA,SAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAzJ,gCAAA,AAAAyJ,+BAAA,KAAA,OAAA,QAAA,AAAAxJ,8CAAAC,mBAAAuJ,YAAAA;eAAA,iBAAAC,WAAAD,vCAAqB7H;IAArB+H,SAAA;AAAA,AAAA,GAAA,iBAAAC,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAAtJ,gDAAAqJ,OAAAC;;AAAA,QAAAF,SAAAC;;AAAApJ;;;aAAA,iBAAAsJ,WAAAJ,rCAA0B5H;IAA1BiI,SAAA;AAAA,AAAA,GAAA,iBAAAC,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAAzJ,gDAAAwJ,OAAAC;;AAAA,QAAAF,SAAAC;;AAAAvJ;;;AAAA,AAAA,AACE,IAAAyJ,WAAM9C;AAAN,AAAA,QAAA8C;KAAA;AACI,OAACR,2EAAiB7I,MAAMiB,SAAK,AAACqF,+CAAatG,MAAMkB,OAAGqF;;;KADxD;AAEK,OAACsC,2EAAiB7I,MAAM,AAACsG,+CAAatG,MAAMiB,SAAKsF,KAAKrF;;;;AAF3D,MAAA,KAAA6F,MAAA,CAAA,mEAAAsC;;;;;;;;AAIpB,mDAAA,nDAAMC,8GAAoBtJ;AAA1B,AACE,OAACI,0EAAgBJ,MACf,WAAAuJ;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,EAAA,EAAA,GAAA,CAAAA,cAAA,SAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAnK,gCAAA,AAAAmK,+BAAA,KAAA,OAAA,QAAA,AAAAlK,8CAAAC,mBAAAiK,YAAAA;WAAA,iBAAAC,WAAAD,nCAAoBvI;IAApByI,SAAA;AAAA,AAAA,GAAA,iBAAAC,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAAhK,gDAAA+J,OAAAC;;AAAA,QAAAF,SAAAC;;AAAA9J;;;SAAA,iBAAAgK,WAAAJ,jCAAyBtI;IAAzB2I,SAAA;AAAA,AAAA,GAAA,iBAAAC,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAAnK,gDAAAkK,OAAAC;;AAAA,QAAAF,SAAAC;;AAAAjK;;;YAAA,iBAAAmK,WAAAP,pCAA4BrI;IAA5B6I,SAAA;AAAA,AAAA,GAAA,iBAAAC,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAAtK,gDAAAqK,OAAAC;;AAAA,QAAAF,SAAAC;;AAAApK;;;AAAA,AAAA,AACE,oBAAUuB;AAAV;;AAAA,AAAA,kDAAA,uDACU,AAAC0H,2EAAiB7I,MAAMiB,KAAKC;;;;AAE7C,AAAKgJ,wCAAIC;AAET,0CAAA,1CAAMC,4FAAOC;AAAb,AACE,kBAASrK;AAAT,AACE,OAACI,0EAAgBJ,MACf,WAAAsK;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,EAAA,EAAA,GAAA,CAAAA,cAAA,SAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAlL,gCAAA,AAAAkL,+BAAA,KAAA,OAAA,QAAA,AAAAjL,8CAAAC,mBAAAgL,YAAAA;YAAAA,RAAiBvJ;WAAjB,iBAAAwJ,WAAAD,nCAA8BtJ;IAA9BwJ,SAAA;AAAA,AAAA,GAAA,iBAAAC,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAA/K,gDAAA8K,OAAAC;;AAAA,QAAAF,SAAAC;;AAAA7K;;;SAAA,iBAAA+K,WAAAJ,jCAAmCrJ;IAAnC0J,SAAA;AAAA,AAAA,GAAA,iBAAAC,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAAlL,gDAAAiL,OAAAC;;AAAA,QAAAF,SAAAC;;AAAAhL;;;YAAA,iBAAAkL,WAAAP,pCAAsCpJ;IAAtC4J,SAAA;AAAA,AAAA,GAAA,iBAAAC,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAArL,gDAAAoL,OAAAC;;AAAA,QAAAF,SAAAC;;AAAAnL;;;AAAA,AAAA,AACE,oBAAMuB;AAAN,AACE,IAAAC,qBAAkB,AAACI,sCAAU,AAACD,iEAAOvB,MAAMiB,MACd,6FAAA,WAAAgK,xGAAC7G,mDAAW3C;AAAZ,AACa,OAACyJ,cACA,iBAAAC,WAAMd;AAAN,AAAA,QAAAc;KAAA;AAAkB,IAAAC,WAAAH;IAAAG,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,0CAAAA,1CAAUC;IAAVD,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAAA,oCAAAA,pCAAwBE;AAAxB,AAAA,GAAA,CAAAF,gBAAA;AAAA;;AAAA,qDAAAA,9CAAgCvG;;;;KAAlD;AAEgB,IAAA0G,WAAAN;IAAAM,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,0CAAAA,1CAAUF;IAAVE,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAAA,mCAAAA,nCAAwBC;AAAxB,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAAA,uDAAAA,hDAA+BE;;;;;AAF/C,MAAA,KAAA1E,MAAA,CAAA,mEAAAoE;;;;;AAH3C,AAAA,oBAAA/J;AAAA,AAAA,aAAAA,TAAWoC;AAAX,AAME,IAAApC,yBAAkB,iBAAAuK,WAAMtB;AAAN,AAAA,QAAAsB;KAAA;AAAkB,OAAC5G,gBAAM,AAAC6G,+CAAOC,kDAAgB,AAACC,qCAAS,AAACT,0CAAc7H;;;KAA1E;AACmB,OAACuB,gBAAM,AAAC6G,+CAAOC,kDAAgB,AAACE,oCAAQ,AAACV,0CAAc7H;;;;AAD1E,MAAA,KAAAuD,MAAA,CAAA,mEAAA4E;;;;AAAlB,AAAA,oBAAAvK;AAAA,AAAA,aAAAA,TAAWsK;AAAX,AAAA,kDAAA,yEAAA,LAEkBzK,6DACN,iBAAA+K,WAAM3B;AAAN,AAAA,QAAA2B;KAAA;AAEE,IAAMC,OAAK,AAACnK,wCAAY0B;AAAxB,AAAA,0FAAA,2CAAA,+FAAA,1CACU,kCAAIkI,lCAAO9G,mGACT,AAACsH,mCAAOD,8GACbA,pEACArK,5BACA,iBAAAuK,WAAA;mDAxIP,nDAwIO,AAAA,IAAAC,WAAA,EAAA,GAAA,CAAAD,YAAA,SAAAA;AAAA,AAAA,CAAAC,SAAA,YAAA;;AAAAA;;;;KAPT;AASE,IAAcH,OAAK,AAACI,oDAAwBrM,MAAMwD;IAC5C8I,QAAM,AAACjI,oCAAQ,AAACgH,0CAAc7H;AADpC,AAAA,0FAAA,2CAAA,2DAAA,0EAAA,yDAAA,YAAA,2CAAA,iGAAA,jSAEU8I,sDACF,CAAGA,QAAM,EAAOL,oLAEd,AAAC5H,oCAAQqH,iEACPO;;;;AAfd,MAAA,KAAAlF,MAAA,CAAA,mEAAAiF;;;;;AAHZ;;;AANF;;;AADF;;;;;AA2BR,yCAAA,zCAAMO,0FAAMlC;AAAZ,AACE,kBAASrK;AAAT,uFACO,WAAAwM,lGAmCA,OAACpM,0EAAgBJ;AAnCjB,AAAA,IAAAyM,aAAAD;IAAAC,iBAAA,EAAA,EAAA,GAAA,CAAAA,cAAA,SAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAApN,gCAAA,AAAAoN,+BAAA,KAAA,OAAA,QAAA,AAAAnN,8CAAAC,mBAAAkN,YAAAA;YAAAA,RAAiBzL;WAAjB,iBAAA0L,WAAAD,nCAA8BxL;IAA9B0L,SAAA;AAAA,AAAA,GAAA,iBAAAC,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAAjN,gDAAAgN,OAAAC;;AAAA,QAAAF,SAAAC;;AAAA/M;;;SAAA,iBAAAiN,WAAAJ,jCAAmCvL;IAAnC4L,SAAA;AAAA,AAAA,GAAA,iBAAAC,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAApN,gDAAAmN,OAAAC;;AAAA,QAAAF,SAAAC;;AAAAlN;;;YAAA,iBAAAoN,WAAAP,pCAAsCtL;IAAtC8L,SAAA;AAAA,AAAA,GAAA,iBAAAC,WAAAF;AAAA,AAAA,SAAA,GAAA,CAAAE,YAAA,aAAA,AAAAvN,gDAAAsN,OAAAC;;AAAA,QAAAF,SAAAC;;AAAArN;;;AAAA,AAAA,AACE,oBAAMuB;AAAN,AACE,IAAAC,2DAAsB,AAACG,iEAAOvB,MAAMiB,7GACd,AAACO,mHAAUC;AADjC,AAAA,oBAAAL;AAAA,AAAA,aAAAA,TAAWoC;AAAX,AAEE,IAAA2J,WAAM9C;AAAN,AAAA,QAAA8C;KAAA;AAEE,IAAA/L,yBAAkB,iBAAAgM,WAAS,AAACtL,wCAAY0B;IAAtB4J,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,oCAAAA,pCACSrB;IADTqB,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAES,iGAAAA,jGAACxB,+CAAOC;IAFjBuB,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAGS,6CAAA,IAAAA,jDAACC;AAHV,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAAA,uBAAAA,hBAISrI;;;AAJ3B,AAAA,oBAAA3D;AAAA,AAAA,aAAAA,TAAWsK;AAAX,AAAA,kDAAA,yDAMW,iBAAA4B,kBAAK,AAAC1I,kCAAM8G;IAAZ6B,kBAAoBtM;AAApB,AAAA,SAAAqM,kBAAAC,mBAAAD,kBAAAC;KANX,wDAAA,mFAAA,2CAAA,+FAAA,1CAOoB,AAAC3I,kCAAM8G,iEACL,AAACQ,mCAAO,AAACpK,wCAAY0B,iHAC1B,AAAC1B,wCAAY0B,5GACb5B,5BACA,iBAAA4L,WAAA;mDArKR,nDAqKQ,AAAA,IAAAC,WAAA,EAAA,GAAA,CAAAD,YAAA,SAAAA;AAAA,AAAA,CAAAC,SAAA,YAAA;;AAAAA;;;AAXjB;;;;KAFF;AAeE,IAAArM,yBAA4B,iBAAAuM,WAAS,AAAC9L,mCAAO2B;IAAjBmK,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,qCAAAA,rCACS7B;IADT6B,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAES,iGAAAA,jGAAC/B,+CAAOC;IAFjB8B,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAGS,6CAAA,IAAAA,jDAACN;AAHV,AAAA,GAAA,CAAAM,gBAAA;AAAA;;AAAA,uBAAAA,hBAIS5I;;;AAJrC,AAAA,oBAAA3D;AAAA,AAAA,uBAAAA,nBAAWsM;AAAX,AAKE,IAAME,YAAU,AAACvB,oDAAwBrM,MAAMwD;IACzCqK,aAAW,AAACxJ,oCAAQ,AAACgH,0CAAc7H;AADzC,AAAA,kDAAA,yDAEW,iBAAAsK,kBAAK7M;IAAL8M,kBAAU,CAAG,AAAC1J,oCAAQqJ,oBAAkB,wBAAA,vBAAK,EAAOE;AAApD,AAAA,SAAAE,kBAAAC,mBAAAD,kBAAAC;KAFX,wDAAA,mFAAA,2CAAA,2GAAA,0FAAA,2CAAA,gEAAA,oFAAA,/UAKoB,AAAC1J,oCAAQqJ,2EACP,CAAA,IAASE,4HAEXC,2DACF,CAAGA,aAAW,EAAOD,6EACjB,AAACvH,sDAAcrG,MAAM,EAAO4N;;AAfpD;;;;;AAfF,MAAA,KAAA7G,MAAA,CAAA,mEAAAoG;;;;AAFF;;;AADF;;;;;AAoCX;;;kDAAA,wCAAA,4EAAA,wEAAA,8DAAA,qEAAA,gGAAA,kGAAA,iFAAA,yFAAA,iGAAA,2EAAA,oEAAA,8EAAA,0EAAA,oFAAA,yEAAA,mFAAA,sEAAA,kFAAA,2EAAA,gFAAA,oEAAA,wEAAA,0EAAA,qEAAA,8FAAA,uEAAA,iFAAA,2EAAA,iFAAA,wEAAA,yEAAA,gEAAA,yEAAA,yEAAA,sEAAA,9tFAAKa,yyFAEeC,szCACAC,9uCACDC,8tEACAC,vpEACLC,uIACgBC,28CACAC,tyCACPC,2EACIC,+EACIC,7OACAC,6cACTC,0EACHC,8xCACAC,zNACCC,5xCACAC,itCACGC,mJACAC,tkCACCC,mJACAC,4EACPC,oSACAC,/NACOC,oJACDC,uNACJC,vEACAC,8IACFC,56BACAC,mkCACCC,oSACAC,6IACJC,yIACKC,uEACFC,nuEACAC,wyEACEC,v+CACAC;AAEnB,AAAKC,2CAAO,AAACpR,+CAAaqR;AAC1B,AAAKC,2CAAO,AAACtR,+CAAakB;AAC1B,AAAKqQ,yCAAK,AAACvR,+CAAa0D;AACxB,AAAK8N,8CAAU,AAACxR,+CAAa,sCAAA,tCAACgI;AAC9B,AAAKyJ,6CAAS,AAACzR,+CAAa,sCAAA,tCAACgI;AAC7B,AAAK0J,qDAAiB,AAAC1R,+CAAa,6CAAA,7CAACgJ;AACrC,AAAK2I,oDAAgB,AAAC3R,+CAAa,6CAAA,7CAACgJ;AACpC,AAAK4I,kDAAc,AAAC5R,+CAAa,wCAAA,xCAACmL;AAClC,AAAK0G,mDAAe,AAAC7R,+CAAa,wCAAA,xCAACmL;AACnC,AAAK2G,iDAAa,AAAC9R,+CAAa,uCAAA,vCAACsN;AACjC,AAAKyE,kDAAc,AAAC/R,+CAAa,uCAAA,vCAACsN;AAClC,AAAK0E,mDAAe,AAAChS,+CAAaiS;AAClC,AAAKC,qDAAiB,AAAClS,+CAAamS;AACpC,AAAKC,qDAAiB,AAACpS,+CAAagG;AAEpC,kDAAA,wCAAA,yDAAA,4DAAA,8EAAA,yEAAA,oDAAA,uEAAA,6EAAA,4EAAA,qEAAA,sEAAA,8DAAA,0EAAA,0DAAA,v8BAAKqM,qhCACMjB,gjBACAE,xXACFC,2RACKC,1aACDC,sOACQC,mDACDC,nGACFC,gSACCC,3IACFC,+CACCC,5RACCC,kdACEE,rgBACAE;AAErB;;;AAAKE,0CAEH,AAACC,uGAAMxD,gDACAsD;AAET;;;AAAKG,kDAEH,oBAAA,WAAAC,iBAAAC,iBAAAC,jEAACC;AAAD,AAAY,qDAAAH,iBAAAE,iBAAAD,hFAACG;GAAb,mCAAgCP","names":["nextjournal.clojure-mode.commands/view-command","f","p__52276","map__52277","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","obj52280","k52281","obj52283","applied-science.js-interop.impl/in?*","js/undefined","obj52285","k52286","obj52287","state","dispatch","G__52289","nextjournal.clojure-mode.commands/unwrap*","nextjournal.clojure_mode.util.update_ranges","p__52297","map__52299","obj52305","k52306","obj52307","obj52319","k52320","obj52323","obj52334","k52335","obj52336","range","from","to","empty","temp__5754__auto__","nearest-balanced-coll","G__52341","nextjournal.clojure_mode.node.tree","nextjournal.clojure-mode.node/closest","nextjournal.clojure-mode.node/coll?","nextjournal.clojure-mode.util/guard","nextjournal.clojure-mode.node/balanced?","nextjournal.clojure_mode.node.from_to","nextjournal.clojure-mode.node/down","nextjournal.clojure-mode.node/down-last","nextjournal.clojure-mode.commands/copy-to-clipboard!","text","focus-el","obj52342","k52343","obj52345","js/document","input-el","js/document.createElement","obj52346","obj52347","js/document.execCommand","nextjournal.clojure-mode.commands/kill*","p__52352","map__52353","obj52355","k52356","obj52357","obj52358","k52359","obj52360","obj52361","k52362","obj52363","node","parent","p1__52350#","or__4223__auto__","nextjournal.clojure-mode.node/string?","nextjournal.clojure-mode.node/top?","line-end","next-children","nextjournal.clojure_mode.node.children","last-child-on-line","G__52364","cljs.core.take_while","p1__52351#","cljs.core.every_pred","nextjournal.clojure-mode.node/start","cljs.core/last","content","nextjournal.clojure_mode.node.string","content-from","cljs.core.subs","next-newline","nextjournal.clojure-mode.node/end","nextjournal.clojure-mode.node/end-edge?","G__52365","cljs.core/first","nextjournal.clojure-mode.util/from-to","nextjournal.clojure-mode.commands/enter-and-indent*","ctx","nextjournal.clojure-mode.extensions.formatting/make-indent-context","p__52366","map__52367","obj52369","k52370","obj52371","obj52372","k52373","obj52374","obj52375","k52376","obj52377","indent-at","cljs.core.some_fn","nextjournal.clojure-mode.node/inner-span","indent","nextjournal.clojure-mode.extensions.formatting/get-indentation","insertion","nextjournal.clojure-mode.extensions.formatting/spaces","nextjournal.clojure-mode.commands/nav-position","dir","G__52379","p1__52378#","obj52380","k52381","applied-science.js-interop.impl/wrap-key","obj52384","G__52383","js/Error","nextjournal.clojure-mode.selections/constrain","nextjournal.clojure-mode.commands/nav","p__52385","map__52386","obj52388","k52389","obj52390","obj52391","k52392","obj52393","obj52394","k52395","obj52396","obj52397","k52398","obj52401","G__52400","nextjournal.clojure-mode.commands/nav-select","p__52402","map__52403","obj52405","k52406","obj52407","obj52408","k52409","obj52410","obj52411","k52412","obj52413","nextjournal.clojure_mode.node.balanced_range","map__52414","obj52416","k52417","obj52418","obj52419","k52420","obj52421","G__52422","nextjournal.clojure-mode.commands/balance-ranges","p__52423","map__52424","obj52426","k52427","obj52428","obj52429","k52430","obj52431","obj52432","k52433","obj52434","nextjournal.clojure-mode.commands/log","js/console.log","nextjournal.clojure-mode.commands/slurp","direction","p__52436","map__52437","obj52439","k52440","obj52441","obj52442","k52443","obj52444","obj52445","k52446","obj52447","p1__52435#","cljs.core/not","G__52448","G__52449","nextjournal.clojure-mode.node/with-prefix","nextjournal.clojure-mode.node/right","G__52450","nextjournal.clojure-mode.node/left","nextjournal.clojure-mode.node/start-edge?","target","G__52451","cljs.core.remove","nextjournal.clojure-mode.node/line-comment?","nextjournal.clojure-mode.node/rights","nextjournal.clojure-mode.node/lefts","G__52452","edge","nextjournal.clojure-mode.node/name","obj52453","obj52454","nextjournal.clojure-mode.node/left-edge-with-prefix","start","nextjournal.clojure-mode.commands/barf","p__52457","map__52458","obj52460","k52461","obj52462","obj52463","k52464","obj52465","obj52466","k52467","obj52468","G__52469","G__52470","cljs.core.drop","x__4309__auto__","y__4310__auto__","obj52471","obj52472","next-first-child","G__52475","left-edge","left-start","x__4306__auto__","y__4307__auto__","nextjournal.clojure-mode.commands/builtin-index","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorLineStart","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectLineStart","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorLineDown","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectLineDown","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectAll","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorLineBoundaryForward","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectLineBoundaryForward","js/module$node_modules$$codemirror$commands$dist$index_cjs.deleteCharBackward","js/module$node_modules$$codemirror$commands$dist$index_cjs.insertNewlineAndIndent","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorLineBoundaryBackward","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectLineBoundaryBackward","js/module$node_modules$$codemirror$commands$dist$index_cjs.deleteCharForward","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorCharLeft","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectCharLeft","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorCharRight","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectCharRight","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorGroupForward","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectGroupForward","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorGroupBackward","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectGroupBackward","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorDocEnd","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectDocEnd","js/module$node_modules$$codemirror$commands$dist$index_cjs.deleteGroupBackward","js/module$node_modules$$codemirror$commands$dist$index_cjs.deleteGroupForward","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorPageDown","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectPageDown","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorPageUp","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectPageUp","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorLineEnd","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectLineEnd","js/module$node_modules$$codemirror$commands$dist$index_cjs.splitLine","js/module$node_modules$$codemirror$commands$dist$index_cjs.transposeChars","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorLineUp","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectLineUp","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorDocStart","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectDocStart","nextjournal.clojure-mode.commands/indent","nextjournal.clojure-mode.extensions.formatting/format","nextjournal.clojure-mode.commands/unwrap","nextjournal.clojure-mode.commands/kill","nextjournal.clojure-mode.commands/nav-right","nextjournal.clojure-mode.commands/nav-left","nextjournal.clojure-mode.commands/nav-select-right","nextjournal.clojure-mode.commands/nav-select-left","nextjournal.clojure-mode.commands/slurp-forward","nextjournal.clojure-mode.commands/slurp-backward","nextjournal.clojure-mode.commands/barf-forward","nextjournal.clojure-mode.commands/barf-backward","nextjournal.clojure-mode.commands/selection-grow","nextjournal.clojure-mode.extensions.selection-history/selection-grow*","nextjournal.clojure-mode.commands/selection-return","nextjournal.clojure-mode.extensions.selection-history/selection-return*","nextjournal.clojure-mode.commands/enter-and-indent","nextjournal.clojure-mode.commands/paredit-index","nextjournal.clojure-mode.commands/index","cljs.core.merge","nextjournal.clojure-mode.commands/reverse-index","p1__52476#","p2__52478#","p3__52477#","cljs.core/reduce-kv","cljs.core.assoc"],"sourcesContent":["(ns nextjournal.clojure-mode.commands\n  (:require [\"@codemirror/commands\" :as commands :refer [defaultKeymap]]\n            [\"@codemirror/state\" :refer [EditorState IndentContext]]\n            [applied-science.js-interop :as j]\n            [nextjournal.clojure-mode.util :as u]\n            [nextjournal.clojure-mode.selections :as sel]\n            [nextjournal.clojure-mode.node :as n]\n            [nextjournal.clojure-mode.extensions.formatting :as format]\n            [nextjournal.clojure-mode.extensions.selection-history :as sel-history]))\n\n(defn view-command [f]\n  (j/fn [^:js {:keys [^js state dispatch]}]\n    (some-> (f state)\n            (dispatch))\n    true))\n\n(defn unwrap* [state]\n  (u/update-ranges state\n    (j/fn [^:js {:as range :keys [from to empty]}]\n      (when empty\n        (when-let [nearest-balanced-coll\n                   (some-> (n/tree state from -1)\n                           (n/closest n/coll?)\n                           (u/guard n/balanced?))]\n          {:cursor (dec from)\n           :changes [(n/from-to (n/down nearest-balanced-coll))\n                     (n/from-to (n/down-last nearest-balanced-coll))]})))))\n\n(defn copy-to-clipboard! [text]\n  (let [^js focus-el (j/get js/document :activeElement)\n        input-el (js/document.createElement \"textarea\")]\n    (.setAttribute input-el \"class\" \"clipboard-input\")\n    (j/assoc! input-el :innerHTML text)\n    (-> js/document .-body (.appendChild input-el))\n    (.focus input-el)\n    (.select input-el)\n    (js/document.execCommand \"copy\")\n    (.focus focus-el #js {:preventScroll true})\n    (-> js/document .-body (.removeChild input-el))))\n\n(defn kill* [^js state]\n  (u/update-ranges state\n    (j/fn [^:js {:as range :keys [from to empty]}]\n      (if empty\n        (let [node (n/tree state from)\n              parent (n/closest node #(or (n/coll? %)\n                                          (n/string? %)\n                                          (n/top? %)))\n              line-end (.-to (.lineAt (.-doc state) from))\n              next-children (when parent (n/children parent from 1))\n              last-child-on-line\n              (when parent (some->> next-children\n                                    (take-while (every-pred\n                                                 #(<= (n/start %) line-end)))\n                                    last))\n              to (cond (n/string? parent) (let [content (str (n/string state parent))\n                                                content-from (subs content (- from (n/start parent)))\n                                                next-newline (.indexOf content-from \\newline)]\n                                            (if (neg? next-newline)\n                                              (dec (n/end parent))\n                                              (+ from next-newline 1)))\n                       last-child-on-line (if (n/end-edge? last-child-on-line)\n                                            (n/start last-child-on-line)\n                                            (n/end last-child-on-line))\n                       (some-> (first next-children)\n                               n/start\n                               (> line-end)) (-> (first next-children) n/start))]\n          (copy-to-clipboard! (n/string state from to))\n          (when to\n            {:cursor from\n             :changes {:from from\n                       :to to}}))\n        (do\n          (copy-to-clipboard! (n/string state from to))\n          {:cursor from\n           :changes (u/from-to from to)})))))\n\n(defn enter-and-indent* [^js state]\n  (let [ctx (format/make-indent-context state)]\n    (u/update-ranges state\n      (j/fn [^:js {:as range :keys [from to empty]}]\n        (let [indent-at (-> (n/closest (n/tree state from) (some-fn n/coll? n/top?))\n                            n/inner-span\n                            n/start)\n              indent (format/get-indentation ctx indent-at)\n              insertion (str \\newline (format/spaces state indent))]\n          {:cursor (+ from (count insertion))\n           :changes [{:from from\n                      :to to\n                      :insert insertion}]})))))\n\n(defn nav-position [state from dir]\n  (or (some-> (n/closest (n/tree state from)\n                         #(or (n/coll? %)\n                              (n/string? %)\n                              (n/top? %)))\n              (n/children from dir)\n              first\n              (j/get (case dir -1 :from 1 :to)))\n      (sel/constrain state (+ from dir))))\n\n(defn nav [dir]\n  (fn [state]\n    (u/update-ranges state\n      (j/fn [^:js {:as range :keys [from to empty]}]\n        (if empty\n          {:cursor (nav-position state from dir)}\n          {:cursor (j/get (u/from-to from to) (case dir -1 :from 1 :to))})))))\n\n(defn nav-select [dir]\n  (fn [^js state]\n    (u/update-ranges state\n      (j/fn [^:js {:as range :keys [from to empty]}]\n        (if empty\n          {:range (n/balanced-range state from (nav-position state from dir))}\n          {:range (j/let [^:js {:keys [from to]} (u/from-to from to)]\n                    (case dir\n                      1 (n/balanced-range state from (nav-position state to dir))\n                      -1 (n/balanced-range state (nav-position state from dir) to)))})))))\n\n(defn balance-ranges [^js state]\n  (u/update-ranges state\n    (j/fn [^:js {:keys [from to empty]}]\n      (when-not empty\n        {:range (n/balanced-range state from to)}))))\n\n(def log js/console.log)\n\n(defn slurp [direction]\n  (fn [^js state]\n    (u/update-ranges state\n      (j/fn [^:js {:as range :keys [from to empty]}]\n        (when empty\n          (when-let [parent (n/closest (n/tree state from)\n                                       (every-pred n/coll?\n                                                   #(not\n                                                     (case direction 1 (some-> % n/with-prefix n/right n/end-edge?)\n                                                                     -1\n                                                                     (some-> % n/with-prefix n/left n/start-edge?)))))]\n            (when-let [target (case direction 1 (first (remove n/line-comment? (n/rights (n/with-prefix parent))))\n                                              -1 (first (remove n/line-comment? (n/lefts (n/with-prefix parent)))))]\n              {:cursor/mapped from\n               :changes (case direction\n                          1\n                          (let [edge (n/down-last parent)]\n                            [{:from (-> target n/end)\n                              :insert (n/name edge)}\n                             (-> edge\n                                 n/from-to\n                                 (j/assoc! :insert \" \"))])\n                          -1\n                          (let [^string edge (n/left-edge-with-prefix state parent)\n                                start (n/start (n/with-prefix parent))]\n                            [{:from start\n                              :to (+ start (count edge))\n                              :insert \" \"}\n                             {:from (n/start target)\n                              :insert edge}]))})))))))\n\n(defn barf [direction]\n  (fn [^js state]\n    (->> (j/fn [^:js {:as range :keys [from to empty]}]\n           (when empty\n             (when-let [parent (-> (n/tree state from)\n                                   (n/closest n/coll?))]\n               (case direction\n                 1\n                 (when-let [target (some->> (n/down-last parent)\n                                            n/lefts\n                                            (remove n/line-comment?)\n                                            (drop 1)\n                                            first)]\n\n                   {:cursor (min (n/end target) from)\n                    :changes [{:from (n/end target)\n                               :insert (n/name (n/down-last parent))}\n                              (-> (n/down-last parent)\n                                  n/from-to\n                                  (j/assoc! :insert \" \"))]})\n                 -1\n                 (when-let [next-first-child (some->> (n/down parent)\n                                                      n/rights\n                                                      (remove n/line-comment?)\n                                                      (drop 1)\n                                                      first)]\n                   (let [left-edge (n/left-edge-with-prefix state parent)\n                         left-start (n/start (n/with-prefix parent))]\n                     {:cursor (max from (+ (n/start next-first-child) (inc (count left-edge))))\n                      :changes [\n                                ;; insert left edge (prefixed by a space) in front of next-first-child\n                                {:from (n/start next-first-child)\n                                 :insert (str \" \" left-edge)}\n                                ;; replace left-edge with spaces\n                                {:from left-start\n                                 :to (+ left-start (count left-edge))\n                                 :insert (format/spaces state (count left-edge))}]}))))))\n         (u/update-ranges state))))\n\n(def builtin-index\n  \"Subset of builtin commands that compliment paredit\"\n  {:cursorLineStart commands/cursorLineStart\n   :selectLineStart commands/selectLineStart\n   :cursorLineDown commands/cursorLineDown\n   :selectLineDown commands/selectLineDown\n   :selectAll commands/selectAll\n   :cursorLineBoundaryForward commands/cursorLineBoundaryForward\n   :selectLineBoundaryForward commands/selectLineBoundaryForward\n   :deleteCharBackward commands/deleteCharBackward\n   :insertNewlineAndIndent commands/insertNewlineAndIndent\n   :cursorLineBoundaryBackward commands/cursorLineBoundaryBackward\n   :selectLineBoundaryBackward commands/selectLineBoundaryBackward\n   :deleteCharForward commands/deleteCharForward\n   :cursorCharLeft commands/cursorCharLeft\n   :selectCharLeft commands/selectCharLeft\n   :cursorCharRight commands/cursorCharRight\n   :selectCharRight commands/selectCharRight\n   :cursorGroupForward commands/cursorGroupForward\n   :selectGroupForward commands/selectGroupForward\n   :cursorGroupBackward commands/cursorGroupBackward\n   :selectGroupBackward commands/selectGroupBackward\n   :cursorDocEnd commands/cursorDocEnd\n   :selectDocEnd commands/selectDocEnd\n   :deleteGroupBackward commands/deleteGroupBackward\n   :deleteGroupForward commands/deleteGroupForward\n   :cursorPageDown commands/cursorPageDown\n   :selectPageDown commands/selectPageDown\n   :cursorPageUp commands/cursorPageUp\n   :selectPageUp commands/selectPageUp\n   :cursorLineEnd commands/cursorLineEnd\n   :selectLineEnd commands/selectLineEnd\n   :splitLine commands/splitLine\n   :transposeChars commands/transposeChars\n   :cursorLineUp commands/cursorLineUp\n   :selectLineUp commands/selectLineUp\n   :cursorDocStart commands/cursorDocStart\n   :selectDocStart commands/selectDocStart})\n\n(def indent (view-command format/format))\n(def unwrap (view-command unwrap*))\n(def kill (view-command kill*))\n(def nav-right (view-command (nav 1)))\n(def nav-left (view-command (nav -1)))\n(def nav-select-right (view-command (nav-select 1)))\n(def nav-select-left (view-command (nav-select -1)))\n(def slurp-forward (view-command (slurp 1)))\n(def slurp-backward (view-command (slurp -1)))\n(def barf-forward (view-command (barf 1)))\n(def barf-backward (view-command (barf -1)))\n(def selection-grow (view-command sel-history/selection-grow*))\n(def selection-return (view-command sel-history/selection-return*))\n(def enter-and-indent (view-command enter-and-indent*))\n\n(def paredit-index\n  {:indent indent\n   :unwrap unwrap\n   :kill kill\n   :nav-right nav-right\n   :nav-left nav-left\n   :nav-select-right nav-select-right\n   :nav-select-left nav-select-left\n   :slurp-forward slurp-forward\n   :slurp-backward slurp-backward\n   :barf-forward barf-forward\n   :barf-backward barf-backward\n   :selection-grow selection-grow\n   :selection-return selection-return\n   :enter-and-indent enter-and-indent})\n\n(def index\n  \"Mapping of keyword-id to command functions\"\n  (merge builtin-index\n         paredit-index))\n\n(def reverse-index\n  \"Lookup keyword-id by function\"\n  (reduce-kv #(assoc %1 %3 %2) {} index))\n"]}