shadow$provide.module$node_modules$$codemirror$matchbrackets$dist$index_cjs=function(global,require,module,exports){function matchingNodes(node,dir,brackets){let byProp=node.prop(0>dir?lezerTree.NodeProp.openedBy:lezerTree.NodeProp.closedBy);return byProp?byProp:1==node.name.length&&(node=brackets.indexOf(node.name),-1<node&&node%2==(0>dir?1:0))?[brackets[node+dir]]:null}function matchBrackets(state,pos$jscomp$0,dir,config={}){var maxScanDistance=config.maxScanDistance||1E4;config=config.brackets||
"()[]{}";var tree=language.syntaxTree(state),sub=tree.resolve(pos$jscomp$0,dir),matches;if(matches=matchingNodes(sub.type,dir,config)){a:{tree=sub.parent;pos$jscomp$0={from:sub.from,to:sub.to};maxScanDistance=0;if((tree=null===tree||void 0===tree?void 0:tree.cursor)&&(0>dir?tree.childBefore(sub.from):tree.childAfter(sub.to))){do if(0>dir?tree.to<=sub.from:tree.from>=sub.to)if(0==maxScanDistance&&-1<matches.indexOf(tree.type.name)){dir={start:pos$jscomp$0,end:{from:tree.from,to:tree.to},matched:!0};
break a}else if(matchingNodes(tree.type,dir,config))maxScanDistance++;else if(matchingNodes(tree.type,-dir,config)&&(maxScanDistance--,0==maxScanDistance)){dir={start:pos$jscomp$0,end:{from:tree.from,to:tree.to},matched:!1};break a}while(0>dir?tree.prevSibling():tree.nextSibling())}dir={start:pos$jscomp$0,matched:!1}}return dir}a:{sub=sub.type;matches=0>dir?state.sliceDoc(pos$jscomp$0-1,pos$jscomp$0):state.sliceDoc(pos$jscomp$0,pos$jscomp$0+1);let bracket=config.indexOf(matches);if(0>bracket||0==
bracket%2!=0<dir)dir=null;else{matches={from:0>dir?pos$jscomp$0-1:pos$jscomp$0,to:0<dir?pos$jscomp$0+1:pos$jscomp$0};state=state.doc.iterRange(pos$jscomp$0,0<dir?state.doc.length:0);var depth=0;for(let distance=0;!state.next().done&&distance<=maxScanDistance;){let text=state.value;0>dir&&(distance+=text.length);let basePos=pos$jscomp$0+distance*dir;for(let pos=0<dir?0:text.length-1,end=0<dir?text.length:-1;pos!=end;pos+=dir){let found=config.indexOf(text[pos]);if(!(0>found||tree.resolve(basePos+pos,
1).type!=sub))if(0==found%2==0<dir)depth++;else if(1==depth){dir={start:matches,end:{from:basePos+pos,to:basePos+pos+1},matched:found>>1==bracket>>1};break a}else depth--}0<dir&&(distance+=text.length)}dir=state.done?{start:matches,matched:!1}:null}}return dir}Object.defineProperty(exports,"__esModule",{value:!0});var state$jscomp$0=require("module$node_modules$$codemirror$state$dist$index_cjs"),language=require("module$node_modules$$codemirror$language$dist$index_cjs"),view=require("module$node_modules$$codemirror$view$dist$index_cjs"),
lezerTree=require("module$node_modules$lezer_tree$dist$tree_cjs");global=view.EditorView.baseTheme({".cm-matchingBracket":{color:"#0b0"},".cm-nonmatchingBracket":{color:"#a22"}});const bracketMatchingConfig=state$jscomp$0.Facet.define({combine(configs){return state$jscomp$0.combineConfig(configs,{afterCursor:!0,brackets:"()[]{}",maxScanDistance:1E4})}}),matchingMark=view.Decoration.mark({class:"cm-matchingBracket"}),nonmatchingMark=view.Decoration.mark({class:"cm-nonmatchingBracket"}),bracketMatchingUnique=
[state$jscomp$0.StateField.define({create(){return view.Decoration.none},update(deco,tr){if(!tr.docChanged&&!tr.selection)return deco;deco=[];let config=tr.state.facet(bracketMatchingConfig);for(let range of tr.state.selection.ranges){if(!range.empty)continue;let match=matchBrackets(tr.state,range.head,-1,config)||0<range.head&&matchBrackets(tr.state,range.head-1,1,config)||config.afterCursor&&(matchBrackets(tr.state,range.head,1,config)||range.head<tr.state.doc.length&&matchBrackets(tr.state,range.head+
1,-1,config));if(!match)continue;let mark=match.matched?matchingMark:nonmatchingMark;deco.push(mark.range(match.start.from,match.start.to));match.end&&deco.push(mark.range(match.end.from,match.end.to))}return view.Decoration.set(deco,!0)},provide:f=>view.EditorView.decorations.from(f)}),global];exports.bracketMatching=function(config={}){return[bracketMatchingConfig.of(config),bracketMatchingUnique]};exports.matchBrackets=matchBrackets}
//# sourceMappingURL=module$node_modules$$codemirror$matchbrackets$dist$index_cjs.js.map
