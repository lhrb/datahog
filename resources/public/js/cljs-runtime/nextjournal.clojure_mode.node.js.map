{"version":3,"sources":["nextjournal/clojure_mode/node.cljs"],"mappings":"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","names":["nextjournal.clojure-mode.node/coll-prop","js/module$node_modules$lezer_clojure$dist$index_cjs.props","nextjournal.clojure-mode.node/prefix-coll-prop","nextjournal.clojure-mode.node/prefix-edge-prop","nextjournal.clojure-mode.node/prefix-container-prop","nextjournal.clojure-mode.node/start-edge-prop","js/module$node_modules$lezer_tree$dist$tree_cjs.NodeProp","nextjournal.clojure-mode.node/end-edge-prop","nextjournal.clojure-mode.node/same-edge-prop","nextjournal.clojure-mode.node/node-prop","prop-name","G__51845","js/Error","nextjournal.clojure-mode.node/type","node","nextjournal.clojure-mode.node/start","nextjournal.clojure-mode.node/end","nextjournal.clojure-mode.node/up","nextjournal.clojure-mode.node/down","cljs.core/fn?","nextjournal.clojure-mode.node/down-last","nextjournal.clojure-mode.node/depth","i","temp__5756__auto__","parent","nextjournal.clojure-mode.node/left","nextjournal.clojure-mode.node/lefts","cljs.core.take_while","cljs.core/identity","cljs.core/iterate","nextjournal.clojure-mode.node/right","nextjournal.clojure-mode.node/rights","nextjournal.clojure-mode.node/coll-type?","node-type","nextjournal.clojure-mode.node/prefix-type?","nextjournal.clojure-mode.node/prefix-edge-type?","nextjournal.clojure-mode.node/prefix-container-type?","nextjournal.clojure-mode.node/same-edge-type?","nextjournal.clojure-mode.node/start-edge-type?","nextjournal.clojure-mode.node/end-edge-type?","nextjournal.clojure-mode.node/top-type?","nextjournal.clojure-mode.node/error-type?","nextjournal.clojure-mode.node/prefix?","n","nextjournal.clojure-mode.node/prefix-edge?","nextjournal.clojure-mode.node/prefix-container?","nextjournal.clojure-mode.node/same-edge?","nextjournal.clojure-mode.node/start-edge?","nextjournal.clojure-mode.node/end-edge?","nextjournal.clojure-mode.node/left-edge-type?","t","nextjournal.clojure-mode.node/left-edge?","nextjournal.clojure-mode.node/right-edge-type?","nextjournal.clojure-mode.node/right-edge?","nextjournal.clojure-mode.node/edge?","nextjournal.clojure-mode.node/closed-by","G__51874","nextjournal.clojure-mode.node/opened-by","G__51877","nextjournal.clojure-mode.node/name","nextjournal.clojure-mode.node/error?","nextjournal.clojure-mode.node/top?","nextjournal.clojure-mode.node/string?","nextjournal.clojure-mode.node/regexp?","nextjournal.clojure-mode.node/line-comment?","nextjournal.clojure-mode.node/discard?","nextjournal.clojure-mode.node/coll?","nextjournal.clojure-mode.node/terminal-type?","p__51893","map__51897","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","obj51901","k51902","obj51904","applied-science.js-interop.impl/in?*","js/undefined","obj51909","k51910","obj51911","nextjournal.clojure-mode.node/balanced?","firstChild","lastChild","temp__5752__auto__","closing","cljs.core._EQ_","cljs.core.not_EQ_","nextjournal.clojure-mode.node/ancestors","temp__5758__auto__","cljs.core/cons","cljs.core/LazySeq","nextjournal.clojure-mode.node/closest","pred","cljs.core.reduce","_","x","cljs.core/reduced","nextjournal.clojure-mode.node/highest","found","var_args","G__51947","nextjournal.clojure-mode.node/children","from","dir","child","G__51951","nextjournal.clojure_mode.node.children","G__51956","subtree","nextjournal.clojure-mode.node/eq?","y","nextjournal.clojure-mode.node/empty?","type-name","G__51993","nextjournal.clojure-mode.node/from-to","to","nextjournal.clojure_mode.node.from_to","nextjournal.clojure-mode.node/range","nextjournal.clojure_mode.selections.range","G__52003","nextjournal.clojure-mode.node/string","state","nextjournal.clojure_mode.node.string","nextjournal.clojure-mode.node/ancestor?","cljs.core/boolean","nextjournal.clojure-mode.node/move-toward","to-node","G__52005","cljs.core/compare","or__4223__auto__","nextjournal.clojure-mode.node/nodes-between","p1__52006#","nextjournal.clojure-mode.node/require-balance?","G__52010","nextjournal.clojure-mode.node/tree","js/module$node_modules$$codemirror$language$dist$index_cjs.syntaxTree","pos","G__52012","nextjournal.clojure-mode.node/cursor","tree","nextjournal.clojure-mode.node/terminal-cursor","c","nextjournal.clojure_mode.node.cursor","type","nextjournal.clojure-mode.node/up-here","p1__52018#","nextjournal.clojure-mode.node/topmost-cursor","nextjournal.clojure-mode.node/terminal-nodes","cursor","cljs.core.conj","G__52032","nextjournal.clojure-mode.node/balanced-range","nextjournal.clojure_mode.node.balanced_range","vec__52033","cljs.core.nth","vec__52036","cljs.core.sort","from-node","nextjournal.clojure_mode.node.tree","left","right","p1__52028#","cljs.core.map","G__52045","p__52041","vec__52042","node-between","p__52049","map__52050","obj52052","k52053","obj52054","obj52055","k52056","obj52057","nextjournal.clojure-mode.node/inner-span","nextjournal.clojure-mode.node/within?<","c1","c2","nextjournal.clojure-mode.node/within?","nextjournal.clojure-mode.node/follow-edges","nextjournal.clojure-mode.node/prefix","nextjournal.clojure-mode.util/guard","nextjournal.clojure-mode.node/left-edge-with-prefix","G__52067","nextjournal.clojure-mode.node/with-prefix","G__52068","nextjournal.clojure-mode.node/node|","G__52071","p1__52069#","nextjournal.clojure-mode.node/|node","G__52073","p1__52072#","nextjournal.clojure-mode.node/nearest-touching","L","G__52076","p__52078","map__52082","obj52084","k52085","obj52087","R","G__52089","p__52091","map__52092","obj52094","k52095","obj52096","mid","G__52098","p1__52074#","cljs.core.every_pred","cljs.core/some?","p1__52075#"],"sourcesContent":["(ns nextjournal.clojure-mode.node\n  (:refer-clojure :exclude [coll? ancestors string? empty? regexp? name range resolve type])\n  (:require [\"lezer-tree\" :as lz-tree]\n            [\"lezer\" :as lezer]\n            [\"lezer-clojure\" :as lezer-clj]\n            [\"@codemirror/language\" :as language]\n            [clojure.core :as core]\n            [applied-science.js-interop :as j]\n            [nextjournal.clojure-mode.util :as u]\n            [nextjournal.clojure-mode.selections :as sel]))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Node props are marked in the grammar and distinguish categories of nodes\n\n;; primitive collection\n(def coll-prop (.-coll lezer-clj/props))\n;; prefix collection - a prefix token that wraps the next element\n(def prefix-coll-prop (.-prefixColl lezer-clj/props))\n;; the prefix edge itself\n(def prefix-edge-prop (.-prefixEdge lezer-clj/props))\n;; prefix form - pair of [metadata, target]\n(def prefix-container-prop (.-prefixContainer lezer-clj/props))\n;; edges at the beginning/end of collections, + \"same\" edges (string quotes)\n(def start-edge-prop (.-closedBy lz-tree/NodeProp))\n(def end-edge-prop (.-openedBy lz-tree/NodeProp))\n(def same-edge-prop (.-sameEdge lezer-clj/props ))\n\n;; used when instantiating the parser\n(defn node-prop [prop-name]\n  (case prop-name \"prefixColl\" prefix-coll-prop\n                  \"coll\" coll-prop\n                  \"prefixEdge\" prefix-edge-prop\n                  \"prefixContainer\" prefix-container-prop\n                  \"sameEdge\" same-edge-prop))\n\n;; these wrapping functions exist mainly to avoid type hints\n;; & are mostly compiled away\n\n(defn ^lz-tree/NodeType type [^js node] (.-type node))\n\n(defn ^number start [^js node]\n  {:pre [(.-from node)]}\n  (.-from node))\n\n(defn ^number end [^js node]\n  {:pre [(.-to node)]}\n  (.-to node))\n\n;; a more zipper-like interface\n(defn ^js up [node] (.-parent ^js node))\n\n(defn ^js down [node]\n  {:pre [(not (fn? (.-lastChild ^js node)))]}\n  (.-firstChild ^js node))\n\n(defn ^js down-last [node]\n  {:pre [(not (fn? (.-lastChild ^js node)))]}\n  (.-lastChild ^js node))\n\n(defn ^number depth [^js node]\n  (loop [node node\n         i 0]\n    (if-some [parent (up node)]\n      (recur parent (inc i))\n      i)))\n\n(defn ^js left [^js node]\n  (.childBefore (up node) (start node))\n  #_(.-prevSibling node))\n\n(defn lefts [node]\n  (take-while identity (iterate left (left node))))\n\n(defn ^js right [node]\n  (.childAfter (up node) (end node))\n  #_(.-nextSibling node))\n\n(defn rights [node]\n  (take-while identity (iterate right (right node))))\n\n;; category predicates\n\n(defn coll-type? [^js node-type]\n  (or (.prop node-type coll-prop)\n      #_(.prop node-type prefix-coll-prop)))\n\n(defn ^boolean prefix-type? [node-type] (.prop ^js node-type prefix-coll-prop))\n(defn ^boolean prefix-edge-type? [node-type] (.prop ^js node-type prefix-edge-prop))\n(defn ^boolean prefix-container-type? [node-type] (.prop ^js node-type prefix-container-prop))\n(defn ^boolean same-edge-type? [node-type] (.prop ^js node-type same-edge-prop))\n(defn ^boolean start-edge-type? [node-type] (.prop ^js node-type start-edge-prop))\n(defn ^boolean end-edge-type? [node-type] (.prop ^js node-type end-edge-prop))\n(defn ^boolean top-type? [node-type] (.-isTop ^js node-type))\n(defn ^boolean error-type? [node-type]  (.-isError ^js node-type))\n\n(defn ^boolean prefix? [n] (prefix-type? (type n)))\n(defn ^boolean prefix-edge? [n] (prefix-edge-type? (type n)))\n(defn ^boolean prefix-container? [n] (prefix-container-type? (type n)))\n(defn ^boolean same-edge? [n] (same-edge-type? (type n)))\n(defn ^boolean start-edge? [n]\n  (start-edge-type? (type n)))\n(defn ^boolean end-edge? [n] (end-edge-type? (type n)))\n\n(defn ^boolean left-edge-type? [t]\n  (or (start-edge-type? t)\n      (same-edge-type? t)\n      (prefix-edge-type? t)))\n\n(defn ^boolean left-edge? [n]\n  (left-edge-type? (type  n)))\n\n(defn ^boolean right-edge-type? [t]\n  (or (end-edge-type? t)\n      (same-edge-type? t)))\n\n(defn ^boolean right-edge? [n]\n  (right-edge-type? (type n)))\n\n(defn ^boolean edge? [n]\n  (let [t (type n)]\n    (or (start-edge-type? t)\n        (end-edge-type? t)\n        (same-edge-type? t)\n        (prefix-type? t))))\n\n(defn closed-by [n]\n  (some-> (.prop (type n) (.-closedBy lz-tree/NodeProp))\n          (aget 0)))\n(defn opened-by [n]\n  (some-> (.prop (type n) (.-openedBy lz-tree/NodeProp))\n          (aget 0)))\n\n(defn ^string name [^js node] (.-name node))\n\n;; specific node types\n\n(defn error? [^js node] (error-type? node))\n(defn top? [node] (top-type? (type node)))\n(defn string? [node] (identical? \"String\" (name node)))\n(defn regexp? [node] (identical? \"RegExp\" (name node)))\n(defn line-comment? [node] (identical? \"LineComment\" (name node)))\n(defn discard? [node] (identical? \"Discard\" (name node)))\n\n(defn coll? [node]\n  (coll-type? (type node)))\n\n(defn terminal-type? [^js node-type]\n  (cond (top-type? node-type) false\n        (.prop node-type prefix-coll-prop) false\n        (.prop node-type coll-prop) false\n        (identical? \"Meta\" (name node-type)) false\n        :else true))\n\n(j/defn balanced? [^:js {:as node :keys [^js firstChild ^js lastChild]}]\n  (if-let [closing (closed-by firstChild)]\n    (and (= closing (name lastChild))\n         (not= (end firstChild) (end lastChild)))\n    true))\n\n(defn ancestors [^js node]\n  (when-some [parent (up node)]\n    (cons parent\n          (lazy-seq (ancestors parent)))))\n\n(defn ^js closest [node pred]\n  (if (pred node)\n    node\n    (reduce (fn [_ x]\n              (if (pred x) (reduced x) nil)) nil (ancestors node))))\n\n(defn ^js highest [node pred]\n  (reduce (fn [found x]\n            (if (pred x) x (reduced found))) nil (cons node (ancestors node))))\n\n(defn children\n  ([^js parent from dir]\n   (when-some [^js child (case dir 1 (.childAfter parent from)\n                                   -1 (.childBefore parent from))]\n     (cons child (lazy-seq\n                  (children parent (case dir 1 (end child)\n                                             -1 (start child)) dir)))))\n  ([^js subtree]\n   (children subtree (start subtree) 1)))\n\n(defn eq? [^js x ^js y]\n  (and (== (start x) (start y))\n       (== (end x) (end y))\n       (== (depth x) (depth y))))\n\n(defn empty?\n  \"Node only contains whitespace\"\n  [^js node]\n  (let [type-name (name node)]\n    (cond (coll? node)\n          (eq? (-> node down right) (-> node down-last))\n\n          (= \"String\" type-name)\n          (== (-> node down end) (-> node down-last start))\n          :else false)))\n\n(defn from-to\n  ([from to] #js{:from from :to to})\n  ([node]\n   (from-to (start node) (end node))))\n\n(defn range [node]\n  (sel/range (start node) (end node)))\n\n(defn string\n  ([^js state node]\n   (string state (start node) (end node)))\n  ([^js state from to]\n   (.sliceString (.-doc state) from to \\newline)))\n\n(defn ancestor? [parent child]\n  (boolean\n   (and (<= (start parent) (start child))\n        (>= (end parent) (end child))\n        (< (depth parent) (depth child)))))\n\n(defn move-toward\n  \"Returns next loc moving toward `to-path`, skipping children\"\n  [node to-node]\n  (when-not (eq? node to-node)\n    (case (compare (start to-node) (start node))\n      0 (cond (ancestor? to-node node) (up node)\n              (ancestor? node to-node) (down node))\n      -1 (if (ancestor? node to-node)\n           (down-last node)\n           (or (left node)\n               (up node)))\n      1 (if (ancestor? node to-node)\n          (down node)\n          (or (right node)\n              (up node))))))\n\n(defn nodes-between [node to-node]\n  (take-while identity (iterate #(move-toward % to-node) node)))\n\n(defn- require-balance? [node]\n  (or (coll? node)\n      (string? node)\n      (regexp? node)))\n\n(defn ^js tree\n  ([^js state] (language/syntaxTree state))\n  ([^js state pos] (-> state language/syntaxTree (.resolve pos)))\n  ([^js state pos dir] (-> state language/syntaxTree (.resolve pos dir))))\n\n(defn ^js cursor\n  ([^js tree] (.cursor tree))\n  ([^js tree pos] (.cursor tree pos))\n  ([^js tree pos dir] (.cursor tree pos dir)))\n\n(defn ^js terminal-cursor\n  [^js tree pos dir]\n  (loop [i pos]\n    (let [^js c (cursor tree i dir)\n          type (.-type c)]\n      (cond (top-type? type) nil\n            (terminal-type? (.-type c)) c\n            :else (recur (+ dir i))))))\n\n(defn ^js up-here\n  \"Returns topmost node at same starting position\"\n  [node]\n  (let [from (start node)]\n    (or (highest node #(= from (start %)))\n        node)))\n\n(defn topmost-cursor [state from]\n  (-> (cursor state from 1) .-node up-here .-cursor))\n\n(defn terminal-nodes [state from to]\n  (let [^js cursor (topmost-cursor state from)]\n    (loop [found []]\n      (let [node-type (type cursor)]\n        (cond (> (start cursor) to) found\n              (or (terminal-type? node-type)\n                  (error? node-type))\n              (let [found (conj found #js{:type node-type\n                                          :from (start cursor)\n                                          :to  (end cursor)})]\n                (.lastChild cursor)\n                (if (.next cursor)\n                  (recur found)\n                  found))\n              :else (if (.next cursor)\n                      (recur found)\n                      found))))))\n\n(j/defn balanced-range\n  ([state ^js node] (balanced-range state (start node) (end node)))\n  ([state from to]\n   (let [[from to] (sort [from to])\n         from-node (tree state from 1)\n         to-node (tree state to -1)\n         from (if (require-balance? from-node)\n                (start from-node)\n                from)\n         to (if (require-balance? to-node)\n              (end to-node)\n              to)\n         [left right] (->> (nodes-between from-node to-node)\n                           (map #(cond-> % (edge? %) up))\n                           (reduce (fn [[left right] ^js node-between]\n                                     [(if (ancestor? node-between from-node) (start node-between) left)\n                                      (if (ancestor? node-between to-node) (end node-between) right)])\n                                   [from to]))]\n     (sel/range left right))))\n\n(j/defn inner-span\n  \"Span of collection not including edges\"\n  [^:js {:as node :keys [firstChild lastChild]}]\n  #js{:from (if (left-edge? firstChild)\n              (end firstChild)\n              (start node))\n      :to (if (right-edge? lastChild)\n            (start lastChild)\n            (end node))})\n\n(defn within?< \"within (exclusive of edges)\"\n  [parent child]\n  (let [c1 (compare (start parent) (start child))\n        c2 (compare (end parent) (end child))]\n    (and (or (pos? c1) (neg? c2))\n         (not (neg? c1))\n         (not (pos? c2)))))\n\n(defn within? \"within (inclusive of edges)\"\n  [parent child]\n  (and (not (neg? (compare (start parent) (start child))))\n       (not (pos? (compare (end parent) (end child))))))\n\n(defn follow-edges [node]\n  (if (edge? node)\n    (up node)\n    node))\n\n(defn prefix [node]\n  (when-some [parent (up node)]\n    (or (u/guard parent prefix-container?)\n        (u/guard (down parent) prefix-edge?))))\n\n(defn left-edge-with-prefix [state node]\n  (str (some->> (prefix node) (string state))\n       (name (down node))))\n\n(defn with-prefix [node]\n  (cond-> node\n    (prefix node) up))\n\n(defn node|\n  \"Node ending immediately to the left of pos\"\n  [state pos]\n  (some-> (tree state pos -1)\n          (u/guard #(= pos (end %)))))\n\n(defn |node\n  \"Node starting immediately to the right of pos\"\n  [state pos]\n  (some-> (tree state pos 1)\n          (u/guard #(= pos (start %)))))\n\n(defn nearest-touching [^js state pos dir]\n  (let [L (some-> (tree state pos -1)\n                  (u/guard (j/fn [^:js {:keys [to]}] (= pos to))))\n        R (some-> (tree state pos 1)\n                  (u/guard (j/fn [^:js {:keys [from]}]\n                             (= pos from))))\n        mid (tree state pos)]\n    (case dir 1 (or (u/guard R (every-pred some? #(or (same-edge? %) (not (right-edge? %)))))\n                    L\n                    R\n                    mid)\n          -1 (or (u/guard L (every-pred some? #(or (same-edge? %) (not (left-edge? %)))))\n                 R\n                 L\n                 mid))))\n"]}