{"version":3,"sources":["nextjournal/clojure_mode/extensions/close_brackets.cljs"],"mappings":"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","names":["nextjournal.clojure-mode.extensions.close-brackets/in-string?","state","pos","G__52483","fexpr__52482","nextjournal.clojure-mode.node/name","nextjournal.clojure_mode.node.tree","nextjournal.clojure-mode.extensions.close-brackets/escaped?","cljs.core._EQ_","x__4306__auto__","y__4307__auto__","nextjournal.clojure-mode.extensions.close-brackets/backspace-backoff","from","to","and__4221__auto__","G__52487","nextjournal.clojure-mode.node/node|","nextjournal.clojure-mode.util/guard","nextjournal.clojure-mode.node/line-comment?","clojure.string/blank?","nextjournal.clojure-mode.util/line-content-at","nextjournal.clojure_mode.util.deletion","p__52489","map__52492","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","obj52494","k52495","obj52496","applied-science.js-interop.impl/in?*","js/undefined","nextjournal.clojure-mode.extensions.close-brackets/handle-backspace","doc","range","obj52502","obj52500","obj52498","k52499","obj52504","k52501","obj52505","k52503","obj52506","nextjournal.clojure_mode.util.update_ranges","nextjournal.clojure-mode.util/user-event-annotation","p__52507","map__52508","obj52511","k52512","obj52513","obj52515","k52516","obj52517","obj52518","k52519","obj52520","head","empty","anchor","map__52522","obj52524","k52525","obj52527","obj52528","k52529","obj52530","nextjournal.clojure-mode.util/from-to","node|","parent","or__4223__auto__","cljs.core/not","nextjournal.clojure-mode.node/balanced?","nextjournal.clojure-mode.node/left-edge?","nextjournal.clojure-mode.node/right-edge?","nextjournal.clojure-mode.node/end","nextjournal.clojure-mode.node/start-edge?","nextjournal.clojure-mode.node/same-edge?","nextjournal.clojure-mode.node/start","nextjournal.clojure-mode.node/empty?","nextjournal.clojure-mode.node/up","nextjournal.clojure-mode.extensions.close-brackets/coll-pairs","nextjournal.clojure-mode.extensions.close-brackets/handle-open","open","close","p__52531","map__52532","obj52534","k52535","obj52536","obj52537","k52538","obj52539","obj52540","k52541","obj52542","obj52543","k52544","obj52545","obj52546","k52547","obj52548","nextjournal.clojure_mode.util.insertion","nextjournal.clojure-mode.extensions.close-brackets/handle-close","key-name","p__52549","map__52550","obj52552","k52553","obj52554","obj52555","k52556","obj52557","obj52558","k52559","obj52560","obj52561","k52562","obj52563","unbalanced","G__52564","nextjournal.clojure-mode.node/ancestors","cljs.core.filter","cljs.core.every_pred","nextjournal.clojure-mode.node/coll?","cljs.core/complement","cljs.core/first","closing","G__52565","nextjournal.clojure-mode.node/down","nextjournal.clojure-mode.node/closed-by","G__52566","temp__5754__auto__","close-node-end","cursor","nextjournal.clojure-mode.node/terminal-cursor","nextjournal.clojure-mode.node/right-edge-type?","p__52567","map__52568","obj52570","k52571","obj52572","nextjournal.clojure-mode.extensions.close-brackets/handle-backspace-cmd","view","nextjournal.clojure-mode.util/dispatch-some","nextjournal.clojure-mode.extensions.close-brackets/handle-open-cmd","p__52573","map__52574","obj52576","k52577","obj52578","nextjournal.clojure-mode.extensions.close-brackets/handle-close-cmd","p__52579","map__52580","obj52582","k52583","obj52584","nextjournal.clojure-mode.extensions.close-brackets/extension","js/module$node_modules$$codemirror$view$dist$index_cjs.keymap","p__52585","map__52586","obj52588","k52589","obj52590"],"sourcesContent":["(ns nextjournal.clojure-mode.extensions.close-brackets\n  (:require [\"w3c-keyname\" :refer [keyName]]\n            [\"@codemirror/view\" :as view]\n            [\"@codemirror/state\" :refer [EditorState\n                                         EditorSelection\n                                         Transaction\n                                         CharCategory\n                                         Extension]]\n            [\"@codemirror/text\" :as text :refer [Text]]\n            [applied-science.js-interop :as j]\n            [nextjournal.clojure-mode.selections :as sel]\n            [nextjournal.clojure-mode.node :as n]\n            [nextjournal.clojure-mode.chars :as chars]\n            [nextjournal.clojure-mode.util :as u :refer [from-to]]\n            [nextjournal.clojure-mode.test-utils :as test-utils]\n            [nextjournal.clojure-mode.commands :as commands]\n            [clojure.string :as str]))\n\n(defn in-string? [state pos]\n  (#{\"StringContent\" \"String\"} (n/name (n/tree state pos))))\n\n(defn escaped? [state pos]\n  (= \\\\ (.. state -doc (slice (max 0 (dec pos)) pos) toString)))\n\n(defn backspace-backoff [state from to]\n  (if\n   ;; handle line-comments (backspace should not drag forms up into line comments)\n   (and\n    ;; we are directly in front of a line-comment\n    (some-> (n/node| state (dec from)) (u/guard n/line-comment?))\n    ;; current line is blank\n    (not (str/blank? (u/line-content-at state from))))\n    {:cursor (dec from)}\n    (u/deletion from to)))\n\n(j/defn handle-backspace\n  \"- skips over closing brackets\n   - when deleting an opening bracket of an empty list, removes both brackets\"\n  [^:js {:as ^EditorState state :keys [doc]}]\n  (when-not (and (= 1 (.. state -selection -ranges -length))\n                 (let [^js range (j/get-in state [:selection :ranges 0])]\n                   (and (.-empty range) (= 0 (.-from range)))))\n    (u/update-ranges state\n      #js{:annotations (u/user-event-annotation \"delete\")}\n      (j/fn [^:js {:as range :keys [head empty anchor]}]\n        (j/let [^:js {:as range from :from to :to} (from-to head anchor)\n                ^js node| (.resolve (n/tree state) from -1) ;; node immediately to the left of cursor\n                ^js parent (.-parent node|)]\n          (cond\n\n            (or (not empty)                                 ;; selection\n                (= \"StringContent\" (n/name (n/tree state from -1))) ;; inside a string\n                (and parent (not (n/balanced? parent)) (n/left-edge? node|))) ;; unbalanced left-paren\n            (u/deletion from to)\n\n            ;; entering right edge of collection - skip\n            (and (n/right-edge? node|) (== from (n/end parent)))\n            {:cursor (dec from)}\n\n            ;; inside left edge of collection - remove or stop\n            (and (or (n/start-edge? node|)\n                     (n/same-edge? node|)) (== (n/start node|) (n/start parent)))\n            (if (n/empty? (n/up node|))\n              ;; remove empty collection\n              {:cursor  (n/start parent)\n               :changes [(from-to (n/start parent) (n/end parent))]}\n              ;; stop cursor at inner-left of collection\n              {:cursor from})\n\n            :else (backspace-backoff state from to)))))))\n\n(def coll-pairs {\"(\" \")\"\n                 \"[\" \"]\"\n                 \"{\" \"}\"\n                 \\\" \\\"})\n\n(defn handle-open [^EditorState state ^string open]\n  (let [^string close (coll-pairs open)]\n    (u/update-ranges state\n      #js{:annotations (u/user-event-annotation \"input\")}\n      (j/fn [^:js {:keys [from to head anchor empty]}]\n        (cond\n          (in-string? state from)\n          (if (= open \\\")\n            (u/insertion head \"\\\\\\\"\")\n            (u/insertion from to open))\n          ;; allow typing escaped bracket\n          (escaped? state from)\n          (u/insertion from to open)\n          :else\n          (if empty\n            {:changes {:insert (str open close)\n                       :from   head}\n             :cursor  (+ head (count open))}\n            ;; wrap selections with brackets\n            {:changes [{:insert open :from from}\n                       {:insert close :from to}]\n             :from-to [(+ anchor (count open)) (+ head (count open))]}))))))\n\n(defn handle-close [state key-name]\n  (u/update-ranges state\n    #js{:annotations (u/user-event-annotation \"input\")}\n    (j/fn [^:js {:as range :keys [empty head from to]}]\n      (if (or (in-string? state from)\n              (escaped? state from))\n        (u/insertion from to key-name)\n        (when empty\n          (or\n           ;; close unbalanced (open) collection\n           (let [unbalanced (some->\n                             (n/tree state head -1)\n                             (n/ancestors)\n                             (->> (filter (every-pred n/coll? (complement n/balanced?))))\n                             first)\n                 closing (some-> unbalanced n/down n/closed-by)\n                 pos (some-> unbalanced n/end)]\n             (when (and closing (= closing key-name))\n               {:changes {:from   pos\n                          :insert closing}\n                :cursor  (inc pos)}))\n\n           ;; jump to next closing bracket\n           (when-let [close-node-end\n                      (when-let [^js cursor (-> state n/tree\n                                                (n/terminal-cursor head 1))]\n                        (loop []\n                          (if (n/right-edge-type? (.-type cursor))\n                            (n/end cursor)\n                            (when (.next cursor)\n                              (recur)))))]\n             {:cursor close-node-end})\n           ;; no-op\n           {:cursor head}\n           #_(u/insertion head key-name)))))))\n\n(j/defn handle-backspace-cmd [^:js {:as view :keys [state]}]\n  (u/dispatch-some view (handle-backspace state)))\n\n(defn handle-open-cmd [key-name]\n  (j/fn [^:js {:as view :keys [state]}]\n    (u/dispatch-some view (handle-open state key-name))))\n\n(defn handle-close-cmd [key-name]\n  (j/fn [^:js {:as view :keys [state]}]\n    (u/dispatch-some view (handle-close state key-name))))\n\n(defn extension []\n  (.of view/keymap\n       (j/lit\n        [{:key \"Backspace\"\n          :run (j/fn [^:js {:as view :keys [state]}]\n                 (u/dispatch-some view (handle-backspace state)))}\n         {:key \"(\" :run (handle-open-cmd \"(\")}\n         {:key \"[\" :run (handle-open-cmd \"[\")}\n         {:key \"{\" :run (handle-open-cmd \"{\")}\n         {:key \\\" :run (handle-open-cmd \\\")}\n         {:key \\) :run (handle-close-cmd \\))}\n         {:key \\] :run (handle-close-cmd \\])}\n         {:key \\} :run (handle-close-cmd \\})}])))\n"]}