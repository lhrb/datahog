{
"version":3,
"file":"module$node_modules$lezer$dist$index_cjs.js",
"lineCount":58,
"mappings":"AAAAA,cAAA,CAAA,wCAAA,CAA6D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAimBrGC,QAASA,YAAW,CAACC,KAAD,CAAQC,IAAA,CAAOC,WAAf,CAA4B,CAC5C,GAAoB,QAApB,EAAI,MAAOF,MAAX,CACI,MAAOA,MACX,KAAIG,MAAQ,IACZ,KAAK,IAAIC,IAAM,CAAV,CAAaC,IAAM,CAAxB,CAA2BD,GAA3B,CAAiCJ,KAAMM,CAAAA,MAAvC,CAAA,CAAgD,CAC5C,IAAIC,MAAQ,CACZ,KAAA,CAAA,CAAA,CAAS,CAAA,IACDC,KAAOR,KAAMS,CAAAA,UAAN,CAAiBL,GAAA,EAAjB,CAAX,KAAoCM,KAAO,CAAA,CAC3C,IAAY,GAAZ,EAAIF,IAAJ,CAAkC,CAC9BD,KAAA,CAAQ,KACR,MAF8B,CAItB,EAAZ,EAAIC,IAAJ,EACIA,IAAA,EACQ,GAAZ,EAAIA,IAAJ,EACIA,IAAA,EACQA,KAARG,EAAe,EACN,GAAb,EAAIA,IAAJ,GACIA,IACA,EADS,EACT,CAAAD,IAAA,CAAO,CAAA,CAFX,CAIAH,MAAA,EAASI,IACT,IAAID,IAAJ,CACI,KACJH,MAAA,EAAS,EAlBJ,CAoBLJ,KAAJ,CACIA,KAAA,CAAME,GAAA,EAAN,CADJ,CACmBE,KADnB,CAGIJ,KAHJ,CAGY,IAAIF,IAAJ,CAASM,KAAT,CAzBgC,CA2BhD,MAAOJ,MA/BqC,CAuChDS,QAASA,MAAK,CAACC,IAAD;AAAOT,GAAP,CAAYU,IAAZ,CAAkB,CAC5B,IAAIC,OAASF,IAAKE,CAAAA,MAAL,CAAYX,GAAZ,CACb,KAAA,CAAA,CAAA,CACI,GAAa,CAAP,CAAAU,IAAA,CAAW,CAAAC,MAAOC,CAAAA,WAAP,CAAmBZ,GAAnB,CAAX,CAAqC,CAAAW,MAAOE,CAAAA,UAAP,CAAkBb,GAAlB,CAA3C,CACI,IAAA,CAAA,CAAA,CAAS,CACL,IAAY,CAAP,CAAAU,IAAA,CAAWC,MAAOG,CAAAA,EAAlB,CAAuBd,GAAvB,CAA6BW,MAAOI,CAAAA,IAApC,CAA2Cf,GAAhD,GAAwD,CAACW,MAAOK,CAAAA,IAAKC,CAAAA,OAArE,CACI,MAAc,EAAP,CAAAP,IAAA,CAAWQ,IAAKC,CAAAA,GAAL,CAAS,CAAT,CAAYD,IAAKE,CAAAA,GAAL,CAAST,MAAOG,CAAAA,EAAhB,CAAqB,CAArB,CAAwBd,GAAxB,CAA8B,CAA9B,CAAZ,CAAX,CAA2DkB,IAAKE,CAAAA,GAAL,CAASX,IAAKP,CAAAA,MAAd,CAAsBgB,IAAKC,CAAAA,GAAL,CAASR,MAAOI,CAAAA,IAAhB,CAAuB,CAAvB,CAA0Bf,GAA1B,CAAgC,CAAhC,CAAtB,CACtE,IAAW,CAAP,CAAAU,IAAA,CAAWC,MAAOU,CAAAA,WAAP,EAAX,CAAkCV,MAAOW,CAAAA,WAAP,EAAtC,CACI,KACJ,IAAI,CAACX,MAAOY,CAAAA,MAAP,EAAL,CACI,MAAc,EAAP,CAAAb,IAAA,CAAW,CAAX,CAAeD,IAAKP,CAAAA,MAN1B,CAJW,CA+hBhCsB,QAASA,eAAc,CAACC,KAAD,CAAQC,SAAR,CAAmB,CACtC,IAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBD,SAAUxB,CAAAA,MAA9B,CAAsCyB,CAAA,EAAtC,CAA2C,CACvC,IAAIC,MAAQF,SAAA,CAAUC,CAAV,CACZ,IAAIC,KAAM5B,CAAAA,GAAV;AAAiByB,KAAMzB,CAAAA,GAAvB,EAA8B4B,KAAMC,CAAAA,SAAN,CAAgBJ,KAAhB,CAA9B,CAAsD,CAC9CC,SAAA,CAAUC,CAAV,CAAaG,CAAAA,KAAjB,CAAyBL,KAAMK,CAAAA,KAA/B,GACIJ,SAAA,CAAUC,CAAV,CADJ,CACmBF,KADnB,CAEA,OAHkD,CAFf,CAQ3CC,SAAUK,CAAAA,IAAV,CAAeN,KAAf,CATsC,CAsS1CO,QAASA,KAAI,CAACC,IAAD,CAAOC,GAAP,CAAY,CAAE,MAAOD,KAAA,CAAKC,GAAL,CAAP,CAAoBD,IAAA,CAAKC,GAAL,CAAW,CAAX,CAApB,EAAqC,EAAvC,CACzBC,QAASA,WAAU,CAACF,IAAD,CAAOG,KAAP,CAAcC,IAAd,CAAoB,CACnC,IAAK,IAAIV,EAAIS,KAAR,CAAehC,IAApB,CAA8C,KAA9C,GAA2BA,IAA3B,CAAkC6B,IAAA,CAAKN,CAAL,CAAlC,EAA+DA,CAAA,EAA/D,CACI,GAAIvB,IAAJ,EAAYiC,IAAZ,CACI,MAAOV,EAAP,CAAWS,KACnB,OAAO,EAJ4B,CAMvCE,QAASA,aAAY,CAACC,MAAD,CAAS,CAC1B,IAAIC,KAAO,IACX,KAAK,IAAIf,KAAT,GAAkBc,OAAlB,CACQd,KAAMzB,CAAAA,GAAV,EAAiByB,KAAMgB,CAAAA,CAAE7C,CAAAA,KAAMM,CAAAA,MAA/B,EACIuB,KAAMgB,CAAAA,CAAEC,CAAAA,MAAOC,CAAAA,SAAf,CAAyBlB,KAAMmB,CAAAA,KAA/B,CAAsC,CAAtC,CADJ,GAEK,CAACJ,IAFN,EAEcA,IAAKV,CAAAA,KAFnB,CAE2BL,KAAMK,CAAAA,KAFjC,IAGIU,IAHJ,CAGWf,KAHX,CAKJ,OAAOe,KARmB,CAn9C1BK,MAAAA;AAAUrD,OAAA,CAAQ,qCAAR,CACd,aAEAsD,OAAOC,CAAAA,cAAP,CAAsBrD,OAAtB,CAA+B,YAA/B,CAA6C,CAAES,MAAO,CAAA,CAAT,CAA7C,CAEA,KAAI6C,UAAYxD,OAAA,CAAQ,8CAAR,CAMhB,MAAMyD,MAAN,CAEIC,WAAW,CAEXT,CAFW,CAMXhB,KANW,CAQXmB,KARW,CAcXO,SAdW,CAgBXnD,GAhBW,CAoBX8B,KApBW,CAyBXsB,MAzBW,CAgCXC,UAhCW,CAkCXC,UAlCW,CAwCX/B,MAxCW,CAwCH,CACJ,IAAKkB,CAAAA,CAAL,CAASA,CACT,KAAKhB,CAAAA,KAAL,CAAaA,KACb,KAAKmB,CAAAA,KAAL,CAAaA,KACb,KAAKO,CAAAA,SAAL,CAAiBA,SACjB,KAAKnD,CAAAA,GAAL,CAAWA,GACX,KAAK8B,CAAAA,KAAL,CAAaA,KACb,KAAKsB,CAAAA,MAAL,CAAcA,MACd,KAAKC,CAAAA,UAAL,CAAkBA,UAClB,KAAKC,CAAAA,UAAL,CAAkBA,UAClB,KAAK/B,CAAAA,MAAL,CAAcA,MAVV,CAaRgC,QAAQ,EAAG,CACP,MAAO,IAAI,IAAK9B,CAAAA,KAAM+B,CAAAA,MAAX,CAAkB,CAACC,CAAD;AAAI9B,CAAJ,CAAA,EAAmB,CAAnB,EAAUA,CAAV,CAAc,CAAhC,CAAwC+B,CAAAA,MAAxC,CAA+C,IAAKd,CAAAA,KAApD,CAAJ,KAAmE,IAAK5C,CAAAA,GAAxE,GAA8E,IAAK8B,CAAAA,KAAL,CAAa,GAAb,CAAmB,IAAKA,CAAAA,KAAxB,CAAgC,EAA9G,EADA,CAKJM,YAAK,CAACK,CAAD,CAAIG,KAAJ,CAAW5C,GAAA,CAAM,CAAjB,CAAoB,CAC5B,IAAI2D,GAAKlB,CAAEC,CAAAA,MAAOkB,CAAAA,OAClB,OAAO,KAAIX,KAAJ,CAAUR,CAAV,CAAa,EAAb,CAAiBG,KAAjB,CAAwB5C,GAAxB,CAA6BA,GAA7B,CAAkC,CAAlC,CAAqC,EAArC,CAAyC,CAAzC,CAA4C2D,EAAA,CAAK,IAAIE,YAAJ,CAAiBF,EAAjB,CAAqBA,EAAGvB,CAAAA,KAAxB,CAAL,CAAsC,IAAlF,CAAwF,IAAxF,CAFqB,CAQ5B,WAAU,EAAA,CAAE,MAAO,KAAKkB,CAAAA,UAAL,CAAkB,IAAKA,CAAAA,UAAWM,CAAAA,OAAlC,CAA4C,IAArD,CAIdE,SAAS,CAAClB,KAAD,CAAQR,KAAR,CAAe,CACpB,IAAKX,CAAAA,KAAMM,CAAAA,IAAX,CAAgB,IAAKa,CAAAA,KAArB,CAA4BR,KAA5B,CAAmC,IAAKiB,CAAAA,UAAxC,CAAqD,IAAKD,CAAAA,MAAOlD,CAAAA,MAAjE,CACA,KAAK0C,CAAAA,KAAL,CAAaA,KAFO,CAMxBmB,MAAM,CAACC,MAAD,CAAS,CAAA,IACPC,MAAQD,MAARC,EAAkB,EAAtB,KAAiDjD,KAAOgD,MAAPhD,CAAgB,KAAjE,CACI,CAAE0B,MAAF,CAAA,CAAa,IAAKD,CAAAA,CACtB,KAAIyB,MAAQxB,MAAOyB,CAAAA,iBAAP,CAAyBnD,IAAzB,CACRkD;KAAJ,GACI,IAAKpC,CAAAA,KADT,EACkBoC,KADlB,CAEA,IAAa,CAAb,EAAID,KAAJ,CAGQjD,IAEJ,CAFW0B,MAAO0B,CAAAA,aAElB,EADI,IAAKC,CAAAA,SAAL,CAAerD,IAAf,CAAqB,IAAKmC,CAAAA,SAA1B,CAAqC,IAAKA,CAAAA,SAA1C,CAAqD,CAArD,CAAwD,CAAA,CAAxD,CACJ,CAAA,IAAKW,CAAAA,SAAL,CAAepB,MAAO4B,CAAAA,OAAP,CAAe,IAAK1B,CAAAA,KAApB,CAA2B5B,IAA3B,CAAiC,CAAA,CAAjC,CAAf,CAAuD,IAAKmC,CAAAA,SAA5D,CALJ,KAAA,CAcIoB,KAAAA,CAAO,IAAK9C,CAAAA,KAAMvB,CAAAA,MAAlBqE,CAA0C,CAA1CA,EAA6BN,KAA7BM,CAAqC,CAArCA,GAAgDP,MAAA,CAAS,MAAT,CAAiC,CAAjC,CAAqC,CAArFO,CACAnC,MAAAA,CAAQ,IAAKX,CAAAA,KAAL,CAAW8C,KAAX,CAAkB,CAAlB,CACZ,KAAuCC,MAAQ,IAAKnB,CAAAA,UAAbmB,CAA0B,IAAKpB,CAAAA,MAAOlD,CAAAA,MAAtCsE,CAAtB,IAAK/C,CAAAA,KAAL4B,CAAWkB,KAAXlB,CAAkB,CAAlBA,CAEjB,IAAIrC,IAAJ,CAAW0B,MAAO0B,CAAAA,aAAlB,EAAoCJ,MAApC,CAA6C,MAA7C,CAAuE,CACnE,IAAIhE,IAAM0C,MAAOC,CAAAA,SAAP,CAAiB,IAAKC,CAAAA,KAAtB,CAA6B,CAA7B,CAAA,CAAgD,IAAK5C,CAAAA,GAArD,CAA2D,IAAKmD,CAAAA,SAC1E,KAAKkB,CAAAA,SAAL,CAAerD,IAAf,CAAqBoB,KAArB,CAA4BpC,GAA5B,CAAiCwE,KAAjC,CAAyC,CAAzC,CAA4C,CAAA,CAA5C,CAFmE,CAWvE,IANI,IAAK5B,CAAAA,KAMT;AAPIoB,MAAJ,CAAa,MAAb,CACiB,IAAKvC,CAAAA,KAAL,CAAW8C,KAAX,CADjB,CAKiB7B,MAAO4B,CAAAA,OAAP,CADK,IAAK7C,CAAAA,KAALgD,CAAWF,KAAXE,CAAkB,CAAlBA,CACL,CAA4BzD,IAA5B,CAAkC,CAAA,CAAlC,CAEjB,CAAO,IAAKS,CAAAA,KAAMvB,CAAAA,MAAlB,CAA2BqE,KAA3B,CAAA,CACI,IAAK9C,CAAAA,KAAMiD,CAAAA,GAAX,EA9BJ,CAMI,IAAKC,CAAAA,aAAL,CAAmB3D,IAAnB,CAZO,CAyCfqD,SAAS,CAAChC,IAAD,CAAOD,KAAP,CAAcwC,GAAd,CAAmBC,IAAA,CAAO,CAA1B,CAA6BC,QAAA,CAAW,CAAA,CAAxC,CAA+C,CACpD,GAAY,CAAZ,EAAIzC,IAAJ,CAAyB,CAAA,IACjB0C,IAAM,IADW,CACLC,IAAM,IAAK5B,CAAAA,MAAOlD,CAAAA,MACvB,EAAX,EAAI8E,GAAJ,EAAgBD,GAAIxD,CAAAA,MAApB,GACIyD,GACA,CADMD,GAAI1B,CAAAA,UACV,CADuB0B,GAAIxD,CAAAA,MAAO8B,CAAAA,UAClC,CAAA0B,GAAA,CAAMA,GAAIxD,CAAAA,MAFd,CAIA,IAAU,CAAV,CAAIyD,GAAJ,EAAsC,CAAtC,EAAeD,GAAI3B,CAAAA,MAAJ,CAAW4B,GAAX,CAAiB,CAAjB,CAAf,EAA2E,EAA3E,CAAqDD,GAAI3B,CAAAA,MAAJ,CAAW4B,GAAX,CAAiB,CAAjB,CAArD,CAA+E,CAC3E,GAAI5C,KAAJ,EAAawC,GAAb,CACI,MACJ,IAAIG,GAAI3B,CAAAA,MAAJ,CAAW4B,GAAX,CAAiB,CAAjB,CAAJ,EAA2B5C,KAA3B,CAAkC,CAC9B2C,GAAI3B,CAAAA,MAAJ,CAAW4B,GAAX,CAAiB,CAAjB,CAAA,CAAsBJ,GACtB,OAF8B,CAHyC,CAN1D,CAezB,GAAKE,QAAL,EAAiB,IAAK9E,CAAAA,GAAtB,EAA6B4E,GAA7B,CAGK,CACGK,QAAAA,CAAQ,IAAK7B,CAAAA,MAAOlD,CAAAA,MACxB;GAAY,CAAZ,CAAI+E,QAAJ,EAA2C,CAA3C,EAAiB,IAAK7B,CAAAA,MAAL,CAAY6B,QAAZ,CAAoB,CAApB,CAAjB,CACI,IAAA,CAAe,CAAf,CAAOA,QAAP,EAAoB,IAAK7B,CAAAA,MAAL,CAAY6B,QAAZ,CAAoB,CAApB,CAApB,CAA6CL,GAA7C,CAAA,CAEI,IAAKxB,CAAAA,MAAL,CAAY6B,QAAZ,CAKA,CALqB,IAAK7B,CAAAA,MAAL,CAAY6B,QAAZ,CAAoB,CAApB,CAKrB,CAJA,IAAK7B,CAAAA,MAAL,CAAY6B,QAAZ,CAAoB,CAApB,CAIA,CAJyB,IAAK7B,CAAAA,MAAL,CAAY6B,QAAZ,CAAoB,CAApB,CAIzB,CAHA,IAAK7B,CAAAA,MAAL,CAAY6B,QAAZ,CAAoB,CAApB,CAGA,CAHyB,IAAK7B,CAAAA,MAAL,CAAY6B,QAAZ,CAAoB,CAApB,CAGzB,CAFA,IAAK7B,CAAAA,MAAL,CAAY6B,QAAZ,CAAoB,CAApB,CAEA,CAFyB,IAAK7B,CAAAA,MAAL,CAAY6B,QAAZ,CAAoB,CAApB,CAEzB,CADAA,QACA,EADS,CACT,CAAW,CAAX,CAAIJ,IAAJ,GACIA,IADJ,EACY,CADZ,CAGR,KAAKzB,CAAAA,MAAL,CAAY6B,QAAZ,CAAA,CAAqB5C,IACrB,KAAKe,CAAAA,MAAL,CAAY6B,QAAZ,CAAoB,CAApB,CAAA,CAAyB7C,KACzB,KAAKgB,CAAAA,MAAL,CAAY6B,QAAZ,CAAoB,CAApB,CAAA,CAAyBL,GACzB,KAAKxB,CAAAA,MAAL,CAAY6B,QAAZ,CAAoB,CAApB,CAAA,CAAyBJ,IAhBxB,CAHL,IACI,KAAKzB,CAAAA,MAAOrB,CAAAA,IAAZ,CAAiBM,IAAjB,CAAuBD,KAAvB,CAA8BwC,GAA9B,CAAmCC,IAAnC,CAjBgD,CAwCxDK,KAAK,CAAClB,MAAD,CAAS5D,IAAT,CAAe+E,OAAf,CAAwB,CACzB,GAAInB,MAAJ;AAAa,MAAb,CACI,IAAKF,CAAAA,SAAL,CAAeE,MAAf,CAAwB,KAAxB,CAA+C,IAAKhE,CAAAA,GAApD,CADJ,KAGK,IAAwC,CAAxC,GAAKgE,MAAL,CAAc,MAAd,EAA2C,CAAA,IACxC5B,MAAQ,IAAKpC,CAAAA,GAD2B,CACF,CAAE0C,MAAF,CAAA,CAAa,IAAKD,CAAAA,CAC5D,IAAI0C,OAAJ,CAAc,IAAKnF,CAAAA,GAAnB,EAA0BI,IAA1B,EAAkCsC,MAAO0C,CAAAA,OAAzC,CACI,IAAKpF,CAAAA,GACL,CADWmF,OACX,CAAKzC,MAAOC,CAAAA,SAAP,CAHyBqB,MAGzB,CAA4B,CAA5B,CAAL,GACI,IAAKb,CAAAA,SADT,CACqBgC,OADrB,CAGJ,KAAKrB,CAAAA,SAAL,CANkCE,MAMlC,CAA0B5B,KAA1B,CACIhC,KAAJ,EAAYsC,MAAO0C,CAAAA,OAAnB,EACI,IAAKhC,CAAAA,MAAOrB,CAAAA,IAAZ,CAAiB3B,IAAjB,CAAuBgC,KAAvB,CAA8B+C,OAA9B,CAAuC,CAAvC,CACJ,KAAKE,CAAAA,YAAL,CAAkBjF,IAAlB,CAV4C,CAA3C,IAaGA,KAEJ,EAFY,IAAKqC,CAAAA,CAAEC,CAAAA,MAAO0C,CAAAA,OAE1B,EADI,IAAKhC,CAAAA,MAAOrB,CAAAA,IAAZ,CAAiB3B,IAAjB,CAAuB,IAAKJ,CAAAA,GAA5B,CAAiCmF,OAAjC,CAA0C,CAA1C,CACJ,CAAA,IAAKnF,CAAAA,GAAL,CAAWmF,OAnBU,CAwB7BG,KAAK,CAACtB,MAAD,CAAS5D,IAAT,CAAe+E,OAAf,CAAwB,CACrBnB,MAAJ,CAAa,KAAb,CACI,IAAKD,CAAAA,MAAL,CAAYC,MAAZ,CADJ,CAGI,IAAKkB,CAAAA,KAAL,CAAWlB,MAAX;AAAmB5D,IAAnB,CAAyB+E,OAAzB,CAJqB,CAS7BI,OAAO,CAACpF,KAAD,CAAQC,IAAR,CAAc,CACjB,IAAI6E,MAAQ,IAAKxC,CAAAA,CAAE+C,CAAAA,MAAOtF,CAAAA,MAAtB+E,CAA+B,CACnC,IAAY,CAAZ,CAAIA,KAAJ,EAAiB,IAAKxC,CAAAA,CAAE+C,CAAAA,MAAP,CAAcP,KAAd,CAAjB,EAAyC9E,KAAzC,CACI,IAAKsC,CAAAA,CAAE+C,CAAAA,MAAOzD,CAAAA,IAAd,CAAmB5B,KAAnB,CACA,CAAA8E,KAAA,EAEJ,KAAI7C,MAAQ,IAAKpC,CAAAA,GACjB,KAAKmD,CAAAA,SAAL,CAAiB,IAAKnD,CAAAA,GAAtB,CAA4BoC,KAA5B,CAAoCjC,KAAMD,CAAAA,MAC1C,KAAK4D,CAAAA,SAAL,CAAe1D,IAAf,CAAqBgC,KAArB,CACA,KAAKgB,CAAAA,MAAOrB,CAAAA,IAAZ,CAAiBkD,KAAjB,CAAwB7C,KAAxB,CAA+B,IAAKe,CAAAA,SAApC,CAA+C,EAA/C,CACI,KAAKG,CAAAA,UAAT,EACI,IAAKmC,CAAAA,aAAL,CAAmB,IAAKnC,CAAAA,UAAWoC,CAAAA,OAAQC,CAAAA,KAAxB,CAA8B,IAAKrC,CAAAA,UAAWM,CAAAA,OAA9C,CAAuDzD,KAAvD,CAA8D,IAAKsC,CAAAA,CAAE7C,CAAAA,KAArE,CAA4E,IAA5E,CAAnB,CAXa,CAiBrBgG,KAAK,EAAG,CACJ,IAAIrE,OAAS,IAMb,KALA,IAAIW,IAAMX,MAAO6B,CAAAA,MAAOlD,CAAAA,MAKxB,CAAa,CAAb,CAAOgC,GAAP,EAAkBX,MAAO6B,CAAAA,MAAP,CAAclB,GAAd,CAAoB,CAApB,CAAlB,CAA2CX,MAAO4B,CAAAA,SAAlD,CAAA,CACIjB,GAAA;AAAO,CARP,KASAkB,OAAS7B,MAAO6B,CAAAA,MAAOyC,CAAAA,KAAd,CAAoB3D,GAApB,CAEb,KAFuCqC,GAEvC,CAF8ChD,MAAO8B,CAAAA,UAErD,CAFkEnB,GAElE,CAAOX,MAAP,EAAiBgD,GAAjB,EAAyBhD,MAAO8B,CAAAA,UAAhC,CAAA,CACI9B,MAAA,CAASA,MAAOA,CAAAA,MACpB,OAAO,KAAI0B,KAAJ,CAAU,IAAKR,CAAAA,CAAf,CAAkB,IAAKhB,CAAAA,KAAMoE,CAAAA,KAAX,EAAlB,CAAsC,IAAKjD,CAAAA,KAA3C,CAAkD,IAAKO,CAAAA,SAAvD,CAAkE,IAAKnD,CAAAA,GAAvE,CAA4E,IAAK8B,CAAAA,KAAjF,CAAwFsB,MAAxF,CAAgGmB,GAAhG,CAAsG,IAAKjB,CAAAA,UAA3G,CAAuH/B,MAAvH,CAbH,CAiBRuE,eAAe,CAAC1F,IAAD,CAAO+E,OAAP,CAAgB,CAC3B,IAAIY,OAAS3F,IAAT2F,EAAiB,IAAKtD,CAAAA,CAAEC,CAAAA,MAAO0C,CAAAA,OAC/BW,OAAJ,EACI,IAAK1B,CAAAA,SAAL,CAAejE,IAAf,CAAqB,IAAKJ,CAAAA,GAA1B,CAA+BmF,OAA/B,CACJ,KAAKd,CAAAA,SAAL,CAAe,CAAf,CAA4B,IAAKrE,CAAAA,GAAjC,CAAsCmF,OAAtC,CAA+CY,MAAA,CAAS,CAAT,CAAa,CAA5D,CACA,KAAK/F,CAAAA,GAAL,CAAW,IAAKmD,CAAAA,SAAhB,CAA4BgC,OAC5B,KAAKrD,CAAAA,KAAL,EAAc,GANa,CAY/BkE,QAAQ,CAAC3D,IAAD,CAAO,CACX,IAAK,IAAI4D,IAAM,IAAIC,cAAJ,CAAmB,IAAnB,CAAf,CAAA,CAAA,CAA2C,CACvC,IAAIlC;AAAS,IAAKvB,CAAAA,CAAEC,CAAAA,MAAOyD,CAAAA,SAAd,CAAwBF,GAAIjB,CAAAA,GAA5B,CAAiC,CAAjC,CAAThB,EAAoE,IAAKvB,CAAAA,CAAEC,CAAAA,MAAO0D,CAAAA,SAAd,CAAwBH,GAAIjB,CAAAA,GAA5B,CAAiC3C,IAAjC,CACxE,IAAyC,CAAzC,GAAK2B,MAAL,CAAc,KAAd,EACI,MAAO,CAAA,CACX,IAAc,CAAd,EAAIA,MAAJ,CACI,MAAO,CAAA,CACXiC,IAAIlC,CAAAA,MAAJ,CAAWC,MAAX,CANuC,CADhC,CAWX,aAAY,EAAA,CACZ,IAAK,IAAIpB,MAAQ,IAAKA,CAAAA,KAAjB,CAAwB2B,KAAO,IAAK9C,CAAAA,KAAMvB,CAAAA,MAA/C,CAAA,CAAA,CAAyD,CACrD,IAAImG,MAAQ,IAAK5D,CAAAA,CAAEC,CAAAA,MAAOyD,CAAAA,SAAd,CAAwBvD,KAAxB,CAA+B,CAA/B,CACZ,IAAI,EAAEyD,KAAF,CAAU,KAAV,CAAJ,CACI,MAAO,EACX9B,KAAA,EAAQ,CAAR,EAAa8B,KAAb,EAAsB,EAAtB,CACA,KAAKA,KAAL,CAAa,KAAb,EAAsC,IAAK5D,CAAAA,CAAEC,CAAAA,MAAO0B,CAAAA,aAApD,CACI,MAAO,KAAK3C,CAAAA,KAAL,CAAW8C,IAAX,CAAkB,CAAlB,CACX3B,MAAA,CAAQ,IAAKnB,CAAAA,KAAL,CAAW8C,IAAX,CAP6C,CAD7C,CAkChB+B,OAAO,CAACC,KAAD,CAAQC,MAAR,CAAgB,CAAA,IACf5D,MAAQ,IAAKA,CAAAA,KADE,KACK6D,MAAQ,IAAKhF,CAAAA,KAAMvB,CAAAA,MADxB,CACgC,CAAEwC,MAAF,CAAA,CAAa,IAAKD,CAAAA,CACrE,KAAA,CAAA,CAAA,CAAS,CACL,IAAI4D;AAAQ3D,MAAOyD,CAAAA,SAAP,CAAiBvD,KAAjB,CAAwB,CAAxB,CACRqB,MAAAA,CAAQoC,KAARpC,EAAiB,EAArB,KAAgD5B,KAAOgE,KAAPhE,CAAe,KAC/D,IAA0B,EAA1B,CAAIkE,KAAMG,CAAAA,OAAN,CAAcrE,IAAd,CAAJ,GACmErC,KAC3D,CADiE,IAAKyB,CAAAA,KAAL,CAA1DgF,KAA0D,CAAjD,CAAiD,EAA5CJ,KAA4C,EAAnC,EAAmC,EAAkB,CAAlB,CACjE,CAAU,IAAV,EAAAG,MAAA,EAAkBA,MAAlB,CAA2BxG,KAFnC,EAGQ,MAAOA,MAEf,IAAa,CAAb,EAAIyG,KAAJ,CACI,MAAO,KACE,EAAb,EAAIxC,KAAJ,EACIwC,KACA,EADS,CACT,CAAA7D,KAAA,CAAQ,IAAKnB,CAAAA,KAAL,CAAWgF,KAAX,CAFZ,GAKIA,KACA,EADS,CACT,EADcxC,KACd,CADsB,CACtB,EAAArB,KAAA,CAAQF,MAAO4B,CAAAA,OAAP,CAAe,IAAK7C,CAAAA,KAAL,CAAWgF,KAAX,CAAmB,CAAnB,CAAf,CAAsCpE,IAAtC,CAA4C,CAAA,CAA5C,CANZ,CAVK,CAFU,CAyBvBsE,eAAe,CAACvG,IAAD,CAAO,CAClB,GAAyB,GAAzB,EAAI,IAAKqB,CAAAA,KAAMvB,CAAAA,MAAf,CACI,MAAO,EACX,KAAI0G,WAAa,IAAKnE,CAAAA,CAAEC,CAAAA,MAAOkE,CAAAA,UAAd,CAAyB,IAAKhE,CAAAA,KAA9B,CACjB,IAAwB,CAAxB,CAAIgE,UAAW1G,CAAAA,MAAf,EAAqE,GAArE,EAAgD,IAAKuB,CAAAA,KAAMvB,CAAAA,MAA3D,CAAuG,CACnG,IAAIsC,KAAO,EACX,KAAK,IAAIb,EAAI,CAAR,CAAWkF,CAAhB,CAAmBlF,CAAnB,CAAuBiF,UAAW1G,CAAAA,MAAlC,CAA0CyB,CAA1C;AAA+C,CAA/C,CACI,CAAKkF,CAAL,CAASD,UAAA,CAAWjF,CAAX,CAAe,CAAf,CAAT,GAA+B,IAAKiB,CAAAA,KAApC,EAA6C,IAAKH,CAAAA,CAAEC,CAAAA,MAAO0D,CAAAA,SAAd,CAAwBS,CAAxB,CAA2BzG,IAA3B,CAA7C,EACIoC,IAAKT,CAAAA,IAAL,CAAU6E,UAAA,CAAWjF,CAAX,CAAV,CAAyBkF,CAAzB,CAER,IAAwB,GAAxB,CAAI,IAAKpF,CAAAA,KAAMvB,CAAAA,MAAf,CACI,IAASyB,IAAT,CAAa,CAAb,CAA8B,CAA9B,CAAgBa,IAAKtC,CAAAA,MAArB,EAAsDyB,IAAtD,CAA0DiF,UAAW1G,CAAAA,MAArE,CAA6EyB,IAA7E,EAAkF,CAAlF,CAAqF,CACjF,IAAIkF,EAAID,UAAA,CAAWjF,IAAX,CAAe,CAAf,CACHa,KAAKsE,CAAAA,IAAL,CAAU,CAACC,CAAD,CAAIpF,CAAJ,CAAA,EAAWA,CAAX,CAAe,CAAf,EAAqBoF,CAArB,EAA0BF,CAApC,CAAL,EACIrE,IAAKT,CAAAA,IAAL,CAAU6E,UAAA,CAAWjF,IAAX,CAAV,CAAyBkF,CAAzB,CAH6E,CAKzFD,UAAA,CAAapE,IAZsF,CAcnGwE,IAAAA,CAAS,EACb,KAASrF,IAAT,CAAa,CAAb,CAAgBA,IAAhB,CAAoBiF,UAAW1G,CAAAA,MAA/B,EAAyD,CAAzD,CAAyC8G,IAAO9G,CAAAA,MAAhD,CAA0EyB,IAA1E,EAA+E,CAA/E,CAAkF,CAC9E,IAAIkF,EAAID,UAAA,CAAWjF,IAAX,CAAe,CAAf,CACR,IAAIkF,CAAJ,EAAS,IAAKjE,CAAAA,KAAd,CACI,QACJ,KAAInB,MAAQ,IAAKmE,CAAAA,KAAL,EACZnE,MAAM4C,CAAAA,SAAN,CAAgB,CAAhB,CAA6B5C,KAAMzB,CAAAA,GAAnC,CAAwCyB,KAAMzB,CAAAA,GAA9C,CAAmD,CAAnD,CAAsD,CAAA,CAAtD,CACAyB,MAAMqC,CAAAA,SAAN,CAAgB+C,CAAhB,CAAmB,IAAK7G,CAAAA,GAAxB,CACAyB,MAAM4D,CAAAA,YAAN,CAAmBuB,UAAA,CAAWjF,IAAX,CAAnB,CACAF;KAAMK,CAAAA,KAAN,EAAe,GACfkF,KAAOjF,CAAAA,IAAP,CAAYN,KAAZ,CAT8E,CAWlF,MAAOuF,KA9BW,CAmCtBC,WAAW,EAAG,CACV,IAAIlD,OAAS,IAAKtB,CAAAA,CAAEC,CAAAA,MAAOyD,CAAAA,SAAd,CAAwB,IAAKvD,CAAAA,KAA7B,CAAoC,CAApC,CACb,IAAyC,CAAzC,GAAKmB,MAAL,CAAc,KAAd,EACI,MAAO,CAAA,CACN,KAAKtB,CAAAA,CAAEC,CAAAA,MAAOwE,CAAAA,WAAd,CAA0B,IAAKtE,CAAAA,KAA/B,CAAsCmB,MAAtC,CAAL,GACI,IAAKM,CAAAA,SAAL,CAAe,CAAf,CAA4B,IAAKlB,CAAAA,SAAjC,CAA4C,IAAKA,CAAAA,SAAjD,CAA4D,CAA5D,CAA+D,CAAA,CAA/D,CACA,CAAA,IAAKrB,CAAAA,KAAL,EAAc,GAFlB,CAIA,KAAKiC,CAAAA,MAAL,CAAYA,MAAZ,CACA,OAAO,CAAA,CATG,CAYdoD,QAAQ,EAAG,CACP,IAAA,CAAO,CAAC,IAAK1E,CAAAA,CAAEC,CAAAA,MAAOC,CAAAA,SAAd,CAAwB,IAAKC,CAAAA,KAA7B,CAAoC,CAApC,CAAR,EAAkE,IAAKqE,CAAAA,WAAL,EAAlE,CAAA,EACA,MAAO,KAFA,CAOP,WAAU,EAAA,CACV,GAAyB,CAAzB,EAAI,IAAKxF,CAAAA,KAAMvB,CAAAA,MAAf,CACI,MAAO,CAAA,CACX,KAAI,CAAEwC,MAAF,CAAA,CAAa,IAAKD,CAAAA,CACtB,OAAqE,MAArE,EAAOC,MAAOT,CAAAA,IAAP,CAAYS,MAAOyD,CAAAA,SAAP,CAAiB,IAAKvD,CAAAA,KAAtB,CAA6B,CAA7B,CAAZ,CAAP,EACI,CAACF,MAAOyD,CAAAA,SAAP,CAAiB,IAAKvD,CAAAA,KAAtB;AAA6B,CAA7B,CALK,CAUdwE,OAAO,EAAG,CACN,IAAKxE,CAAAA,KAAL,CAAa,IAAKnB,CAAAA,KAAL,CAAW,CAAX,CACb,KAAKA,CAAAA,KAAMvB,CAAAA,MAAX,CAAoB,CAFd,CAKV2B,SAAS,CAACD,KAAD,CAAQ,CACb,GAAI,IAAKgB,CAAAA,KAAT,EAAkBhB,KAAMgB,CAAAA,KAAxB,EAAiC,IAAKnB,CAAAA,KAAMvB,CAAAA,MAA5C,EAAsD0B,KAAMH,CAAAA,KAAMvB,CAAAA,MAAlE,CACI,MAAO,CAAA,CACX,KAAK,IAAIyB,EAAI,CAAb,CAAgBA,CAAhB,CAAoB,IAAKF,CAAAA,KAAMvB,CAAAA,MAA/B,CAAuCyB,CAAvC,EAA4C,CAA5C,CACI,GAAI,IAAKF,CAAAA,KAAL,CAAWE,CAAX,CAAJ,EAAqBC,KAAMH,CAAAA,KAAN,CAAYE,CAAZ,CAArB,CACI,MAAO,CAAA,CACf,OAAO,CAAA,CANM,CASb,UAAS,EAAA,CAAE,MAAO,KAAKc,CAAAA,CAAEC,CAAAA,MAAhB,CAGb2E,cAAc,CAACC,SAAD,CAAY,CAAE,MAAO,KAAK7E,CAAAA,CAAEC,CAAAA,MAAO6E,CAAAA,OAAQC,CAAAA,KAAtB,CAA4BF,SAA5B,CAAT,CAC1BjC,YAAY,CAAChD,IAAD,CAAO,CACX,IAAKiB,CAAAA,UAAT,EACI,IAAKmC,CAAAA,aAAL,CAAmB,IAAKnC,CAAAA,UAAWoC,CAAAA,OAAQR,CAAAA,KAAxB,CAA8B,IAAK5B,CAAAA,UAAWM,CAAAA,OAA9C,CAAuDvB,IAAvD,CAA6D,IAAKI,CAAAA,CAAE7C,CAAAA,KAApE,CAA2E,IAA3E,CAAnB,CAFW,CAInB+E,aAAa,CAACtC,IAAD,CAAO,CACZ,IAAKiB,CAAAA,UAAT;AACI,IAAKmC,CAAAA,aAAL,CAAmB,IAAKnC,CAAAA,UAAWoC,CAAAA,OAAQ3B,CAAAA,MAAxB,CAA+B,IAAKT,CAAAA,UAAWM,CAAAA,OAA/C,CAAwDvB,IAAxD,CAA8D,IAAKI,CAAAA,CAAE7C,CAAAA,KAArE,CAA4E,IAA5E,CAAnB,CAFY,CAKpB6H,WAAW,EAAG,CACV,IAAI9D,GAAK,IAAKL,CAAAA,UACd,IAAKK,EAAG+B,CAAAA,OAAQgC,CAAAA,MAAhB,CAAA,CAEA,IAAIC,KAAO,IAAKvE,CAAAA,MAAOlD,CAAAA,MAAnByH,CAA4B,CAChC,EAAW,CAAX,CAAIA,IAAJ,EAAqC,EAArC,EAAgB,IAAKvE,CAAAA,MAAL,CAAYuE,IAAZ,CAAhB,GACI,IAAKvE,CAAAA,MAAOrB,CAAAA,IAAZ,CAAiB4B,EAAGiE,CAAAA,IAApB,CAA0B,IAAKzE,CAAAA,SAA/B,CAA0C,IAAKA,CAAAA,SAA/C,CAA0D,EAA1D,CAJJ,CAFU,CAQdsC,aAAa,CAAC7B,OAAD,CAAU,CACfA,OAAJ,EAAe,IAAKN,CAAAA,UAAWM,CAAAA,OAA/B,GACQiE,OAGJ,CAHY,IAAIhE,YAAJ,CAAiB,IAAKP,CAAAA,UAAWoC,CAAAA,OAAjC,CAA0C9B,OAA1C,CAGZ,CAFIiE,OAAMD,CAAAA,IAEV,EAFkB,IAAKtE,CAAAA,UAAWsE,CAAAA,IAElC,EADI,IAAKH,CAAAA,WAAL,EACJ,CAAA,IAAKnE,CAAAA,UAAL,CAAkBuE,OAJtB,CADmB,CAvZ3B,CAgaA,KAAMhE,aAAN,CACIX,WAAW,CAACwC,OAAD;AAAU9B,OAAV,CAAmB,CAC1B,IAAK8B,CAAAA,OAAL,CAAeA,OACf,KAAK9B,CAAAA,OAAL,CAAeA,OACf,KAAKgE,CAAAA,IAAL,CAAYlC,OAAQkC,CAAAA,IAAR,CAAahE,OAAb,CAHc,CADlC,CAOA,IAAIkE,OACH,UAAS,CAACA,OAAD,CAAU,CAChBA,OAAA,CAAQA,OAAA,CAAA,KAAR,CAA2B,GAA3B,CAAA,CAAkC,OAClCA,QAAA,CAAQA,OAAA,CAAA,MAAR,CAA4B,GAA5B,CAAA,CAAmC,QACnCA,QAAA,CAAQA,OAAA,CAAA,OAAR,CAA6B,CAA7B,CAAA,CAAkC,SAClCA,QAAA,CAAQA,OAAA,CAAA,mBAAR,CAAyC,GAAzC,CAAA,CAAgD,qBAChDA,QAAA,CAAQA,OAAA,CAAA,sBAAR,CAA4C,GAA5C,CAAA,CAAmD,wBALnC,CAAnB,CAAD,CAMGA,OANH,GAMeA,OANf,CAMyB,EANzB,EASA,MAAM5B,eAAN,CACIhD,WAAW,CAACzB,KAAD,CAAQ,CACf,IAAKA,CAAAA,KAAL,CAAaA,KACb,KAAKuD,CAAAA,GAAL,CAAWvD,KAAMmB,CAAAA,KACjB,KAAKmF,CAAAA,IAAL,CAAYtG,KAAMA,CAAAA,KAClB,KAAKuG,CAAAA,MAAL,CAAc,IAAKD,CAAAA,IAAK7H,CAAAA,MAJT,CAMnB6D,MAAM,CAACC,MAAD,CAAS,CAAA,IACP3B;AAAO2B,MAAP3B,CAAgB,KAA+B2B,OAARC,GAAkB,EAChD,EAAb,EAAIA,MAAJ,EACQ,IAAK8D,CAAAA,IAGT,EAHiB,IAAKtG,CAAAA,KAAMA,CAAAA,KAG5B,GAFI,IAAKsG,CAAAA,IAET,CAFgB,IAAKA,CAAAA,IAAKlC,CAAAA,KAAV,EAEhB,EADA,IAAKkC,CAAAA,IAAKhG,CAAAA,IAAV,CAAe,IAAKiD,CAAAA,GAApB,CAAyB,CAAzB,CAA4B,CAA5B,CACA,CAAA,IAAKgD,CAAAA,MAAL,EAAe,CAJnB,EAOI,IAAKA,CAAAA,MAPT,EAOiC,CAPjC,EAOoB/D,MAPpB,CAO4B,CAP5B,CAUA,KAAKe,CAAAA,GAAL,CADW,IAAKvD,CAAAA,KAAMgB,CAAAA,CAAEC,CAAAA,MAAO4B,CAAAA,OAApB2D,CAA4B,IAAKF,CAAAA,IAAL,CAAU,IAAKC,CAAAA,MAAf,CAAwB,CAAxB,CAA5BC,CAAwD5F,IAAxD4F,CAA8D,CAAA,CAA9DA,CAXA,CAPnB,CAwBA,KAAMC,kBAAN,CACIhF,WAAW,CAACzB,KAAD,CAAQzB,GAAR,CAAaiF,KAAb,CAAoB,CAC3B,IAAKxD,CAAAA,KAAL,CAAaA,KACb,KAAKzB,CAAAA,GAAL,CAAWA,GACX,KAAKiF,CAAAA,KAAL,CAAaA,KACb,KAAK7B,CAAAA,MAAL,CAAc3B,KAAM2B,CAAAA,MACF,EAAlB,EAAI,IAAK6B,CAAAA,KAAT,EACI,IAAKkD,CAAAA,SAAL,EANuB,CAQxBC,aAAM,CAAC3G,KAAD,CAAQ,CACjB,MAAO,KAAIyG,iBAAJ,CAAsBzG,KAAtB,CAA6BA,KAAM4B,CAAAA,UAAnC,CAAgD5B,KAAM2B,CAAAA,MAAOlD,CAAAA,MAA7D,CAAqEuB,KAAM2B,CAAAA,MAAOlD,CAAAA,MAAlF,CADU,CAGrBiI,SAAS,EAAG,CACR,IAAI/H;AAAO,IAAKqB,CAAAA,KAAMF,CAAAA,MACV,KAAZ,EAAInB,IAAJ,GACI,IAAK6E,CAAAA,KAEL,CAFa,IAAKxD,CAAAA,KAAM4B,CAAAA,UAExB,CAFqCjD,IAAKiD,CAAAA,UAE1C,CADA,IAAK5B,CAAAA,KACL,CADarB,IACb,CAAA,IAAKgD,CAAAA,MAAL,CAAchD,IAAKgD,CAAAA,MAHvB,CAFQ,CAQR,MAAK,EAAA,CAAE,MAAO,KAAKA,CAAAA,MAAL,CAAY,IAAK6B,CAAAA,KAAjB,CAAyB,CAAzB,CAAT,CACL,SAAQ,EAAA,CAAE,MAAO,KAAK7B,CAAAA,MAAL,CAAY,IAAK6B,CAAAA,KAAjB,CAAyB,CAAzB,CAAT,CACR,OAAM,EAAA,CAAE,MAAO,KAAK7B,CAAAA,MAAL,CAAY,IAAK6B,CAAAA,KAAjB,CAAyB,CAAzB,CAAT,CACN,QAAO,EAAA,CAAE,MAAO,KAAK7B,CAAAA,MAAL,CAAY,IAAK6B,CAAAA,KAAjB,CAAyB,CAAzB,CAAT,CACX7E,IAAI,EAAG,CACH,IAAK6E,CAAAA,KAAL,EAAc,CACd,KAAKjF,CAAAA,GAAL,EAAY,CACM,EAAlB,EAAI,IAAKiF,CAAAA,KAAT,EACI,IAAKkD,CAAAA,SAAL,EAJD,CAMPE,IAAI,EAAG,CACH,MAAO,KAAIH,iBAAJ,CAAsB,IAAKzG,CAAAA,KAA3B,CAAkC,IAAKzB,CAAAA,GAAvC,CAA4C,IAAKiF,CAAAA,KAAjD,CADJ,CA9BX,CAoCA,KAAMqD,MAAN,CACIpF,WAAW,EAAG,CAUV,IAAK0B,CAAAA,GAAL,CAJA,IAAKzE,CAAAA,KAIL,CAPA,IAAKiC,CAAAA,KAOL,CAPa,EAHH,CAadmG,MAAM,CAACpI,KAAD;AAAQyE,GAAR,CAAa,CACf,IAAKzE,CAAAA,KAAL,CAAaA,KACb,KAAKyE,CAAAA,GAAL,CAAWA,GAFI,CAdvB,CAoBA,KAAM4D,WAAN,CACItF,WAAW,CAACjB,IAAD,CAAOwG,EAAP,CAAW,CAClB,IAAKxG,CAAAA,IAAL,CAAYA,IACZ,KAAKwG,CAAAA,EAAL,CAAUA,EAFQ,CAItBC,KAAK,CAAC9I,KAAD,CAAQ8I,KAAR,CAAejH,KAAf,CAAsB,CAAiBQ,IAAAA,KAALA,IAAKA,CAAAA,IAAAA,CAyCxCW,MAAQ,CADqC,KAClC+F,UAAY,CAAZA,EAzCwD,IAAKF,CAAAA,EAwC3B,CACVlB,QAzCyB9F,KAyCTgB,CAAAA,CAAEC,CAAAA,MAAO6E,CAAAA,OAChE,EAAA,CAAM,IAAK,IAAIvH,IA1C0C0I,KA0C9BtG,CAAAA,KAArB,CAC+B,CAD/B,GACGuG,SADH,CACe1G,IAAA,CAAKW,KAAL,CADf,EAAA,CAA8B,CAGhC,IAAIgG,OAAS3G,IAAA,CAAKW,KAAL,CAAa,CAAb,CAIb,KAAK,IAAIjB,EAAIiB,KAAJjB,CAAY,CAArB,CAAwBA,CAAxB,CAA4BiH,MAA5B,CAAoCjH,CAApC,EAAyC,CAAzC,CACI,GAAgC,CAAhC,EAAKM,IAAA,CAAKN,CAAL,CAAS,CAAT,CAAL,CAAmBgH,SAAnB,EAAmC,CAC/B,IAAItG,KAAOJ,IAAA,CAAKN,CAAL,CACX,IAAI4F,OAAQsB,CAAAA,MAAR,CAAexG,IAAf,CAAJ,GACoB,EADpB,EApD6CqG,KAqDlCvI,CAAAA,KADX,EApD6CuI,KAqDbvI,CAAAA,KADhC,EACyCkC,IADzC,EApDoDZ,KAqDGgB,CAAAA,CAAEC,CAAAA,MAAOoG,CAAAA,SAAf,CAAyBzG,IAAzB,CArDJqG,KAqDyCvI,CAAAA,KAArC,CADjD,EAC+F,CArDlDuI,KAsDnCH,CAAAA,MAAN,CAAalG,IAAb,CAAmBrC,GAAnB,CACA,MAF2F,CAHhE,CAQnCI,CAAAA;AA1D0CR,KA0D7BmJ,CAAAA,GAAN,CAAU/I,GAAA,EAAV,CAEX,KAAK,IAAIgJ,IAAM,CAAV,CAAaC,KAAOhH,IAAA,CAAKW,KAAL,CAAa,CAAb,CAAzB,CAA0CoG,GAA1C,CAAgDC,IAAhD,CAAA,CAAuD,CAC/CC,KAAAA,CAAOF,GAAPE,CAAaD,IAAbC,EAAsB,CACtBjE,KAAAA,CAAQ2D,MAAR3D,CAAiBiE,KAAjBjE,EAAwBiE,KAAxBjE,EAA+B,CAA/BA,CACJ,KAAwBnE,GAAKmB,IAAA,CAAKgD,IAAL,CAAa,CAAb,CAC7B,IAAI7E,CAAJ,CADW6B,IAAAlB,CAAKkE,IAALlE,CACX,CACIkI,IAAA,CAAOC,KADX,KAEK,IAAI9I,CAAJ,EAAYU,EAAZ,CACDkI,GAAA,CAAME,KAAN,CAAY,CADX,KAEA,CACDtG,KAAA,CAAQX,IAAA,CAAKgD,IAAL,CAAa,CAAb,CACR,UAAS,CAFR,CAR8C,CAavD,KA/BgC,CA1CT,CAL/B,CAOAuD,UAAWW,CAAAA,SAAUC,CAAAA,UAArB,CAAkCZ,UAAWW,CAAAA,SAAUE,CAAAA,QAAvD,CAAkEb,UAAWW,CAAAA,SAAUG,CAAAA,MAAvF,CAAgG,CAAA,CAGhG,MAAMC,kBAAN,CAMIrG,WAAW,CAEXwF,KAFW,CAEJc,OAAA,CAAU,EAFN,CAEU,CACjB,IAAKd,CAAAA,KAAL,CAAaA,KACb,KAAKU,CAAAA,UAAL,CAAkB,CAAC,CAACI,OAAQJ,CAAAA,UAC5B,KAAKC,CAAAA,QAAL,CAAgB,CAAC,CAACG,OAAQH,CAAAA,QAC1B,KAAKC,CAAAA,MAAL,CAAc,CAAC,CAACE,OAAQF,CAAAA,MAJP,CARzB,CA+GA,MAAMG;AAA4B,WAA5BA,EAAU,MAAO5G,OAAjB4G,EAA2C,WAAYC,CAAAA,IAAZ,CAAiB7G,MAAQ8G,CAAAA,GAAIC,CAAAA,GAA7B,CACjD,KAAIC,SAAW,IAef,MAAMC,eAAN,CACI5G,WAAW,CAAC6G,SAAD,CAAY,CACnB,IAAKA,CAAAA,SAAL,CAAiBA,SACjB,KAAKpI,CAAAA,CAAL,CAAS,CACT,KAAKqI,CAAAA,QAAL,CAAgB,IAEhB,KAAKC,CAAAA,MAAL,CADA,IAAKC,CAAAA,QACL,CADgB,EAEhB,KAAKC,CAAAA,KAAL,CAAa,EACb,KAAK/H,CAAAA,KAAL,CAAa,EACb,KAAK6C,CAAAA,KAAL,CAAa,EACb,KAAKmF,CAAAA,YAAL,EATmB,CAWvBA,YAAY,EAAG,CACX,IAAIC,GAAK,IAAKL,CAAAA,QAAVK,CAAqB,IAAK1I,CAAAA,CAAL,EAAU,IAAKoI,CAAAA,SAAU7J,CAAAA,MAAzB,CAAkC,IAAlC,CAAyC,IAAK6J,CAAAA,SAAL,CAAe,IAAKpI,CAAAA,CAAL,EAAf,CAClE,IAAI0I,EAAJ,CAAQ,CACJ,IAAKH,CAAAA,QAAL,CAAgBG,EAAGC,CAAAA,SAAH,CAAe9J,KAAA,CAAM6J,EAAG5J,CAAAA,IAAT,CAAe4J,EAAGtJ,CAAAA,IAAlB,CAAyBsJ,EAAGrC,CAAAA,MAA5B,CAAoC,CAApC,CAAf,CAAwDqC,EAAGrC,CAAAA,MAA3D,CAAoEqC,EAAGtJ,CAAAA,IAEvF,KADA,IAAKkJ,CAAAA,MACL,CADcI,EAAGE,CAAAA,OAAH,CAAa/J,KAAA,CAAM6J,EAAG5J,CAAAA,IAAT,CAAe4J,EAAGvJ,CAAAA,EAAlB,CAAuBuJ,EAAGrC,CAAAA,MAA1B;AAAkC,EAAlC,CAAb,CAAqDqC,EAAGrC,CAAAA,MAAxD,CAAiEqC,EAAGvJ,CAAAA,EAClF,CAAO,IAAKqJ,CAAAA,KAAMjK,CAAAA,MAAlB,CAAA,CACI,IAAKiK,CAAAA,KAAMzF,CAAAA,GAAX,EAEA,CADA,IAAKtC,CAAAA,KAAMsC,CAAAA,GAAX,EACA,CAAA,IAAKO,CAAAA,KAAMP,CAAAA,GAAX,EAEJ,KAAKyF,CAAAA,KAAMpI,CAAAA,IAAX,CAAgBsI,EAAG5J,CAAAA,IAAnB,CACA,KAAK2B,CAAAA,KAAML,CAAAA,IAAX,CAAgB,CAACsI,EAAGrC,CAAAA,MAApB,CACA,KAAK/C,CAAAA,KAAMlD,CAAAA,IAAX,CAAgB,CAAhB,CACA,KAAKyI,CAAAA,SAAL,CAAiB,IAAKN,CAAAA,QAXlB,CAAR,IAcI,KAAKM,CAAAA,SAAL,CAAiB,GAhBV,CAoBfC,MAAM,CAACzK,GAAD,CAAM,CACR,GAAIA,GAAJ,CAAU,IAAKwK,CAAAA,SAAf,CACI,MAAO,KACX,KAAA,CAAO,IAAKR,CAAAA,QAAZ,EAAwB,IAAKC,CAAAA,MAA7B,EAAuCjK,GAAvC,CAAA,CACI,IAAKoK,CAAAA,YAAL,EACJ,IAAI,CAAC,IAAKJ,CAAAA,QAAV,CACI,MAAO,KACX,KAAA,CAAA,CAAA,CAAS,CACL,IAAIrC,KAAO,IAAKwC,CAAAA,KAAMjK,CAAAA,MAAlByH,CAA2B,CAC/B,IAAW,CAAX,CAAIA,IAAJ,CAEI,MADA,KAAKyC,CAAAA,YAAL,EACO,CAAA,IAJN,KAMDpF,IAAM,IAAKmF,CAAAA,KAAL,CAAWxC,IAAX,CAAV,KAA4B1C,MAAQ,IAAKA,CAAAA,KAAL,CAAW0C,IAAX,CACpC,IAAI1C,KAAJ,EAAaD,GAAI0F,CAAAA,QAASxK,CAAAA,MAA1B,CAAkC,CAC9B,IAAKiK,CAAAA,KAAMzF,CAAAA,GAAX,EACA;IAAKtC,CAAAA,KAAMsC,CAAAA,GAAX,EACA,KAAKO,CAAAA,KAAMP,CAAAA,GAAX,EACA,SAJ8B,CAMlC,IAAItE,KAAO4E,GAAI0F,CAAAA,QAAJ,CAAazF,KAAb,CACP7C,IAAAA,CAAQ,IAAKA,CAAAA,KAAL,CAAWuF,IAAX,CAARvF,CAA2B4C,GAAI2F,CAAAA,SAAJ,CAAc1F,KAAd,CAC/B,IAAI7C,GAAJ,CAAYpC,GAAZ,CAEI,MADA,KAAKwK,CAAAA,SACE,CADUpI,GACV,CAAA,IAEN,IAAIA,GAAJ,EAAapC,GAAb,EAAoBoC,GAApB,CAA4BhC,IAAKF,CAAAA,MAAjC,EAA2C,IAAK+J,CAAAA,MAAhD,CACD,MAAO7H,IAAA,EAASpC,GAAT,EAAgBoC,GAAhB,EAAyB,IAAK8H,CAAAA,QAA9B,CAAyC9J,IAAzC,CAAgD,IAEvDA,KAAJ,WAAoB4C,UAAU4H,CAAAA,UAA9B,EACI,IAAK3F,CAAAA,KAAL,CAAW0C,IAAX,CAAA,EACA,CAAA,IAAK6C,CAAAA,SAAL,CAAiBpI,GAAjB,CAAyBhC,IAAKF,CAAAA,MAFlC,GAKI,IAAK+E,CAAAA,KAAL,CAAW0C,IAAX,CAAA,EACA,CAAIvF,GAAJ,CAAYhC,IAAKF,CAAAA,MAAjB,EAA2BF,GAA3B,GACI,IAAKmK,CAAAA,KAAMpI,CAAAA,IAAX,CAAgB3B,IAAhB,CAEA,CADA,IAAKgC,CAAAA,KAAML,CAAAA,IAAX,CAAgBK,GAAhB,CACA,CAAA,IAAK6C,CAAAA,KAAMlD,CAAAA,IAAX,CAAgB,CAAhB,CAHJ,CANJ,CAtBK,CAPD,CAhChB,CA4EA,KAAM8I,YAAN,QAA0BvC,MAA1B,CACIpF,WAAW,EAAG,CACV,KAAA,CAAM,GAAG4H,SAAT,CACA;IAAKC,CAAAA,QAAL,CAAgB,EAEhB,KAAKnH,CAAAA,OAAL,CADA,IAAKoH,CAAAA,IACL,CADY,CAHF,CAMdC,KAAK,CAAC7I,KAAD,CAAQ,CACT,IAAKA,CAAAA,KAAL,CAAaA,KACb,KAAKjC,CAAAA,KAAL,CAAa,IAAK4K,CAAAA,QAAlB,CAA6B,EAFpB,CAPjB,CAYA,MAAMG,WAAa,IAAI5C,KACvB,MAAM6C,WAAN,CACIjI,WAAW,CAACR,MAAD,CAAS,CAChB,IAAK0I,CAAAA,MAAL,CAAc,EACd,KAAKC,CAAAA,SAAL,CAAiBH,UACjB,KAAKI,CAAAA,OAAL,CAAe,EACf,KAAKF,CAAAA,MAAL,CAAc1I,MAAO6I,CAAAA,UAAWC,CAAAA,GAAlB,CAAsB/H,CAAA,EAAK,IAAIoH,WAA/B,CAJE,CAMpBY,UAAU,CAAChK,KAAD,CAAQ7B,KAAR,CAAe,CACrB,IAAI8L,YAAc,CAAlB,CACIC,KAAO,IAFU,KAGjB,CAAEjJ,MAAF,CAAA,CAAajB,KAAMgB,CAAAA,CAAvB,KAA0B,CAAE8I,UAAF,CAAA,CAAiB7I,MACvCsI,OAAAA,CAAOtI,MAAOyD,CAAAA,SAAP,CAAiB1E,KAAMmB,CAAAA,KAAvB,CAA8B,CAA9B,CACX,KAAIgB,QAAUnC,KAAM6B,CAAAA,UAAN,CAAmB7B,KAAM6B,CAAAA,UAAWsE,CAAAA,IAApC,CAA2C,CACzD,KAAK,IAAIjG,EAAI,CAAb,CAAgBA,CAAhB,CAAoB4J,UAAWrL,CAAAA,MAA/B,CAAuCyB,CAAA,EAAvC,CAA4C,CACxC,GAAyB,CAAzB;CAAM,CAAN,EAAWA,CAAX,CAAgBqJ,MAAhB,EACI,QAFoC,KAGpCY,UAAYL,UAAA,CAAW5J,CAAX,CAHwB,CAGT+G,MAAQ,IAAK0C,CAAAA,MAAL,CAAYzJ,CAAZ,CACvC,IAAIgK,CAAAA,IAAJ,EAAaC,SAAUvC,CAAAA,QAAvB,CAAA,CAEA,GAAIuC,SAAUxC,CAAAA,UAAd,EAA4BV,KAAMtG,CAAAA,KAAlC,EAA2CX,KAAMzB,CAAAA,GAAjD,EAAwD0I,KAAMsC,CAAAA,IAA9D,EAAsEA,MAAtE,EAA8EtC,KAAM9E,CAAAA,OAApF,EAA+FA,OAA/F,CACI,IAAKiI,CAAAA,iBAAL,CAAuBnD,KAAvB,CAA8BkD,SAA9B,CAAyCnK,KAAzC,CAAgD7B,KAAhD,CAEA,CADA8I,KAAMsC,CAAAA,IACN,CADaA,MACb,CAAAtC,KAAM9E,CAAAA,OAAN,CAAgBA,OAEpB,IAAmB,CAAnB,EAAI8E,KAAMvI,CAAAA,KAAV,CAAgC,CAC5B,IAAI2L,WAAaJ,WACI,GAArB,CAAIhD,KAAMqC,CAAAA,QAAV,GACIW,WADJ,CACkB,IAAKK,CAAAA,UAAL,CAAgBtK,KAAhB,CAAuBiH,KAAMqC,CAAAA,QAA7B,CAAuCrC,KAAM9D,CAAAA,GAA7C,CAAkD8G,WAAlD,CADlB,CAEAA,YAAA,CAAc,IAAKK,CAAAA,UAAL,CAAgBtK,KAAhB,CAAuBiH,KAAMvI,CAAAA,KAA7B,CAAoCuI,KAAM9D,CAAAA,GAA1C,CAA+C8G,WAA/C,CACd,IAAI,CAACE,SAAUtC,CAAAA,MAAf;CACIqC,IACI,CADGjD,KACH,CAAAgD,WAAA,CAAcI,UAFtB,EAGQ,KARoB,CAPhC,CAJwC,CAuB5C,IAAA,CAAO,IAAKR,CAAAA,OAAQpL,CAAAA,MAApB,CAA6BwL,WAA7B,CAAA,CACI,IAAKJ,CAAAA,OAAQ5G,CAAAA,GAAb,EACCiH,KAAL,GACIA,IAEA,CAFOT,UAEP,CADAS,IAAKvJ,CAAAA,KACL,CADaX,KAAMzB,CAAAA,GACnB,CAAIyB,KAAMzB,CAAAA,GAAV,EAAiBJ,KAAMM,CAAAA,MAAvB,CACIyL,IAAKpD,CAAAA,MAAL,CAAY9G,KAAMgB,CAAAA,CAAEC,CAAAA,MAAOsJ,CAAAA,OAA3B,CAAoCvK,KAAMzB,CAAAA,GAA1C,CADJ,CAGI2L,IAAKpD,CAAAA,MAAL,CAAY,CAAZ,CAAyB9G,KAAMzB,CAAAA,GAA/B,CAAqC,CAArC,CANR,CAQA,KAAKqL,CAAAA,SAAL,CAAiBM,IACjB,OAAO,KAAKL,CAAAA,OAxCS,CA0CzBO,iBAAiB,CAACnD,KAAD,CAAQkD,SAAR,CAAmBnK,KAAnB,CAA0B7B,KAA1B,CAAiC,CAC9C8I,KAAMuC,CAAAA,KAAN,CAAYxJ,KAAMzB,CAAAA,GAAlB,CACA4L,UAAUlD,CAAAA,KAAV,CAAgB9I,KAAhB,CAAuB8I,KAAvB,CAA8BjH,KAA9B,CACA,IAAkB,EAAlB,CAAIiH,KAAMvI,CAAAA,KAAV,CAAsB,CAClB,CAAI,CAAE,OAAAuC,SAAF,CAAJ,CAAiBjB,KAAMgB,CAAAA,CAAvB,CACA,KAAK,IAAId,EAAI,CAAb,CAAgBA,CAAhB,CAAoBe,SAAOuJ,CAAAA,WAAY/L,CAAAA,MAAvC,CAA+CyB,CAAA,EAA/C,CACI,GAAIe,SAAOuJ,CAAAA,WAAP,CAAmBtK,CAAnB,CAAJ;AAA6B+G,KAAMvI,CAAAA,KAAnC,CAA0C,CACtC,IAAI6G,OAAStE,SAAOwJ,CAAAA,YAAP,CAAoBvK,CAApB,CAAA,CAAuB/B,KAAMuM,CAAAA,IAAN,CAAWzD,KAAMtG,CAAAA,KAAjB,CAAwBsG,KAAM9D,CAAAA,GAA9B,CAAvB,CAA2DnD,KAA3D,CACb,IAAc,CAAd,EAAIuF,MAAJ,EAAmBvF,KAAMgB,CAAAA,CAAEC,CAAAA,MAAO6E,CAAAA,OAAQsB,CAAAA,MAAvB,CAA8B7B,MAA9B,EAAwC,CAAxC,CAAnB,CAA+D,CACvC,CAApB,GAAKA,MAAL,CAAc,CAAd,EACI0B,KAAMvI,CAAAA,KADV,CACkB6G,MADlB,EAC4B,CAD5B,CAGI0B,KAAMqC,CAAAA,QAHV,CAGqB/D,MAHrB,EAG+B,CAC/B,MAL2D,CAFzB,CAH5B,CAAtB,IAcSvF,MAAMzB,CAAAA,GAAV,EAAiBJ,KAAMM,CAAAA,MAAvB,CACDwI,KAAMH,CAAAA,MAAN,CAAa9G,KAAMgB,CAAAA,CAAEC,CAAAA,MAAOsJ,CAAAA,OAA5B,CAAqCvK,KAAMzB,CAAAA,GAA3C,CADC,CAID0I,KAAMH,CAAAA,MAAN,CAAa,CAAb,CAA0B9G,KAAMzB,CAAAA,GAAhC,CAAsC,CAAtC,CArB0C,CAwBlDoM,SAAS,CAACpI,MAAD,CAAS0E,KAAT,CAAgB9D,GAAhB,CAAqBK,KAArB,CAA4B,CAEjC,IAAK,IAAItD,EAAI,CAAb,CAAgBA,CAAhB,CAAoBsD,KAApB,CAA2BtD,CAA3B,EAAgC,CAAhC,CACI,GAAI,IAAK2J,CAAAA,OAAL,CAAa3J,CAAb,CAAJ,EAAuBqC,MAAvB,CACI,MAAOiB,MACf,KAAKqG,CAAAA,OAAL,CAAarG,KAAA,EAAb,CAAA,CAAwBjB,MACxB,KAAKsH,CAAAA,OAAL,CAAarG,KAAA,EAAb,CAAA,CAAwByD,KACxB,KAAK4C,CAAAA,OAAL,CAAarG,KAAA,EAAb,CAAA,CAAwBL,GACxB;MAAOK,MAR0B,CAUrC8G,UAAU,CAACtK,KAAD,CAAQiH,KAAR,CAAe9D,GAAf,CAAoBK,KAApB,CAA2B,CAAA,IAC7B,CAAErC,KAAF,CAAA,CAAYnB,KADiB,EACV,CAAE,OAAAiB,KAAF,CADU,CACGjB,KAAMgB,CAAAA,CADT,CACjC,KAA6C,CAAER,IAAF,CAAA,CAAWS,KACxD,KAAK,IAAI2J,IAAM,CAAf,CAAwB,CAAxB,CAAkBA,GAAlB,CAA2BA,GAAA,EAA3B,CACI,IAAK,IAAI1K,EAAIe,KAAOyD,CAAAA,SAAP,CAAiBvD,KAAjB,CAAwByJ,GAAA,CAAM,CAAN,CAAqB,CAA7C,CAAb,CAAA,CAA6E1K,CAA7E,EAAkF,CAAlF,CAAqF,CACjF,GAAe,KAAf,EAAIM,IAAA,CAAKN,CAAL,CAAJ,CACI,GAAmB,CAAnB,EAAIM,IAAA,CAAKN,CAAL,CAAS,CAAT,CAAJ,CACIA,CAAA,CAAIK,IAAA,CAAKC,IAAL,CAAWN,CAAX,CAAe,CAAf,CADR,KAGK,CACY,CAAb,EAAIsD,KAAJ,EAAiC,CAAjC,EAAkBhD,IAAA,CAAKN,CAAL,CAAS,CAAT,CAAlB,GACIsD,KADJ,CACY,IAAKmH,CAAAA,SAAL,CAAepK,IAAA,CAAKC,IAAL,CAAWN,CAAX,CAAe,CAAf,CAAf,CAAkC+G,KAAlC,CAAyC9D,GAAzC,CAA8CK,KAA9C,CADZ,CAEA,MAHC,CAMLhD,IAAA,CAAKN,CAAL,CAAJ,EAAe+G,KAAf,GACIzD,KADJ,CACY,IAAKmH,CAAAA,SAAL,CAAepK,IAAA,CAAKC,IAAL,CAAWN,CAAX,CAAe,CAAf,CAAf,CAAkC+G,KAAlC,CAAyC9D,GAAzC,CAA8CK,KAA9C,CADZ,CAXiF,CAezF,MAAOA,MAlB0B,CAnFzC,CAwGA,IAAIqH,GACH,UAAS,CAACA,GAAD,CAAM,CACZA,GAAA,CAAIA,GAAA,CAAA,QAAJ,CAAsB,CAAtB,CAAA,CAA2B,UAC3BA,IAAA,CAAIA,GAAA,CAAA,mBAAJ,CAAiC,CAAjC,CAAA,CAAsC,qBACtCA;GAAA,CAAIA,GAAA,CAAA,oBAAJ,CAAkC,GAAlC,CAAA,CAAyC,sBACzCA,IAAA,CAAIA,GAAA,CAAA,gBAAJ,CAA8B,EAA9B,CAAA,CAAoC,kBAJxB,CAAf,CAAD,CAKGA,GALH,GAKWA,GALX,CAKiB,EALjB,EASA,MAAMC,MAAN,CACIrJ,WAAW,CAACR,MAAD,CAAS9C,KAAT,CAAgB4M,QAAhB,CAA0B5I,OAA1B,CAAmC,CAC1C,IAAKlB,CAAAA,MAAL,CAAcA,MACd,KAAK9C,CAAAA,KAAL,CAAaA,KACb,KAAK4M,CAAAA,QAAL,CAAgBA,QAChB,KAAK5I,CAAAA,OAAL,CAAeA,OAGf,KAAK6I,CAAAA,UAAL,CADA,IAAKzM,CAAAA,GACL,CADW,CAEX,KAAK0M,CAAAA,WAAL,CAAmB,IACnB,KAAKC,CAAAA,MAAL,CAAc,IACd,KAAKC,CAAAA,OAAL,CAAe,CACf,KAAKC,CAAAA,QAAL,CAAgB,IAChB,KAAKrH,CAAAA,MAAL,CAAc,EACd,KAAK4F,CAAAA,MAAL,CAAc,IAAID,UAAJ,CAAezI,MAAf,CACd,KAAKoK,CAAAA,OAAL,CAAepK,MAAOsC,CAAAA,GAAP,CAAW,CAAX,CACf,KAAKzC,CAAAA,MAAL,CAAc,CAACU,KAAMb,CAAAA,KAAN,CAAY,IAAZ,CAAkBM,MAAOsC,CAAAA,GAAP,CAAW,CAAX,CAAlB,CAAiC,IAAKwH,CAAAA,QAAtC,CAAD,CAEd,KAAKzC,CAAAA,SAAL;AAAiB,CADbA,MACa,CADW,IAAZ,GAAAnG,OAAA,EAAgC,IAAK,EAArC,GAAoBA,OAApB,CAAyC,IAAK,EAA9C,CAAkDA,OAAQmG,CAAAA,SACzD,GAAaA,MAAU7J,CAAAA,MAAvB,CAAgC,IAAI4J,cAAJ,CAAmBC,MAAnB,CAAhC,CAAgE,IAjBvC,CAyB9CgD,OAAO,EAAG,CACN,GAAI,IAAKJ,CAAAA,MAAT,CAAiB,CACb,IAAI3F,OAAS,IAAK2F,CAAAA,MAAOI,CAAAA,OAAZ,EACb,KAAK/M,CAAAA,GAAL,CAAW,IAAK2M,CAAAA,MAAO3M,CAAAA,GACnBgH,OAAJ,GACI,IAAKgG,CAAAA,YAAL,CAAkB,IAAKzK,CAAAA,MAAL,CAAY,CAAZ,CAAlB,CAAkCyE,MAAlC,CACA,CAAA,IAAK2F,CAAAA,MAAL,CAAc,IAFlB,CAIA,OAAO,KAPM,CADX,IAUFpK,OAAS,IAAKA,CAAAA,MAAlB,KAA0BvC,IAAM,IAAKA,CAAAA,GAEjC0B,OAAAA,CAAY,IAAKa,CAAAA,MAAjBb,CAA0B,EAM9B,KAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBY,MAAOrC,CAAAA,MAA3B,CAAmCyB,CAAA,EAAnC,CAAwC,CAAA,IAChCF,MAAQc,MAAA,CAAOZ,CAAP,CAAZ,KAAuBsL,IACvB,KAAA,CAAA,CAAA,CAAS,CACL,GAAIxL,KAAMzB,CAAAA,GAAV,CAAgBA,GAAhB,CACI0B,MAAUK,CAAAA,IAAV,CAAeN,KAAf,CADJ,KAGK,IAAIwL,IAAJ,CAAW,IAAKC,CAAAA,SAAL,CAAezL,KAAf,CAAX,CACD,IAAI,CAAC0L,SAAL,EAAkBA,SAAU1L,CAAAA,KAAMK,CAAAA,KAAlC;AAA0CL,KAAMK,CAAAA,KAAhD,CACI,IAAAqL,UAAYF,IADhB,CADC,IAIA,IAAI,IAAKG,CAAAA,YAAL,CAAkB3L,KAAlB,CAAyBC,MAAzB,CAAoCa,MAApC,CAAJ,CACD,QADC,KAGA,CACD,GAAI,CAAC8K,OAAL,CAAc,CACV,IAAAA,QAAU,EACV,KAAAC,cAAgB,EAFN,CAIdD,OAAQtL,CAAAA,IAAR,CAAaN,KAAb,CACI8L,MAAAA,CAAM,IAAKnC,CAAAA,MAAOC,CAAAA,SACtBiC,cAAcvL,CAAAA,IAAd,CAAmBwL,KAAIpN,CAAAA,KAAvB,CAA8BoN,KAAI3I,CAAAA,GAAlC,CAPC,CASL,KApBK,CAF2B,CAyBxC,GAAIuI,SAAJ,CAEI,MADA,KAAKK,CAAAA,WAAL,CAAiBL,SAAjB,CACO,CAAA,IAEX,IAAI,CAACzL,MAAUxB,CAAAA,MAAf,CAAuB,CAEnB,GADIuN,MACJ,CADeJ,OACf,EAD0B/K,YAAA,CAAa+K,OAAb,CAC1B,CACI,MAAO,KAAKK,CAAAA,WAAL,CAAiBD,MAAjB,CACX,IAAI,IAAK/K,CAAAA,MAAOgF,CAAAA,MAAhB,CAGI,KAFI+B,QAEE,EAFS4D,OAET,EADFM,OAAQC,CAAAA,GAAR,CAAY,mBAAZ,CAAkC,IAAKlL,CAAAA,MAAOmL,CAAAA,OAAZ,CAAoB,IAAKzC,CAAAA,MAAOC,CAAAA,SAAUlL,CAAAA,KAA1C,CAAlC,CACE;AAAA,IAAI2N,WAAJ,CAAgB,cAAhB,CAAiC9N,GAAjC,CAAN,CAEC,IAAKyM,CAAAA,UAAV,GACI,IAAKA,CAAAA,UADT,CACsB,CADtB,CATmB,CAYvB,GAAI,IAAKA,CAAAA,UAAT,EAAuBY,OAAvB,GACQI,OADR,CACmB,IAAKM,CAAAA,WAAL,CAAiBV,OAAjB,CAA0BC,aAA1B,CAAyC5L,MAAzC,CADnB,EAGQ,MAAO,KAAKgM,CAAAA,WAAL,CAAiBD,OAAStG,CAAAA,QAAT,EAAjB,CAEf,IAAI,IAAKsF,CAAAA,UAAT,CAAqB,CACbuB,OAAAA,CAAkC,CAAnB,EAAA,IAAKvB,CAAAA,UAAL,CAAuB,CAAvB,CAA6C,CAA7C,CAA2B,IAAKA,CAAAA,UACnD,IAAI/K,MAAUxB,CAAAA,MAAd,CAAuB8N,OAAvB,CAEI,IADAtM,MAAUuM,CAAAA,IAAV,CAAe,CAACC,CAAD,CAAIC,CAAJ,CAAA,EAAUA,CAAErM,CAAAA,KAAZ,CAAoBoM,CAAEpM,CAAAA,KAArC,CACA,CAAOJ,MAAUxB,CAAAA,MAAjB,CAA0B8N,OAA1B,CAAA,CACItM,MAAUgD,CAAAA,GAAV,EAEJhD,OAAUoF,CAAAA,IAAV,CAAeD,CAAA,EAAKA,CAAE1D,CAAAA,SAAP,CAAmBnD,GAAlC,CAAJ,EACI,IAAKyM,CAAAA,UAAL,EARa,CAArB,IAUK,IAAuB,CAAvB,CAAI/K,MAAUxB,CAAAA,MAAd,CAID,CAAA,CAAO,IAASyB,OAAT,CAAa,CAAb,CAAgBA,OAAhB,CAAoBD,MAAUxB,CAAAA,MAA9B,CAAuC,CAAvC,CAA0CyB,OAAA,EAA1C,CAEH,IADIF,aACK2M;AADG1M,MAAA,CAAUC,OAAV,CACHyM,CAAAA,MAAAA,CAAIzM,OAAJyM,CAAQ,CAAjB,CAAoBA,MAApB,CAAwB1M,MAAUxB,CAAAA,MAAlC,CAA0CkO,MAAA,EAA1C,CAEI,GADIxM,SACA,CADQF,MAAA,CAAU0M,MAAV,CACR,CAAA3M,aAAMI,CAAAA,SAAN,CAAgBD,SAAhB,CAAA,EACsB,GADtB,CACAH,aAAM2B,CAAAA,MAAOlD,CAAAA,MADb,EAC8E,GAD9E,CACwD0B,SAAMwB,CAAAA,MAAOlD,CAAAA,MADzE,CAEI,GAAmF,CAAnF,EAAMuB,aAAMK,CAAAA,KAAZ,CAAoBF,SAAME,CAAAA,KAA1B,EAAqCL,aAAM2B,CAAAA,MAAOlD,CAAAA,MAAlD,CAA2D0B,SAAMwB,CAAAA,MAAOlD,CAAAA,MAAxE,EACIwB,MAAU2M,CAAAA,MAAV,CAAiBD,MAAA,EAAjB,CAAsB,CAAtB,CADJ,KAGK,CACD1M,MAAU2M,CAAAA,MAAV,CAAiB1M,OAAA,EAAjB,CAAsB,CAAtB,CACA,UAAS,CAFR,CAQrB,IAAK3B,CAAAA,GAAL,CAAW0B,MAAA,CAAU,CAAV,CAAa1B,CAAAA,GACxB,KAAS2B,OAAT,CAAa,CAAb,CAAgBA,OAAhB,CAAoBD,MAAUxB,CAAAA,MAA9B,CAAsCyB,OAAA,EAAtC,CACQD,MAAA,CAAUC,OAAV,CAAa3B,CAAAA,GAAjB,CAAuB,IAAKA,CAAAA,GAA5B,GACI,IAAKA,CAAAA,GADT,CACe0B,MAAA,CAAUC,OAAV,CAAa3B,CAAAA,GAD5B,CAEJ,OAAO,KAnGD,CAyGVoN,YAAY,CAAC3L,KAAD;AAAQc,MAAR,CAAgBqD,KAAhB,CAAuB,CAAA,IAC3BxD,MAAQX,KAAMzB,CAAAA,GADa,CACR,CAAEJ,KAAF,CAAS8C,MAAT,CAAA,CAAoB,IADZ,CAE3B6B,KAAOkF,OAAA,CAAU,IAAK6E,CAAAA,OAAL,CAAa7M,KAAb,CAAV,CAAgC,SAAhC,CAAyC,EACpD,IAAI,IAAKsI,CAAAA,SAAT,CAAoB,CAAA,IACZwE,SAAW9M,KAAM6B,CAAAA,UAAjBiL,EAA+B9M,KAAM6B,CAAAA,UAAWoC,CAAAA,OAAQgC,CAAAA,MAD5C,CACoD8G,OAASD,QAAA,CAAW9M,KAAM6B,CAAAA,UAAWsE,CAAAA,IAA5B,CAAmC,CAChH,KAAK,IAAI6G,OAAS,IAAK1E,CAAAA,SAAUU,CAAAA,MAAf,CAAsBrI,KAAtB,CAAlB,CAAgDqM,MAAhD,CAAA,CAAyD,CACrD,IAAIC,MAAQ,IAAKhM,CAAAA,MAAOiM,CAAAA,OAAQpI,CAAAA,KAApB,CAA0BkI,MAAOzN,CAAAA,IAAKyH,CAAAA,EAAtC,CAAA,EAA6CgG,MAAOzN,CAAAA,IAApD,CAA2D0B,MAAO4B,CAAAA,OAAP,CAAe7C,KAAMmB,CAAAA,KAArB,CAA4B6L,MAAOzN,CAAAA,IAAKyH,CAAAA,EAAxC,CAA3D,CAAyG,EACrH,IAAY,EAAZ,CAAIiG,KAAJ,EAAkBD,MAAOvO,CAAAA,MAAzB,GAAoC,CAACqO,QAArC,GAAkDE,MAAOG,CAAAA,WAAzD,EAAwE,CAAxE,GAA8EJ,MAA9E,EAII,MAHA/M,MAAM8D,CAAAA,OAAN,CAAckJ,MAAd,CAAsBC,KAAtB,CAGO,CAFHjF,OAEG;AADHkE,OAAQC,CAAAA,GAAR,CAAYrJ,IAAZ,CAAmB,IAAK+J,CAAAA,OAAL,CAAa7M,KAAb,CAAnB,CAAyC,kBAAkBiB,MAAOmL,CAAAA,OAAP,CAAeY,MAAOzN,CAAAA,IAAKyH,CAAAA,EAA3B,CAAlB,GAAzC,CACG,CAAA,CAAA,CAEX,IAAI,EAAEgG,MAAF,WAAoBzL,UAAU6L,CAAAA,IAA9B,CAAJ,EAAqE,CAArE,EAA2CJ,MAAO/D,CAAAA,QAASxK,CAAAA,MAA3D,EAAgG,CAAhG,CAA0EuO,MAAO9D,CAAAA,SAAP,CAAiB,CAAjB,CAA1E,CACI,KACAmE,OAAAA,CAAQL,MAAO/D,CAAAA,QAAP,CAAgB,CAAhB,CACZ,IAAI,EAAAoE,MAAA,WAAiB9L,UAAU6L,CAAAA,IAA3B,CAAJ,CAGI,KAdiD,CAFzC,CAmBhBE,QAAAA,CAAgBrM,MAAOyD,CAAAA,SAAP,CAAiB1E,KAAMmB,CAAAA,KAAvB,CAA8B,CAA9B,CACpB,IAAoB,CAApB,CAAImM,QAAJ,CAII,MAHAtN,MAAMsC,CAAAA,MAAN,CAAagL,QAAb,CAGO,CAFHtF,OAEG,EADHkE,OAAQC,CAAAA,GAAR,CAAYrJ,IAAZ,CAAmB,IAAK+J,CAAAA,OAAL,CAAa7M,KAAb,CAAnB,CAAyC,uBAAuBiB,MAAOmL,CAAAA,OAAP,CAAekB,QAAf,CAA+B,KAA/B,CAAvB,GAAzC,CACG,CAAA,CAAA,CAEPzD,SAAAA,CAAU,IAAKF,CAAAA,MAAOK,CAAAA,UAAZ,CAAuBhK,KAAvB,CAA8B7B,KAA9B,CACd,KAAS+B,MAAT;AAAa,CAAb,CAAgBA,MAAhB,CAAoB2J,QAAQpL,CAAAA,MAA5B,CAAA,CAAqC,CAC7B8D,MAAAA,CAASsH,QAAA,CAAQ3J,MAAA,EAAR,CAAcU,MAAAA,CAAOiJ,QAAA,CAAQ3J,MAAA,EAAR,CAAlC,KAAgDiD,IAAM0G,QAAA,CAAQ3J,MAAA,EAAR,CAAtD,CACIgG,KAAOhG,MAAPgG,EAAY2D,QAAQpL,CAAAA,MAApByH,EAA8B,CAAC/B,KADnC,CAEIoJ,WAAarH,IAAA,CAAOlG,KAAP,CAAeA,KAAMmE,CAAAA,KAAN,EAChCoJ,WAAW1J,CAAAA,KAAX,CAAiBtB,MAAjB,CAAyB3B,KAAzB,CAA+BuC,GAA/B,CACI6E,QAAJ,EACIkE,OAAQC,CAAAA,GAAR,CAAYrJ,IAAZ,CAAmB,IAAK+J,CAAAA,OAAL,CAAaU,UAAb,CAAnB,CAA8C,SAA8C,CAArC,GAAChL,MAAD,CAAU,KAAV,EAAyC,OAAzC,CACjD,aAAatB,MAAOmL,CAAAA,OAAP,CAAe7J,MAAf,CAAwB,KAAxB,CAAb,EADwC,QAC6BtB,MAAOmL,CAAAA,OAAP,CAAexL,KAAf,CAD7B,MACuDD,KADvD,GAC+D4M,UAAA,EAAcvN,KAAd,CAAsB,EAAtB,CAA2B,SAD1F,GAA9C,CAEJ,IAAIkG,IAAJ,CACI,MAAO,CAAA,CACFqH,WAAWhP,CAAAA,GAAf,CAAqBoC,KAArB,CACDG,MAAOR,CAAAA,IAAP,CAAYiN,UAAZ,CADC,CAGDpJ,KAAM7D,CAAAA,IAAN,CAAWiN,UAAX,CAb6B,CAerC,MAAO,CAAA,CA7CwB,CAkDnCC,YAAY,CAACxN,KAAD;AAAQC,SAAR,CAAmB,CAC3B,IAAI1B,IAAMyB,KAAMzB,CAAAA,GAChB,KAAA,CAAA,CAAA,CAAS,CACL,IAAIiN,KAAO,IAAKC,CAAAA,SAAL,CAAezL,KAAf,CACX,IAAIwL,IAAJ,CACI,MAAOA,KACX,IAAI,CAAC,IAAKG,CAAAA,YAAL,CAAkB3L,KAAlB,CAAyB,IAAzB,CAA+B,IAA/B,CAAL,CACI,MAAO,CAAA,CACX,IAAIA,KAAMzB,CAAAA,GAAV,CAAgBA,GAAhB,CAEI,MADAwB,eAAA,CAAeC,KAAf,CAAsBC,SAAtB,CACO,CAAA,CAAA,CARN,CAFkB,CAc/BqM,WAAW,CAACxL,MAAD,CAAS6I,MAAT,CAAiB1J,SAAjB,CAA4B,CAAA,IAC/B+L,SAAW,IADoB,CACdyB,UAAY,CAAA,CADE,CAE/B/B,SACJ,KAAK,IAAIxL,EAAI,CAAb,CAAgBA,CAAhB,CAAoBY,MAAOrC,CAAAA,MAA3B,CAAmCyB,CAAA,EAAnC,CAAwC,CAAA,IAChCF,MAAQc,MAAA,CAAOZ,CAAP,CADwB,CACb+G,MAAQ0C,MAAA,CAAOzJ,CAAP,EAAY,CAAZ,CADK,CACWwN,SAAW/D,MAAA,EAAQzJ,CAAR,EAAa,CAAb,EAAkB,CAAlB,CADtB,CAEhC4C,KAAOkF,OAAA,CAAU,IAAK6E,CAAAA,OAAL,CAAa7M,KAAb,CAAV,CAAgC,SAAhC,CAAyC,EACpD,IAAIA,KAAM2N,CAAAA,OAAV,CAAmB,CACf,GAAIF,SAAJ,CACI,QACJA,UAAA,CAAY,CAAA,CACZzN,MAAM2F,CAAAA,OAAN,EACIqC,QAAJ,EACIkE,OAAQC,CAAAA,GAAR,CAAYrJ,IAAZ;AAAmB,IAAK+J,CAAAA,OAAL,CAAa7M,KAAb,CAAnB,CAAyC,cAAzC,CACJ,KAAI4N,cAAO,IAAKJ,CAAAA,YAAL,CAAkBxN,KAAlB,CAAyBC,SAAzB,CACX,IAAI2N,aAAJ,CAAU,CACO,CAAA,CAAb,GAAIA,aAAJ,GACIlC,SADJ,CACgBkC,aADhB,CAEA,SAHM,CARK,CAcfhJ,aAAAA,CAAQ5E,KAAMmE,CAAAA,KAAN,EAAZ,KAA2B0J,UAAY/K,IACvC,KAAK,IAAI6J,EAAI,CAAb,CAAgB/H,aAAMY,CAAAA,WAAN,EAAhB,EAA2C,EAA3C,CAAuCmH,CAAvC,CAAsEA,CAAA,EAAtE,CAA2E,CACnE3E,OAAJ,EACIkE,OAAQC,CAAAA,GAAR,CAAY0B,SAAZ,CAAwB,IAAKhB,CAAAA,OAAL,CAAajI,aAAb,CAAxB,CAA8C,qBAA9C,CACJ,KAAIgJ,KAAO,IAAKJ,CAAAA,YAAL,CAAkB5I,aAAlB,CAAyB3E,SAAzB,CACX,IAAI2N,IAAJ,CAAU,CACO,CAAA,CAAb,GAAIA,IAAJ,GACIlC,SADJ,CACgBkC,IADhB,CAEA,MAHM,CAKN5F,OAAJ,GACI6F,SADJ,CACgB,IAAKhB,CAAAA,OAAL,CAAajI,aAAb,CADhB,CACsC,SADtC,CATuE,CAY3E,IAAK,IAAIkJ,MAAT,GAAmB9N,MAAMkF,CAAAA,eAAN,CAAsB+B,KAAtB,CAAnB,CACQe,OAEJ;AADIkE,OAAQC,CAAAA,GAAR,CAAYrJ,IAAZ,CAAmB,IAAK+J,CAAAA,OAAL,CAAaiB,MAAb,CAAnB,CAA0C,uBAA1C,CACJ,CAAA,IAAKN,CAAAA,YAAL,CAAkBM,MAAlB,CAA0B7N,SAA1B,CAEJ,IAAI,IAAK9B,CAAAA,KAAMM,CAAAA,MAAf,CAAwBuB,KAAMzB,CAAAA,GAA9B,CACQmP,QAOJ,EAPgB1N,KAAMzB,CAAAA,GAOtB,GANImP,QAAA,EACA,CAAAzG,KAAA,CAAQ,CAKZ,EAHAjH,KAAMqE,CAAAA,eAAN,CAAsB4C,KAAtB,CAA6ByG,QAA7B,CAGA,CAFI1F,OAEJ,EADIkE,OAAQC,CAAAA,GAAR,CAAYrJ,IAAZ,CAAmB,IAAK+J,CAAAA,OAAL,CAAa7M,KAAb,CAAnB,CAAyC,wBAAwB,IAAKiB,CAAAA,MAAOmL,CAAAA,OAAZ,CAAoBnF,KAApB,CAAxB,GAAzC,CACJ,CAAAlH,cAAA,CAAeC,KAAf,CAAsBC,SAAtB,CARJ,KAUK,IAAI,CAAC+L,QAAL,EAAiBA,QAAS3L,CAAAA,KAA1B,CAAkCL,KAAMK,CAAAA,KAAxC,CACD2L,QAAA,CAAWhM,KA9CqB,CAiDxC,GAAIgM,QAAJ,CACI,MAAOA,SACX,IAAIN,SAAJ,CACI,IAAK,IAAItG,CAAT,GAAc,KAAKtE,CAAAA,MAAnB,CACI,GAAIsE,CAAE/E,CAAAA,KAAN,CAAcqL,SAAU1L,CAAAA,KAAMK,CAAAA,KAA9B,CAAqC,CACjCqL,SAAA;AAAYqC,IAAAA,EACZ,MAFiC,CAIzCrC,SAAJ,EACI,IAAKK,CAAAA,WAAL,CAAiBL,SAAjB,CACJ,OAAO,KA9D4B,CAgEvCsC,WAAW,EAAG,CACV,IAAIhO,MAAQ,IAAKc,CAAAA,MAAL,CAAY,CAAZ,CAAeqD,CAAAA,KAAf,EACR,KAAK+G,CAAAA,MAAT,EACI,IAAKK,CAAAA,YAAL,CAAkBvL,KAAlB,CAAyB,IAAKkL,CAAAA,MAAO8C,CAAAA,WAAZ,EAAzB,CACJ,OAAO,KAAK/B,CAAAA,WAAL,CAAiBjM,KAAM0F,CAAAA,QAAN,EAAjB,CAJG,CAOduG,WAAW,CAACjM,KAAD,CAAQzB,GAAA,CAAMyB,KAAMzB,CAAAA,GAApB,CAAyB,CAC5B,IAAK0C,CAAAA,MAAOkB,CAAAA,OAAhB,EACInC,KAAMgG,CAAAA,WAAN,EACJ,OAAOzE,UAAU6L,CAAAA,IAAKa,CAAAA,KAAf,CAAqB,CAAEtM,OAAQ8E,iBAAkBE,CAAAA,MAAlB,CAAyB3G,KAAzB,CAAV,CACxBkN,QAAS,IAAKjM,CAAAA,MAAOiM,CAAAA,OADG,CAExBgB,MAAO,IAAK7C,CAAAA,OAFY,CAGxB8C,gBAAiB,IAAKlN,CAAAA,MAAOmN,CAAAA,YAHL,CAIxBrK,OAAQ,IAAKA,CAAAA,MAJW,CAKxBpD,MAAO,IAAKoK,CAAAA,QALY,CAMxBtM,OAAQF,GAARE,CAAc,IAAKsM,CAAAA,QANK;AAOxBsD,cAAe,IAAKpN,CAAAA,MAAO0B,CAAAA,aAPH,CAArB,CAHyB,CAYpC8I,SAAS,CAACzL,KAAD,CAAQ,CACb,IAAIsO,KAAO,IAAKrN,CAAAA,MAAOsN,CAAAA,UAAZ,CAAuBvO,KAAMmB,CAAAA,KAA7B,CACX,IAAI,CAACmN,IAAL,CACI,MAAO,KACX,KAAIE,KAAOF,IAAK5P,CAAAA,KACG,WAAnB,EAAI,MAAO8P,KAAX,GACIA,IADJ,CACWA,IAAA,CAAK,IAAKrQ,CAAAA,KAAV,CAAiB6B,KAAjB,CADX,CAEA,OAAOwO,KAAA,CAAO,CAAExO,KAAF,CAASsO,IAAT,CAAeE,IAAf,CAAP,CAA+B,IAPzB,CASjBzC,WAAW,CAACP,IAAD,CAAO,CACd,IAAI,CAAExL,KAAF,CAASsO,IAAT,CAAeE,IAAf,CAAA,CAAwBhD,IAC5B,KAAK1K,CAAAA,MAAL,CAAc,CAACd,KAAD,CACd,KAAKmL,CAAAA,OAAL,CAAe,IAAKsD,CAAAA,cAAL,CAAoBzO,KAApB,CAA2BsO,IAAKnL,CAAAA,GAAhC,CAAqCqL,IAAKE,CAAAA,SAA1C,CACf,KAAKtD,CAAAA,QAAL,CAAwC,QAAxB,EAAA,MAAOoD,KAAKG,CAAAA,QAAZ,CAAmC,IAAK1N,CAAAA,MAAOiM,CAAAA,OAAQpI,CAAAA,KAApB,CAA0B0J,IAAKG,CAAAA,QAA/B,CAAnC,CAA8EH,IAAKG,CAAAA,QAAnF,EAA+F,IAC3GH,KAAKI,CAAAA,UAAT,CACI,IAAK1D,CAAAA,MADT,CACkBsD,IAAKI,CAAAA,UAAL,CAAgB,IAAKzQ,CAAAA,KAAM0Q,CAAAA,IAAX,CAAgB,IAAK1D,CAAAA,OAArB,CAAhB;AAA+CnL,KAAMzB,CAAAA,GAArD,CAA0D,IAAK4D,CAAAA,OAA/D,CADlB,CAII,IAAKoJ,CAAAA,YAAL,CAAkBvL,KAAlB,CATU,CAYlByO,cAAc,CAACzO,KAAD,CAAQ8O,QAAR,CAAkB/M,MAAlB,CAA0B,CACpC,IAAK,IAAIxD,IAAMyB,KAAMzB,CAAAA,GAArB,CAA0BA,GAA1B,CAAgC,IAAKJ,CAAAA,KAAMM,CAAAA,MAA3C,CAAmDF,GAAA,EAAnD,CAII,GAHAkL,UAAW9I,CAAAA,KAGP,CAHepC,GAGf,CAFJkL,UAAW/K,CAAAA,KAEP,CAFe,EAEf,CADJoQ,QAAS7H,CAAAA,KAAT,CAAe,IAAK9I,CAAAA,KAApB,CAA2BsL,UAA3B,CAAuCzJ,KAAvC,CACI,CAAmB,EAAnB,CAAAyJ,UAAW/K,CAAAA,KAAX,GAA0B,CAACqD,MAA3B,EAAqCA,MAAA,CAAO,IAAK5D,CAAAA,KAAMuM,CAAAA,IAAX,CAAgBnM,GAAhB,CAAqBkL,UAAWtG,CAAAA,GAAhC,CAAP,CAArC,CAAJ,CACI,MAAO5E,IAEf,OAAO,KAAKJ,CAAAA,KAAMM,CAAAA,MARkB,CAUxC8M,YAAY,CAACvL,KAAD,CAAQhB,IAAR,CAAc,CAClB,IAAKoM,CAAAA,QAAT,CACIpM,IADJ,CACW,IAAIuC,SAAU6L,CAAAA,IAAd,CAAmB,IAAKhC,CAAAA,QAAxB,CAAkCpM,IAAA,CAAO,CAACA,IAAD,CAAP,CAAgB,EAAlD,CAAsDA,IAAA,CAAO,CAAC,CAAD,CAAP,CAAa,EAAnE,CAAuE,IAAKmM,CAAAA,OAA5E,CAAsFnL,KAAMzB,CAAAA,GAA5F,CADX,CAEUS,IAFV,GAGIA,IAHJ,CAGW,IAAIuC,SAAU6L,CAAAA,IAAd,CAAmB7L,SAAUwN,CAAAA,QAASC,CAAAA,IAAtC;AAA4C,EAA5C,CAAgD,EAAhD,CAAoD,IAAK7D,CAAAA,OAAzD,CAAmEnL,KAAMzB,CAAAA,GAAzE,CAHX,CAIA,KAAI+P,KAAO,IAAKrN,CAAAA,MAAOsN,CAAAA,UAAZ,CAAuBvO,KAAMmB,CAAAA,KAA7B,CACXnB,MAAM8D,CAAAA,OAAN,CAAc9E,IAAd,CAAoB,IAAKiC,CAAAA,MAAO4B,CAAAA,OAAZ,CAAoB7C,KAAMmB,CAAAA,KAA1B,CAAiCmN,IAAKW,CAAAA,WAAtC,CAAmD,CAAA,CAAnD,CAApB,CACIjH,QAAJ,EACIkE,OAAQC,CAAAA,GAAR,CAAY,IAAKU,CAAAA,OAAL,CAAa7M,KAAb,CAAZ,CAAkC,eAAlC,CARkB,CAU1B6M,OAAO,CAAC7M,KAAD,CAAQ,CACX,IAAIgH,GAA4CM,CAAtCc,QAAsCd,GAAzBc,QAAyBd,CAAd,IAAI4H,OAAU5H,GAAAA,GAAvC,CAA2CtH,KAA3C,CACJgH,GAAL,EACIoB,QAASwC,CAAAA,GAAT,CAAa5K,KAAb,CAAoBgH,EAApB,CAAyBmI,MAAOC,CAAAA,aAAP,CAAqB,IAAKnE,CAAAA,WAAL,EAArB,CAAzB,CACJ,OAAOjE,GAAP,CAAYhH,KAJD,CA/TnB,CAiVA,KAAMqP,QAAN,CACI5N,WAAW,CAAC6N,MAAD,CAASvJ,KAAT,CAAgBwJ,QAAhB,CAA0B,CACjC,IAAKD,CAAAA,MAAL,CAAcA,MACd,KAAKvJ,CAAAA,KAAL,CAAaA,KACb,KAAKwJ,CAAAA,QAAL,CAAgBA,QAHiB,CAKrCnI,MAAM,CAACxG,IAAD,CAAO,CAAE,MAAO,CAAC,IAAK2O,CAAAA,QAAb;AAAgD,CAAhD,EAAyB,IAAKA,CAAAA,QAAL,CAAc3O,IAAd,CAA3B,CANjB,CAQA,MAAMoG,YAAKwI,CAAAxI,EAAKwI,CAQhB,MAAMC,eAAN,CAGIhO,WAAW,CAAC+M,IAAD,CAAO,CACd,IAAK7N,CAAAA,KAAL,CAAa6N,IAAK7N,CAAAA,KAClB,KAAK8C,CAAAA,KAAL,CAAa+K,IAAK/K,CAAAA,KAAlB,EAA2BuD,WAC3B,KAAK1E,CAAAA,MAAL,CAAckM,IAAKlM,CAAAA,MAAnB,EAA6B0E,WAC7B,KAAK9C,CAAAA,KAAL,CAAasK,IAAKtK,CAAAA,KAAlB,EAA2B8C,WAC3B,KAAKb,CAAAA,IAAL,CAAYqI,IAAKrI,CAAAA,IACjB,KAAKF,CAAAA,MAAL,CAA8B,CAAA,CAA9B,GAAcuI,IAAKvI,CAAAA,MANL,CAHtB,CAcA,KAAMyJ,OAAN,CAEIjO,WAAW,CAAC+M,IAAD,CAAO,CAiBdmB,QAASA,QAAO,CAACC,MAAD,CAASC,IAAT,CAAenR,KAAf,CAAsB,CAClCoR,SAAA,CAAUF,MAAV,CAAkBtP,CAAAA,IAAlB,CAAuB,CAACuP,IAAD,CAAOA,IAAKE,CAAAA,WAAL,CAAiBZ,MAAA,CAAOzQ,KAAP,CAAjB,CAAP,CAAvB,CADkC,CAftC,IAAK0P,CAAAA,YAAL,CAAoB7M,SAAUyO,CAAAA,mBAE9B,KAAK/J,CAAAA,MAAL,CAAc,CAAA,CACd,KAAKgK,CAAAA,aAAL,CAAqB,IACrB,IAAoB,EAApB,EAAIzB,IAAK0B,CAAAA,OAAT,CACI,KAAM,KAAIC,UAAJ,CAAe,mBAAmB3B,IAAK0B,CAAAA,OAAxB,oCAAmE,EAAnE,GAAf,CAAN;AACJ,IAAIE,WAAalS,WAAA,CAAYsQ,IAAK6B,CAAAA,SAAjB,CAAjB,CACIC,UAAY9B,IAAK8B,CAAAA,SAAUnM,CAAAA,KAAf,CAAqB,GAArB,CAChB,KAAKxB,CAAAA,aAAL,CAAqB2N,SAAU7R,CAAAA,MAC/B,KAAK0D,CAAAA,OAAL,CAAeqM,IAAKrM,CAAAA,OACpB,KAAK,IAAIjC,WAAI,CAAb,CAAgBA,UAAhB,CAAoBsO,IAAK+B,CAAAA,eAAzB,CAA0CrQ,UAAA,EAA1C,CACIoQ,SAAUhQ,CAAAA,IAAV,CAAe,EAAf,CACJ,KAAIwP,UAAY,EAChB,KAAS5P,UAAT,CAAa,CAAb,CAAgBA,UAAhB,CAAoBoQ,SAAU7R,CAAAA,MAA9B,CAAsCyB,UAAA,EAAtC,CACI4P,SAAUxP,CAAAA,IAAV,CAAe,EAAf,CAIJ,IAAIkO,IAAKsB,CAAAA,SAAT,CACI,IAAK,IAAIU,QAAT,GAAqBhC,KAAKsB,CAAAA,SAA1B,CAAqC,CAC7BD,UAAAA,CAAOW,QAAA,CAAS,CAAT,CACX,KAAK,IAAItQ,EAAI,CAAb,CAAgBA,CAAhB,CAAoBsQ,QAAS/R,CAAAA,MAA7B,CAAA,CAAsC,CAClC,IAAIE,KAAO6R,QAAA,CAAStQ,CAAA,EAAT,CACX,IAAY,CAAZ,EAAIvB,IAAJ,CACIgR,OAAA,CAAQhR,IAAR,CAAckR,UAAd,CAAoBW,QAAA,CAAStQ,CAAA,EAAT,CAApB,CADJ;IAGK,CACD,IAAIxB,MAAQ8R,QAAA,CAAStQ,CAAT,CAAa,CAACvB,IAAd,CACZ,KAASgO,IAAT,CAAa,CAAChO,IAAd,CAAwB,CAAxB,CAAoBgO,IAApB,CAA2BA,IAAA,EAA3B,CACIgD,OAAA,CAAQa,QAAA,CAAStQ,CAAA,EAAT,CAAR,CAAuB2P,UAAvB,CAA6BnR,KAA7B,CACJwB,EAAA,EAJC,CAL6B,CAFL,CAezC,IAAKsK,CAAAA,WAAL,CAAmB,IAAInM,WAAJ,CAAgBmQ,IAAKhE,CAAAA,WAAL,CAAmBgE,IAAKhE,CAAAA,WAAY/L,CAAAA,MAApC,CAA6C,CAA7D,CACnB,KAAKgM,CAAAA,YAAL,CAAoB,EACpB,IAAI+D,IAAKhE,CAAAA,WAAT,CACI,IAAStK,QAAT,CAAa,CAAb,CAAgBA,QAAhB,CAAoBsO,IAAKhE,CAAAA,WAAY/L,CAAAA,MAArC,CAA6CyB,QAAA,EAA7C,CACI,IAAKsK,CAAAA,WAAL,CAAiBtK,QAAjB,CACA,CADsBsO,IAAKhE,CAAAA,WAAL,CAAiBtK,QAAjB,CAAoBU,CAAAA,IAC1C,CAAA,IAAK6J,CAAAA,YAAL,CAAkBvK,QAAlB,CAAA,CAAuBsO,IAAKhE,CAAAA,WAAL,CAAiBtK,QAAjB,CAAoBoH,CAAAA,GAEnD,KAAKmJ,CAAAA,MAAL,CAAcvS,WAAA,CAAYsQ,IAAKiC,CAAAA,MAAjB,CAAyBC,WAAzB,CACd,KAAKlQ,CAAAA,IAAL,CAAYtC,WAAA,CAAYsQ,IAAKmC,CAAAA,SAAjB,CACZ,KAAKnK,CAAAA,IAAL,CAAYtI,WAAA,CAAYsQ,IAAKhI,CAAAA,IAAjB,CACZ;IAAIoK,SAAWvP,MAAOwP,CAAAA,IAAP,CAAYrC,IAAKsC,CAAAA,QAAjB,CAA2B/G,CAAAA,GAA3B,CAA+BgH,CAAA,EAAKvC,IAAKsC,CAAAA,QAAL,CAAcC,CAAd,CAAA,CAAiB,CAAjB,CAApC,CACf,KAAK7D,CAAAA,OAAL,CAAe,IAAI3L,SAAUyP,CAAAA,OAAd,CAAsBV,SAAUvG,CAAAA,GAAV,CAAc,CAACkH,IAAD,CAAO/Q,CAAP,CAAA,EAAaqB,SAAUwN,CAAAA,QAASmC,CAAAA,MAAnB,CAA0B,CACtFD,KAAM/Q,CAAA,EAAK,IAAKyC,CAAAA,aAAV,CAA0BoL,IAAAA,EAA1B,CAAsCkD,IAD0C,CAEtFjK,GAAI9G,CAFkF,CAGtFiR,MAAOrB,SAAA,CAAU5P,CAAV,CAH+E,CAItFqD,IAA2B,EAA3BA,CAAKqN,QAAS3L,CAAAA,OAAT,CAAiB/E,CAAjB,CAJiF,CAKtFkR,MAAY,CAAZA,EAAOlR,CAL+E,CAMtFmR,QAAS7C,IAAK8C,CAAAA,YAAdD,EAA6D,EAA7DA,CAA8B7C,IAAK8C,CAAAA,YAAarM,CAAAA,OAAlB,CAA0B/E,CAA1B,CANwD,CAA1B,CAA3B,CAAtB,CAQf,KAAKqR,CAAAA,OAAL,CAAe/C,IAAK+C,CAAAA,OACpB,KAAKzH,CAAAA,UAAL,CAAkB0E,IAAK1E,CAAAA,UAAWC,CAAAA,GAAhB,CAAoBrL,KAAA,EAAyB,QAAhB,EAAA,MAAOA,MAAP,CAA2B,IAAIqI,UAAJ,CAAeqJ,UAAf,CAA2B1R,KAA3B,CAA3B,CAA+DA,KAA5F,CAClB,KAAKoS,CAAAA,QAAL,CAAgBtC,IAAKsC,CAAAA,QACrB,KAAK5F,CAAAA,MAAL,CAAkCnB,CAAnByE,IAAKtD,CAAAA,MAAcnB;AAAJ,EAAIA,EAAAA,GAApB,CAAwB,CAAC,CAACkH,IAAD,CAAOvS,KAAP,CAAcoQ,QAAd,CAAwBG,WAAxB,CAAD,CAAA,EAC3B,EAAEgC,IAAF,CAAQvS,KAAR,CAAeyE,IAAK,IAAI4D,UAAJ,CAAe7I,WAAA,CAAY4Q,QAAZ,CAAf,CAAsC,CAAtC,CAApB,CAA8DG,WAA9D,EADG,CAGd,KAAKuC,CAAAA,QAAL,CAAgBhD,IAAKgD,CAAAA,QAArB,EAAiC,EACjC,KAAKC,CAAAA,kBAAL,CAA0BjD,IAAKiD,CAAAA,kBAA/B,EAAqD,IACrD,KAAKC,CAAAA,cAAL,CAAsBlD,IAAKmD,CAAAA,SAC3B,KAAKC,CAAAA,SAAL,CAAiBpD,IAAKoD,CAAAA,SAAtB,EAAmC,IACnC,KAAKjO,CAAAA,OAAL,CAAe,IAAKuJ,CAAAA,OAAQpI,CAAAA,KAAMrG,CAAAA,MAAlC,CAA2C,CAC3C,KAAKqH,CAAAA,OAAL,CAAe,IAAK+L,CAAAA,YAAL,EACf,KAAKtO,CAAAA,GAAL,CAAW,IAAKuN,CAAAA,QAAL,CAAczP,MAAOwP,CAAAA,IAAP,CAAY,IAAKC,CAAAA,QAAjB,CAAA,CAA2B,CAA3B,CAAd,CAnEG,CAsElBgB,KAAK,CAAC3T,KAAD,CAAQ4M,QAAA,CAAW,CAAnB,CAAsB5I,OAAA,CAAU,EAAhC,CAAoC,CACjB,QAApB,EAAI,MAAOhE,MAAX,GACIA,KADJ,CACYoD,SAAUwQ,CAAAA,WAAV,CAAsB5T,KAAtB,CADZ,CAGA,KADI+D,KACJ;AADS,IAAI4I,KAAJ,CAAU,IAAV,CAAgB3M,KAAhB,CAAuB4M,QAAvB,CAAiC5I,OAAjC,CACT,CAAA,CAAA,CAEI,GADIyL,QACJ,CADW1L,KAAGoJ,CAAAA,OAAH,EACX,CACI,MAAOsC,SAPsB,CAWzCgB,UAAU,CAACzQ,KAAD,CAAQ4M,QAAA,CAAW,CAAnB,CAAsB5I,OAAA,CAAU,EAAhC,CAAoC,CACtB,QAApB,EAAI,MAAOhE,MAAX,GACIA,KADJ,CACYoD,SAAUwQ,CAAAA,WAAV,CAAsB5T,KAAtB,CADZ,CAEA,OAAO,KAAI2M,KAAJ,CAAU,IAAV,CAAgB3M,KAAhB,CAAuB4M,QAAvB,CAAiC5I,OAAjC,CAHmC,CAM9CU,OAAO,CAAC1B,KAAD,CAAQP,IAAR,CAAcoR,KAAA,CAAQ,CAAA,CAAtB,CAA6B,CAChC,IAAIC,MAAQ,IAAKzL,CAAAA,IACjB,IAAI5F,IAAJ,EAAYqR,KAAA,CAAM,CAAN,CAAZ,CACI,MAAO,EACX,KAAS1T,IAAT,CAAe0T,KAAA,CAAMrR,IAAN,CAAa,CAAb,CAAf,CAAA,CAAA,CAAkC,CAAA,IAC1BsR,SAAWD,KAAA,CAAM1T,IAAA,EAAN,CAAf,KAA6B2H,KAAOgM,QAAPhM,CAAkB,CAA/C,CACIiM,OAASF,KAAA,CAAM1T,IAAA,EAAN,CACb,IAAI2H,IAAJ,EAAY8L,KAAZ,CACI,MAAOG,OACX,KAAShP,QAAT,CAAe5E,IAAf,EAAsB2T,QAAtB,EAAkC,CAAlC,EAAsC3T,IAAtC,CAA4C4E,QAA5C,CAAiD5E,IAAA,EAAjD,CACI,GAAI0T,KAAA,CAAM1T,IAAN,CAAJ,EAAkB4C,KAAlB,CACI,MAAOgR,OACf;GAAIjM,IAAJ,CACI,MAAO,EATmB,CAJF,CAiBpCvB,SAAS,CAACxD,KAAD,CAAQiR,QAAR,CAAkB,CACvB,IAAI5R,KAAO,IAAKA,CAAAA,IAChB,KAAK,IAAIoK,IAAM,CAAf,CAAwB,CAAxB,CAAkBA,GAAlB,CAA2BA,GAAA,EAA3B,CACI,IAAK,IAAI1K,EAAI,IAAKwE,CAAAA,SAAL,CAAevD,KAAf,CAAsByJ,GAAA,CAAM,CAAN,CAAqB,CAA3C,CAAR,CAAqEjM,IAA1E,CAAA,CAAiFuB,CAAjF,EAAsF,CAAtF,CAAyF,CACrF,GAAwB,KAAxB,GAAKvB,IAAL,CAAY6B,IAAA,CAAKN,CAAL,CAAZ,EACI,GAAmB,CAAnB,EAAIM,IAAA,CAAKN,CAAL,CAAS,CAAT,CAAJ,CACIvB,IAAA,CAAO6B,IAAA,CAAKN,CAAL,CAASK,IAAA,CAAKC,IAAL,CAAWN,CAAX,CAAe,CAAf,CAAT,CADX,KAEK,CAAA,GAAmB,CAAnB,EAAIM,IAAA,CAAKN,CAAL,CAAS,CAAT,CAAJ,CACD,MAAOK,KAAA,CAAKC,IAAL,CAAWN,CAAX,CAAe,CAAf,CAEP,MAHC,CAKT,GAAIvB,IAAJ,EAAYyT,QAAZ,EAAgC,CAAhC,EAAwBzT,IAAxB,CACI,MAAO4B,KAAA,CAAKC,IAAL,CAAWN,CAAX,CAAe,CAAf,CAV0E,CAa7F,MAAO,EAhBgB,CAmB3BwE,SAAS,CAACvD,KAAD,CAAQkR,IAAR,CAAc,CACnB,MAAO,KAAK5B,CAAAA,MAAL,CAAqB,CAArB,CAAatP,KAAb,CAAqCkR,IAArC,CADY,CAIvBnR,SAAS,CAACC,KAAD,CAAQmR,IAAR,CAAc,CACnB,MAAuD,EAAvD,EAAQ,IAAK5N,CAAAA,SAAL,CAAevD,KAAf,CAAsB,CAAtB,CAAR,CAA+CmR,IAA/C,CADmB,CAIvB/D,UAAU,CAACpN,KAAD,CAAQ,CACV4E,KAAAA,CAAQ,IAAKrB,CAAAA,SAAL,CAAevD,KAAf,CAAsB,CAAtB,CACZ,OAAO4E,MAAA,CAAQ,CAAR,CAA4B,IAAKmF,CAAAA,MAAL,CAAYnF,KAAZ;AAAqB,EAArB,CAA5B,CAAuE,IAFhE,CAKlBN,WAAW,CAACtE,KAAD,CAAQoB,MAAR,CAAgB,CACvB,GAAIA,MAAJ,EAAc,IAAKmC,CAAAA,SAAL,CAAevD,KAAf,CAAsB,CAAtB,CAAd,CACI,MAAO,CAAA,CACX,KAASjB,KAAT,CAAa,IAAKwE,CAAAA,SAAL,CAAevD,KAAf,CAAsB,CAAtB,CAAb,CAAA,CAAsDjB,KAAtD,EAA2D,CAA3D,CAA8D,CAC1D,GAAoB,KAApB,EAAI,IAAKM,CAAAA,IAAL,CAAUN,KAAV,CAAJ,CACI,GAAwB,CAAxB,EAAI,IAAKM,CAAAA,IAAL,CAAUN,KAAV,CAAc,CAAd,CAAJ,CACIA,KAAA,CAAIK,IAAA,CAAK,IAAKC,CAAAA,IAAV,CAAgBN,KAAhB,CAAoB,CAApB,CADR,KAGI,OAAO,CAAA,CAEf,IAAIqC,MAAJ,EAAchC,IAAA,CAAK,IAAKC,CAAAA,IAAV,CAAgBN,KAAhB,CAAoB,CAApB,CAAd,CACI,MAAO,CAAA,CAR+C,CAHvC,CAgB3BiF,UAAU,CAAChE,KAAD,CAAQ,CACd,IAAIoE,OAAS,EACb,KAASrF,KAAT,CAAa,IAAKwE,CAAAA,SAAL,CAAevD,KAAf,CAAsB,CAAtB,CAAb,CAAA,CAAsDjB,KAAtD,EAA2D,CAA3D,CAA8D,CAC1D,GAAoB,KAApB,EAAI,IAAKM,CAAAA,IAAL,CAAUN,KAAV,CAAJ,CACI,GAAwB,CAAxB,EAAI,IAAKM,CAAAA,IAAL,CAAUN,KAAV,CAAc,CAAd,CAAJ,CACIA,KAAA,CAAIK,IAAA,CAAK,IAAKC,CAAAA,IAAV,CAAgBN,KAAhB,CAAoB,CAApB,CADR,KAGI,MAER,IAA2D,CAA3D,GAAK,IAAKM,CAAAA,IAAL,CAAUN,KAAV,CAAc,CAAd,CAAL,CAAyB,CAAzB,EAA8D,CAC1D,IAAIxB,MAAQ,IAAK8B,CAAAA,IAAL,CAAUN,KAAV,CAAc,CAAd,CACPqF,OAAOF,CAAAA,IAAP,CAAY,CAACC,CAAD;AAAIpF,CAAJ,CAAA,EAAWA,CAAX,CAAe,CAAf,EAAqBoF,CAArB,EAA0B5G,KAAtC,CAAL,EACI6G,MAAOjF,CAAAA,IAAP,CAAY,IAAKE,CAAAA,IAAL,CAAUN,KAAV,CAAZ,CAA0BxB,KAA1B,CAHsD,CAPJ,CAa9D,MAAO6G,OAfO,CAkBlB8B,SAAS,CAACJ,KAAD,CAAQsL,IAAR,CAAc,CACfC,IAAAA,CAAQ9R,UAAA,CAAW,IAAKF,CAAAA,IAAhB,CAAsB,IAAKkR,CAAAA,cAA3B,CAA2Ca,IAA3C,CACZ,OAAe,EAAf,CAAOC,IAAP,EAAoB9R,UAAA,CAAW,IAAKF,CAAAA,IAAhB,CAAsB,IAAKkR,CAAAA,cAA3B,CAA2CzK,KAA3C,CAApB,CAAwEuL,IAFrD,CAOvBC,SAAS,CAACC,MAAD,CAAS,CAGd,IAAIC,KAAOtR,MAAOuR,CAAAA,MAAP,CAAcvR,MAAOsF,CAAAA,MAAP,CAAc+I,MAAOhI,CAAAA,SAArB,CAAd,CAA+C,IAA/C,CACPgL,OAAOvB,CAAAA,KAAX,GACIwB,IAAKzF,CAAAA,OADT,CACmB,IAAKA,CAAAA,OAAQrF,CAAAA,MAAb,CAAoB,GAAG6K,MAAOvB,CAAAA,KAA9B,CADnB,CAEA,IAAIuB,MAAOnP,CAAAA,GAAX,CAAgB,CACZ,IAAI+K,KAAO,IAAKwC,CAAAA,QAAL,CAAc4B,MAAOnP,CAAAA,GAArB,CACX,IAAI,CAAC+K,IAAL,CACI,KAAM,KAAI6B,UAAJ,CAAe,yBAAyBuC,MAAOnP,CAAAA,GAAhC,EAAf,CAAN,CACJoP,IAAKpP,CAAAA,GAAL,CAAW+K,IAJC,CAMZoE,MAAO5I,CAAAA,UAAX;CACI6I,IAAK7I,CAAAA,UADT,CACsB,IAAKA,CAAAA,UAAWC,CAAAA,GAAhB,CAAoB8I,CAAA,EAAK,CACvC,IAAIC,MAAQJ,MAAO5I,CAAAA,UAAWiJ,CAAAA,IAAlB,CAAuBhC,CAAA,EAAKA,CAAEzR,CAAAA,IAAP,EAAeuT,CAAtC,CACZ,OAAOC,MAAA,CAAQA,KAAMzT,CAAAA,EAAd,CAAmBwT,CAFa,CAAzB,CADtB,CAKIH,OAAO5M,CAAAA,OAAX,GACI6M,IAAK7M,CAAAA,OADT,CACmB,IAAK+L,CAAAA,YAAL,CAAkBa,MAAO5M,CAAAA,OAAzB,CADnB,CAEI4M,OAAOxH,CAAAA,MAAX,GACIyH,IAAKzH,CAAAA,MADT,CACkB,IAAKA,CAAAA,MAAOnB,CAAAA,GAAZ,CAAgBiJ,GAAA,EACrB3R,MAAOqG,CAAAA,SAAUuL,CAAAA,cAAeC,CAAAA,IAAhC,CAAqCR,MAAOxH,CAAAA,MAA5C,CAAoD8H,GAAI/B,CAAAA,IAAxD,CAAL,CAEO,CAAEA,KAAM+B,GAAI/B,CAAAA,IAAZ,CAAkBvS,MAAOgU,MAAOxH,CAAAA,MAAP,CAAc8H,GAAI/B,CAAAA,IAAlB,CAAzB,CAAkD9N,IAAK6P,GAAI7P,CAAAA,GAA3D,CAAgE8L,YAAa+D,GAAI/D,CAAAA,WAAjF,CAFP,CACW+D,GAFD,CADlB,CAMqB,KAArB,EAAIN,MAAOzM,CAAAA,MAAX,GACI0M,IAAK1M,CAAAA,MADT,CACkByM,MAAOzM,CAAAA,MADzB,CAE2B,KAA3B,EAAIyM,MAAOtE,CAAAA,YAAX,GACIuE,IAAKvE,CAAAA,YADT,CACwBsE,MAAOtE,CAAAA,YAD/B,CAEA,OAAOuE,KA7BO,CAmClBvG,OAAO,CAACxL,IAAD,CAAO,CACV,MAAO,KAAKgR,CAAAA,SAAL;AAAiB,IAAKA,CAAAA,SAAL,CAAehR,IAAf,CAAjB,CAAwCuO,MAAA,CAAOvO,IAAP,EAAe,IAAK+C,CAAAA,OAApB,EAA+B,IAAKuJ,CAAAA,OAAQpI,CAAAA,KAAb,CAAmBlE,IAAnB,CAAyBqQ,CAAAA,IAAxD,EAAgErQ,IAAhE,CADrC,CAKV,WAAU,EAAA,CAAE,MAAO,KAAK+C,CAAAA,OAAZ,CAAsB,CAAxB,CAEV,aAAY,EAAA,CAAE,MAA4B,EAA5B,CAAO,IAAKuH,CAAAA,MAAOzM,CAAAA,MAArB,CAEZ,WAAU,EAAA,CAAE,MAAO,KAAKyO,CAAAA,OAAQpI,CAAAA,KAAb,CAAmB,IAAKvB,CAAAA,GAAL,CAAS,CAAT,CAAnB,CAAT,CAEdb,iBAAiB,CAAC9B,IAAD,CAAO,CACpB,IAAIuS,KAAO,IAAK1B,CAAAA,kBAChB,OAAe,KAAR,EAAA0B,IAAA,CAAe,CAAf,CAAmBA,IAAA,CAAKvS,IAAL,CAAnB,EAAiC,CAFpB,CAKxBiR,YAAY,CAAC/L,OAAD,CAAU,CAClB,GAAI,IAAKmK,CAAAA,aAAT,EAA0B,IAAKA,CAAAA,aAAcX,CAAAA,MAA7C,EAAuDxJ,OAAvD,CACI,MAAO,KAAKmK,CAAAA,aAFE,KAGdmD,OAAS/R,MAAOwP,CAAAA,IAAP,CAAY,IAAKW,CAAAA,QAAjB,CAHK,CAGuBzL,MAAQqN,MAAOrJ,CAAAA,GAAP,CAAW,EAAA,EAAM,CAAA,CAAjB,CACjD,IAAIjE,OAAJ,CACI,IAAK,IAAIuN,IAAT,GAAiBvN,QAAQ3B,CAAAA,KAAR,CAAc,GAAd,CAAjB,CAAqC,CACjC,IAAI6C;AAAKoM,MAAOnO,CAAAA,OAAP,CAAeoO,IAAf,CACC,EAAV,EAAIrM,WAAJ,GACIjB,KAAA,CAAMiB,WAAN,CADJ,CACgB,CAAA,CADhB,CAFiC,CAKrCuI,IAAAA,CAAW,IACf,KAASrP,WAAT,CAAa,CAAb,CAAgBA,WAAhB,CAAoBkT,MAAO3U,CAAAA,MAA3B,CAAmCyB,WAAA,EAAnC,CACI,GAAI,CAAC6F,KAAA,CAAM7F,WAAN,CAAL,CACI,IAAK,IAAIyM,EAAI,IAAK6E,CAAAA,QAAL,CAAc4B,MAAA,CAAOlT,WAAP,CAAd,CAAR,CAAkC8G,EAAvC,CAAoE,KAApE,GAA4CA,EAA5C,CAAiD,IAAKxG,CAAAA,IAAL,CAAUmM,CAAA,EAAV,CAAjD,EAAA,CACI,CAAC4C,IAAD,GAAcA,IAAd,CAAyB,IAAI+D,UAAJ,CAAe,IAAK/B,CAAAA,OAApB,CAA8B,CAA9B,CAAzB,GAA4DvK,EAA5D,CAAA,CAAkE,CAE9E,OAAO,KAAKiJ,CAAAA,aAAZ,CAA4B,IAAIZ,OAAJ,CAAYvJ,OAAZ,CAAqBC,KAArB,CAA4BwJ,IAA5B,CAhBV,CAmBfQ,kBAAW,CAACvB,IAAD,CAAO,CACrB,MAAO,KAAIkB,MAAJ,CAAWlB,IAAX,CADc,CAzP7B,CA+QAvQ,OAAQsV,CAAAA,QAAR,CAAmBhS,SAAUgS,CAAAA,QAC7BtV,QAAQ+S,CAAAA,OAAR,CAAkBzP,SAAUyP,CAAAA,OAC5B/S,QAAQ8Q,CAAAA,QAAR,CAAmBxN,SAAUwN,CAAAA,QAC7B9Q,QAAQmP,CAAAA,IAAR;AAAe7L,SAAU6L,CAAAA,IACzBnP,QAAQuV,CAAAA,UAAR,CAAqBjS,SAAUiS,CAAAA,UAC/BvV,QAAQwR,CAAAA,cAAR,CAAyBA,cACzBxR,QAAQ6J,CAAAA,iBAAR,CAA4BA,iBAC5B7J,QAAQyR,CAAAA,MAAR,CAAiBA,MACjBzR,QAAQuD,CAAAA,KAAR,CAAgBA,KAChBvD,QAAQ4I,CAAAA,KAAR,CAAgBA,KAx+CqF;",
"sources":["node_modules/lezer/dist/index.cjs"],
"sourcesContent":["shadow$provide[\"module$node_modules$lezer$dist$index_cjs\"] = function(global,require,module,exports) {\nvar process = require('process');\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar lezerTree = require('lezer-tree');\n\n/// A parse stack. These are used internally by the parser to track\n/// parsing progress. They also provide some properties and methods\n/// that external code such as a tokenizer can use to get information\n/// about the parse state.\nclass Stack {\n    /// @internal\n    constructor(\n    /// A the parse that this stack is part of @internal\n    p, \n    /// Holds state, pos, value stack pos (15 bits array index, 15 bits\n    /// buffer index) triplets for all but the top state\n    /// @internal\n    stack, \n    /// The current parse state @internal\n    state, \n    // The position at which the next reduce should take place. This\n    // can be less than `this.pos` when skipped expressions have been\n    // added to the stack (which should be moved outside of the next\n    // reduction)\n    /// @internal\n    reducePos, \n    /// The input position up to which this stack has parsed.\n    pos, \n    /// The dynamic score of the stack, including dynamic precedence\n    /// and error-recovery penalties\n    /// @internal\n    score, \n    // The output buffer. Holds (type, start, end, size) quads\n    // representing nodes created by the parser, where `size` is\n    // amount of buffer array entries covered by this node.\n    /// @internal\n    buffer, \n    // The base offset of the buffer. When stacks are split, the split\n    // instance shared the buffer history with its parent up to\n    // `bufferBase`, which is the absolute offset (including the\n    // offset of previous splits) into the buffer at which this stack\n    // starts writing.\n    /// @internal\n    bufferBase, \n    /// @internal\n    curContext, \n    // A parent stack from which this was split off, if any. This is\n    // set up so that it always points to a stack that has some\n    // additional buffer content, never to a stack with an equal\n    // `bufferBase`.\n    /// @internal\n    parent) {\n        this.p = p;\n        this.stack = stack;\n        this.state = state;\n        this.reducePos = reducePos;\n        this.pos = pos;\n        this.score = score;\n        this.buffer = buffer;\n        this.bufferBase = bufferBase;\n        this.curContext = curContext;\n        this.parent = parent;\n    }\n    /// @internal\n    toString() {\n        return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`;\n    }\n    // Start an empty stack\n    /// @internal\n    static start(p, state, pos = 0) {\n        let cx = p.parser.context;\n        return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, null);\n    }\n    /// The stack's current [context](#lezer.ContextTracker) value, if\n    /// any. Its type will depend on the context tracker's type\n    /// parameter, or it will be `null` if there is no context\n    /// tracker.\n    get context() { return this.curContext ? this.curContext.context : null; }\n    // Push a state onto the stack, tracking its start position as well\n    // as the buffer base at that point.\n    /// @internal\n    pushState(state, start) {\n        this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\n        this.state = state;\n    }\n    // Apply a reduce action\n    /// @internal\n    reduce(action) {\n        let depth = action >> 19 /* ReduceDepthShift */, type = action & 65535 /* ValueMask */;\n        let { parser } = this.p;\n        let dPrec = parser.dynamicPrecedence(type);\n        if (dPrec)\n            this.score += dPrec;\n        if (depth == 0) {\n            // Zero-depth reductions are a special case\u2014they add stuff to\n            // the stack without popping anything off.\n            if (type < parser.minRepeatTerm)\n                this.storeNode(type, this.reducePos, this.reducePos, 4, true);\n            this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\n            this.reduceContext(type);\n            return;\n        }\n        // Find the base index into `this.stack`, content after which will\n        // be dropped. Note that with `StayFlag` reductions we need to\n        // consume two extra frames (the dummy parent node for the skipped\n        // expression and the state that we'll be staying in, which should\n        // be moved to `this.state`).\n        let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* StayFlag */ ? 6 : 0);\n        let start = this.stack[base - 2];\n        let bufferBase = this.stack[base - 1], count = this.bufferBase + this.buffer.length - bufferBase;\n        // Store normal terms or `R -> R R` repeat reductions\n        if (type < parser.minRepeatTerm || (action & 131072 /* RepeatFlag */)) {\n            let pos = parser.stateFlag(this.state, 1 /* Skipped */) ? this.pos : this.reducePos;\n            this.storeNode(type, start, pos, count + 4, true);\n        }\n        if (action & 262144 /* StayFlag */) {\n            this.state = this.stack[base];\n        }\n        else {\n            let baseStateID = this.stack[base - 3];\n            this.state = parser.getGoto(baseStateID, type, true);\n        }\n        while (this.stack.length > base)\n            this.stack.pop();\n        this.reduceContext(type);\n    }\n    // Shift a value into the buffer\n    /// @internal\n    storeNode(term, start, end, size = 4, isReduce = false) {\n        if (term == 0 /* Err */) { // Try to omit/merge adjacent error nodes\n            let cur = this, top = this.buffer.length;\n            if (top == 0 && cur.parent) {\n                top = cur.bufferBase - cur.parent.bufferBase;\n                cur = cur.parent;\n            }\n            if (top > 0 && cur.buffer[top - 4] == 0 /* Err */ && cur.buffer[top - 1] > -1) {\n                if (start == end)\n                    return;\n                if (cur.buffer[top - 2] >= start) {\n                    cur.buffer[top - 2] = end;\n                    return;\n                }\n            }\n        }\n        if (!isReduce || this.pos == end) { // Simple case, just append\n            this.buffer.push(term, start, end, size);\n        }\n        else { // There may be skipped nodes that have to be moved forward\n            let index = this.buffer.length;\n            if (index > 0 && this.buffer[index - 4] != 0 /* Err */)\n                while (index > 0 && this.buffer[index - 2] > end) {\n                    // Move this record forward\n                    this.buffer[index] = this.buffer[index - 4];\n                    this.buffer[index + 1] = this.buffer[index - 3];\n                    this.buffer[index + 2] = this.buffer[index - 2];\n                    this.buffer[index + 3] = this.buffer[index - 1];\n                    index -= 4;\n                    if (size > 4)\n                        size -= 4;\n                }\n            this.buffer[index] = term;\n            this.buffer[index + 1] = start;\n            this.buffer[index + 2] = end;\n            this.buffer[index + 3] = size;\n        }\n    }\n    // Apply a shift action\n    /// @internal\n    shift(action, next, nextEnd) {\n        if (action & 131072 /* GotoFlag */) {\n            this.pushState(action & 65535 /* ValueMask */, this.pos);\n        }\n        else if ((action & 262144 /* StayFlag */) == 0) { // Regular shift\n            let start = this.pos, nextState = action, { parser } = this.p;\n            if (nextEnd > this.pos || next <= parser.maxNode) {\n                this.pos = nextEnd;\n                if (!parser.stateFlag(nextState, 1 /* Skipped */))\n                    this.reducePos = nextEnd;\n            }\n            this.pushState(nextState, start);\n            if (next <= parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n            this.shiftContext(next);\n        }\n        else { // Shift-and-stay, which means this is a skipped token\n            if (next <= this.p.parser.maxNode)\n                this.buffer.push(next, this.pos, nextEnd, 4);\n            this.pos = nextEnd;\n        }\n    }\n    // Apply an action\n    /// @internal\n    apply(action, next, nextEnd) {\n        if (action & 65536 /* ReduceFlag */)\n            this.reduce(action);\n        else\n            this.shift(action, next, nextEnd);\n    }\n    // Add a prebuilt node into the buffer. This may be a reused node or\n    // the result of running a nested parser.\n    /// @internal\n    useNode(value, next) {\n        let index = this.p.reused.length - 1;\n        if (index < 0 || this.p.reused[index] != value) {\n            this.p.reused.push(value);\n            index++;\n        }\n        let start = this.pos;\n        this.reducePos = this.pos = start + value.length;\n        this.pushState(next, start);\n        this.buffer.push(index, start, this.reducePos, -1 /* size < 0 means this is a reused value */);\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this.p.input, this));\n    }\n    // Split the stack. Due to the buffer sharing and the fact\n    // that `this.stack` tends to stay quite shallow, this isn't very\n    // expensive.\n    /// @internal\n    split() {\n        let parent = this;\n        let off = parent.buffer.length;\n        // Because the top of the buffer (after this.pos) may be mutated\n        // to reorder reductions and skipped tokens, and shared buffers\n        // should be immutable, this copies any outstanding skipped tokens\n        // to the new buffer, and puts the base pointer before them.\n        while (off > 0 && parent.buffer[off - 2] > parent.reducePos)\n            off -= 4;\n        let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;\n        // Make sure parent points to an actual parent with content, if there is such a parent.\n        while (parent && base == parent.bufferBase)\n            parent = parent.parent;\n        return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, parent);\n    }\n    // Try to recover from an error by 'deleting' (ignoring) one token.\n    /// @internal\n    recoverByDelete(next, nextEnd) {\n        let isNode = next <= this.p.parser.maxNode;\n        if (isNode)\n            this.storeNode(next, this.pos, nextEnd);\n        this.storeNode(0 /* Err */, this.pos, nextEnd, isNode ? 8 : 4);\n        this.pos = this.reducePos = nextEnd;\n        this.score -= 200 /* Token */;\n    }\n    /// Check if the given term would be able to be shifted (optionally\n    /// after some reductions) on this stack. This can be useful for\n    /// external tokenizers that want to make sure they only provide a\n    /// given token when it applies.\n    canShift(term) {\n        for (let sim = new SimulatedStack(this);;) {\n            let action = this.p.parser.stateSlot(sim.top, 4 /* DefaultReduce */) || this.p.parser.hasAction(sim.top, term);\n            if ((action & 65536 /* ReduceFlag */) == 0)\n                return true;\n            if (action == 0)\n                return false;\n            sim.reduce(action);\n        }\n    }\n    /// Find the start position of the rule that is currently being parsed.\n    get ruleStart() {\n        for (let state = this.state, base = this.stack.length;;) {\n            let force = this.p.parser.stateSlot(state, 5 /* ForcedReduce */);\n            if (!(force & 65536 /* ReduceFlag */))\n                return 0;\n            base -= 3 * (force >> 19 /* ReduceDepthShift */);\n            if ((force & 65535 /* ValueMask */) < this.p.parser.minRepeatTerm)\n                return this.stack[base + 1];\n            state = this.stack[base];\n        }\n    }\n    /// Find the start position of an instance of any of the given term\n    /// types, or return `null` when none of them are found.\n    ///\n    /// **Note:** this is only reliable when there is at least some\n    /// state that unambiguously matches the given rule on the stack.\n    /// I.e. if you have a grammar like this, where the difference\n    /// between `a` and `b` is only apparent at the third token:\n    ///\n    ///     a { b | c }\n    ///     b { \"x\" \"y\" \"x\" }\n    ///     c { \"x\" \"y\" \"z\" }\n    ///\n    /// Then a parse state after `\"x\"` will not reliably tell you that\n    /// `b` is on the stack. You _can_ pass `[b, c]` to reliably check\n    /// for either of those two rules (assuming that `a` isn't part of\n    /// some rule that includes other things starting with `\"x\"`).\n    ///\n    /// When `before` is given, this keeps scanning up the stack until\n    /// it finds a match that starts before that position.\n    ///\n    /// Note that you have to be careful when using this in tokenizers,\n    /// since it's relatively easy to introduce data dependencies that\n    /// break incremental parsing by using this method.\n    startOf(types, before) {\n        let state = this.state, frame = this.stack.length, { parser } = this.p;\n        for (;;) {\n            let force = parser.stateSlot(state, 5 /* ForcedReduce */);\n            let depth = force >> 19 /* ReduceDepthShift */, term = force & 65535 /* ValueMask */;\n            if (types.indexOf(term) > -1) {\n                let base = frame - (3 * (force >> 19 /* ReduceDepthShift */)), pos = this.stack[base + 1];\n                if (before == null || before > pos)\n                    return pos;\n            }\n            if (frame == 0)\n                return null;\n            if (depth == 0) {\n                frame -= 3;\n                state = this.stack[frame];\n            }\n            else {\n                frame -= 3 * (depth - 1);\n                state = parser.getGoto(this.stack[frame - 3], term, true);\n            }\n        }\n    }\n    // Apply up to Recover.MaxNext recovery actions that conceptually\n    // inserts some missing token or rule.\n    /// @internal\n    recoverByInsert(next) {\n        if (this.stack.length >= 300 /* MaxInsertStackDepth */)\n            return [];\n        let nextStates = this.p.parser.nextStates(this.state);\n        if (nextStates.length > 4 /* MaxNext */ << 1 || this.stack.length >= 120 /* DampenInsertStackDepth */) {\n            let best = [];\n            for (let i = 0, s; i < nextStates.length; i += 2) {\n                if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))\n                    best.push(nextStates[i], s);\n            }\n            if (this.stack.length < 120 /* DampenInsertStackDepth */)\n                for (let i = 0; best.length < 4 /* MaxNext */ << 1 && i < nextStates.length; i += 2) {\n                    let s = nextStates[i + 1];\n                    if (!best.some((v, i) => (i & 1) && v == s))\n                        best.push(nextStates[i], s);\n                }\n            nextStates = best;\n        }\n        let result = [];\n        for (let i = 0; i < nextStates.length && result.length < 4 /* MaxNext */; i += 2) {\n            let s = nextStates[i + 1];\n            if (s == this.state)\n                continue;\n            let stack = this.split();\n            stack.storeNode(0 /* Err */, stack.pos, stack.pos, 4, true);\n            stack.pushState(s, this.pos);\n            stack.shiftContext(nextStates[i]);\n            stack.score -= 200 /* Token */;\n            result.push(stack);\n        }\n        return result;\n    }\n    // Force a reduce, if possible. Return false if that can't\n    // be done.\n    /// @internal\n    forceReduce() {\n        let reduce = this.p.parser.stateSlot(this.state, 5 /* ForcedReduce */);\n        if ((reduce & 65536 /* ReduceFlag */) == 0)\n            return false;\n        if (!this.p.parser.validAction(this.state, reduce)) {\n            this.storeNode(0 /* Err */, this.reducePos, this.reducePos, 4, true);\n            this.score -= 100 /* Reduce */;\n        }\n        this.reduce(reduce);\n        return true;\n    }\n    /// @internal\n    forceAll() {\n        while (!this.p.parser.stateFlag(this.state, 2 /* Accepting */) && this.forceReduce()) { }\n        return this;\n    }\n    /// Check whether this state has no further actions (assumed to be a direct descendant of the\n    /// top state, since any other states must be able to continue\n    /// somehow). @internal\n    get deadEnd() {\n        if (this.stack.length != 3)\n            return false;\n        let { parser } = this.p;\n        return parser.data[parser.stateSlot(this.state, 1 /* Actions */)] == 65535 /* End */ &&\n            !parser.stateSlot(this.state, 4 /* DefaultReduce */);\n    }\n    /// Restart the stack (put it back in its start state). Only safe\n    /// when this.stack.length == 3 (state is directly below the top\n    /// state). @internal\n    restart() {\n        this.state = this.stack[0];\n        this.stack.length = 0;\n    }\n    /// @internal\n    sameState(other) {\n        if (this.state != other.state || this.stack.length != other.stack.length)\n            return false;\n        for (let i = 0; i < this.stack.length; i += 3)\n            if (this.stack[i] != other.stack[i])\n                return false;\n        return true;\n    }\n    /// Get the parser used by this stack.\n    get parser() { return this.p.parser; }\n    /// Test whether a given dialect (by numeric ID, as exported from\n    /// the terms file) is enabled.\n    dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }\n    shiftContext(term) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this.p.input, this));\n    }\n    reduceContext(term) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this.p.input, this));\n    }\n    /// @internal\n    emitContext() {\n        let cx = this.curContext;\n        if (!cx.tracker.strict)\n            return;\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -2)\n            this.buffer.push(cx.hash, this.reducePos, this.reducePos, -2);\n    }\n    updateContext(context) {\n        if (context != this.curContext.context) {\n            let newCx = new StackContext(this.curContext.tracker, context);\n            if (newCx.hash != this.curContext.hash)\n                this.emitContext();\n            this.curContext = newCx;\n        }\n    }\n}\nclass StackContext {\n    constructor(tracker, context) {\n        this.tracker = tracker;\n        this.context = context;\n        this.hash = tracker.hash(context);\n    }\n}\nvar Recover;\n(function (Recover) {\n    Recover[Recover[\"Token\"] = 200] = \"Token\";\n    Recover[Recover[\"Reduce\"] = 100] = \"Reduce\";\n    Recover[Recover[\"MaxNext\"] = 4] = \"MaxNext\";\n    Recover[Recover[\"MaxInsertStackDepth\"] = 300] = \"MaxInsertStackDepth\";\n    Recover[Recover[\"DampenInsertStackDepth\"] = 120] = \"DampenInsertStackDepth\";\n})(Recover || (Recover = {}));\n// Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\nclass SimulatedStack {\n    constructor(stack) {\n        this.stack = stack;\n        this.top = stack.state;\n        this.rest = stack.stack;\n        this.offset = this.rest.length;\n    }\n    reduce(action) {\n        let term = action & 65535 /* ValueMask */, depth = action >> 19 /* ReduceDepthShift */;\n        if (depth == 0) {\n            if (this.rest == this.stack.stack)\n                this.rest = this.rest.slice();\n            this.rest.push(this.top, 0, 0);\n            this.offset += 3;\n        }\n        else {\n            this.offset -= (depth - 1) * 3;\n        }\n        let goto = this.stack.p.parser.getGoto(this.rest[this.offset - 3], term, true);\n        this.top = goto;\n    }\n}\n// This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\nclass StackBufferCursor {\n    constructor(stack, pos, index) {\n        this.stack = stack;\n        this.pos = pos;\n        this.index = index;\n        this.buffer = stack.buffer;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    static create(stack) {\n        return new StackBufferCursor(stack, stack.bufferBase + stack.buffer.length, stack.buffer.length);\n    }\n    maybeNext() {\n        let next = this.stack.parent;\n        if (next != null) {\n            this.index = this.stack.bufferBase - next.bufferBase;\n            this.stack = next;\n            this.buffer = next.buffer;\n        }\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    next() {\n        this.index -= 4;\n        this.pos -= 4;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    fork() {\n        return new StackBufferCursor(this.stack, this.pos, this.index);\n    }\n}\n\n/// Tokenizers write the tokens they read into instances of this class.\nclass Token {\n    constructor() {\n        /// The start of the token. This is set by the parser, and should not\n        /// be mutated by the tokenizer.\n        this.start = -1;\n        /// This starts at -1, and should be updated to a term id when a\n        /// matching token is found.\n        this.value = -1;\n        /// When setting `.value`, you should also set `.end` to the end\n        /// position of the token. (You'll usually want to use the `accept`\n        /// method.)\n        this.end = -1;\n    }\n    /// Accept a token, setting `value` and `end` to the given values.\n    accept(value, end) {\n        this.value = value;\n        this.end = end;\n    }\n}\n/// @internal\nclass TokenGroup {\n    constructor(data, id) {\n        this.data = data;\n        this.id = id;\n    }\n    token(input, token, stack) { readToken(this.data, input, token, stack, this.id); }\n}\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// Exports that are used for `@external tokens` in the grammar should\n/// export an instance of this class.\nclass ExternalTokenizer {\n    /// Create a tokenizer. The first argument is the function that,\n    /// given an input stream and a token object,\n    /// [fills](#lezer.Token.accept) the token object if it recognizes a\n    /// token. `token.start` should be used as the start position to\n    /// scan from.\n    constructor(\n    /// @internal\n    token, options = {}) {\n        this.token = token;\n        this.contextual = !!options.contextual;\n        this.fallback = !!options.fallback;\n        this.extend = !!options.extend;\n    }\n}\n// Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `token` when it matches a token.\nfunction readToken(data, input, token, stack, group) {\n    let state = 0, groupMask = 1 << group, dialect = stack.p.parser.dialect;\n    scan: for (let pos = token.start;;) {\n        if ((groupMask & data[state]) == 0)\n            break;\n        let accEnd = data[state + 1];\n        // Check whether this state can lead to a token in the current group\n        // Accept tokens in this state, possibly overwriting\n        // lower-precedence / shorter tokens\n        for (let i = state + 3; i < accEnd; i += 2)\n            if ((data[i + 1] & groupMask) > 0) {\n                let term = data[i];\n                if (dialect.allows(term) &&\n                    (token.value == -1 || token.value == term || stack.p.parser.overrides(term, token.value))) {\n                    token.accept(term, pos);\n                    break;\n                }\n            }\n        let next = input.get(pos++);\n        // Do a binary search on the state's edges\n        for (let low = 0, high = data[state + 2]; low < high;) {\n            let mid = (low + high) >> 1;\n            let index = accEnd + mid + (mid << 1);\n            let from = data[index], to = data[index + 1];\n            if (next < from)\n                high = mid;\n            else if (next >= to)\n                low = mid + 1;\n            else {\n                state = data[index + 2];\n                continue scan;\n            }\n        }\n        break;\n    }\n}\n\n// See lezer-generator/src/encode.ts for comments about the encoding\n// used here\nfunction decodeArray(input, Type = Uint16Array) {\n    if (typeof input != \"string\")\n        return input;\n    let array = null;\n    for (let pos = 0, out = 0; pos < input.length;) {\n        let value = 0;\n        for (;;) {\n            let next = input.charCodeAt(pos++), stop = false;\n            if (next == 126 /* BigValCode */) {\n                value = 65535 /* BigVal */;\n                break;\n            }\n            if (next >= 92 /* Gap2 */)\n                next--;\n            if (next >= 34 /* Gap1 */)\n                next--;\n            let digit = next - 32 /* Start */;\n            if (digit >= 46 /* Base */) {\n                digit -= 46 /* Base */;\n                stop = true;\n            }\n            value += digit;\n            if (stop)\n                break;\n            value *= 46 /* Base */;\n        }\n        if (array)\n            array[out++] = value;\n        else\n            array = new Type(value);\n    }\n    return array;\n}\n\n// FIXME find some way to reduce recovery work done when the input\n// doesn't match the grammar at all.\n// Environment variable used to control console output\nconst verbose = typeof process != \"undefined\" && /\\bparse\\b/.test(process.env.LOG);\nlet stackIDs = null;\nfunction cutAt(tree, pos, side) {\n    let cursor = tree.cursor(pos);\n    for (;;) {\n        if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))\n            for (;;) {\n                if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)\n                    return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 5)) : Math.min(tree.length, Math.max(cursor.from + 1, pos + 5));\n                if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())\n                    break;\n                if (!cursor.parent())\n                    return side < 0 ? 0 : tree.length;\n            }\n    }\n}\nclass FragmentCursor {\n    constructor(fragments) {\n        this.fragments = fragments;\n        this.i = 0;\n        this.fragment = null;\n        this.safeFrom = -1;\n        this.safeTo = -1;\n        this.trees = [];\n        this.start = [];\n        this.index = [];\n        this.nextFragment();\n    }\n    nextFragment() {\n        let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n        if (fr) {\n            this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\n            this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\n            while (this.trees.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n            }\n            this.trees.push(fr.tree);\n            this.start.push(-fr.offset);\n            this.index.push(0);\n            this.nextStart = this.safeFrom;\n        }\n        else {\n            this.nextStart = 1e9;\n        }\n    }\n    // `pos` must be >= any previously given `pos` for this cursor\n    nodeAt(pos) {\n        if (pos < this.nextStart)\n            return null;\n        while (this.fragment && this.safeTo <= pos)\n            this.nextFragment();\n        if (!this.fragment)\n            return null;\n        for (;;) {\n            let last = this.trees.length - 1;\n            if (last < 0) { // End of tree\n                this.nextFragment();\n                return null;\n            }\n            let top = this.trees[last], index = this.index[last];\n            if (index == top.children.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n                continue;\n            }\n            let next = top.children[index];\n            let start = this.start[last] + top.positions[index];\n            if (start > pos) {\n                this.nextStart = start;\n                return null;\n            }\n            else if (start == pos && start + next.length <= this.safeTo) {\n                return start == pos && start >= this.safeFrom ? next : null;\n            }\n            if (next instanceof lezerTree.TreeBuffer) {\n                this.index[last]++;\n                this.nextStart = start + next.length;\n            }\n            else {\n                this.index[last]++;\n                if (start + next.length >= pos) { // Enter this node\n                    this.trees.push(next);\n                    this.start.push(start);\n                    this.index.push(0);\n                }\n            }\n        }\n    }\n}\nclass CachedToken extends Token {\n    constructor() {\n        super(...arguments);\n        this.extended = -1;\n        this.mask = 0;\n        this.context = 0;\n    }\n    clear(start) {\n        this.start = start;\n        this.value = this.extended = -1;\n    }\n}\nconst dummyToken = new Token;\nclass TokenCache {\n    constructor(parser) {\n        this.tokens = [];\n        this.mainToken = dummyToken;\n        this.actions = [];\n        this.tokens = parser.tokenizers.map(_ => new CachedToken);\n    }\n    getActions(stack, input) {\n        let actionIndex = 0;\n        let main = null;\n        let { parser } = stack.p, { tokenizers } = parser;\n        let mask = parser.stateSlot(stack.state, 3 /* TokenizerMask */);\n        let context = stack.curContext ? stack.curContext.hash : 0;\n        for (let i = 0; i < tokenizers.length; i++) {\n            if (((1 << i) & mask) == 0)\n                continue;\n            let tokenizer = tokenizers[i], token = this.tokens[i];\n            if (main && !tokenizer.fallback)\n                continue;\n            if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n                this.updateCachedToken(token, tokenizer, stack, input);\n                token.mask = mask;\n                token.context = context;\n            }\n            if (token.value != 0 /* Err */) {\n                let startIndex = actionIndex;\n                if (token.extended > -1)\n                    actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\n                actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\n                if (!tokenizer.extend) {\n                    main = token;\n                    if (actionIndex > startIndex)\n                        break;\n                }\n            }\n        }\n        while (this.actions.length > actionIndex)\n            this.actions.pop();\n        if (!main) {\n            main = dummyToken;\n            main.start = stack.pos;\n            if (stack.pos == input.length)\n                main.accept(stack.p.parser.eofTerm, stack.pos);\n            else\n                main.accept(0 /* Err */, stack.pos + 1);\n        }\n        this.mainToken = main;\n        return this.actions;\n    }\n    updateCachedToken(token, tokenizer, stack, input) {\n        token.clear(stack.pos);\n        tokenizer.token(input, token, stack);\n        if (token.value > -1) {\n            let { parser } = stack.p;\n            for (let i = 0; i < parser.specialized.length; i++)\n                if (parser.specialized[i] == token.value) {\n                    let result = parser.specializers[i](input.read(token.start, token.end), stack);\n                    if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n                        if ((result & 1) == 0 /* Specialize */)\n                            token.value = result >> 1;\n                        else\n                            token.extended = result >> 1;\n                        break;\n                    }\n                }\n        }\n        else if (stack.pos == input.length) {\n            token.accept(stack.p.parser.eofTerm, stack.pos);\n        }\n        else {\n            token.accept(0 /* Err */, stack.pos + 1);\n        }\n    }\n    putAction(action, token, end, index) {\n        // Don't add duplicate actions\n        for (let i = 0; i < index; i += 3)\n            if (this.actions[i] == action)\n                return index;\n        this.actions[index++] = action;\n        this.actions[index++] = token;\n        this.actions[index++] = end;\n        return index;\n    }\n    addActions(stack, token, end, index) {\n        let { state } = stack, { parser } = stack.p, { data } = parser;\n        for (let set = 0; set < 2; set++) {\n            for (let i = parser.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */);; i += 3) {\n                if (data[i] == 65535 /* End */) {\n                    if (data[i + 1] == 1 /* Next */) {\n                        i = pair(data, i + 2);\n                    }\n                    else {\n                        if (index == 0 && data[i + 1] == 2 /* Other */)\n                            index = this.putAction(pair(data, i + 1), token, end, index);\n                        break;\n                    }\n                }\n                if (data[i] == token)\n                    index = this.putAction(pair(data, i + 1), token, end, index);\n            }\n        }\n        return index;\n    }\n}\nvar Rec;\n(function (Rec) {\n    Rec[Rec[\"Distance\"] = 5] = \"Distance\";\n    Rec[Rec[\"MaxRemainingPerStep\"] = 3] = \"MaxRemainingPerStep\";\n    Rec[Rec[\"MinBufferLengthPrune\"] = 200] = \"MinBufferLengthPrune\";\n    Rec[Rec[\"ForceReduceLimit\"] = 10] = \"ForceReduceLimit\";\n})(Rec || (Rec = {}));\n/// A parse context can be used for step-by-step parsing. After\n/// creating it, you repeatedly call `.advance()` until it returns a\n/// tree to indicate it has reached the end of the parse.\nclass Parse {\n    constructor(parser, input, startPos, context) {\n        this.parser = parser;\n        this.input = input;\n        this.startPos = startPos;\n        this.context = context;\n        // The position to which the parse has advanced.\n        this.pos = 0;\n        this.recovering = 0;\n        this.nextStackID = 0x2654;\n        this.nested = null;\n        this.nestEnd = 0;\n        this.nestWrap = null;\n        this.reused = [];\n        this.tokens = new TokenCache(parser);\n        this.topTerm = parser.top[1];\n        this.stacks = [Stack.start(this, parser.top[0], this.startPos)];\n        let fragments = context === null || context === void 0 ? void 0 : context.fragments;\n        this.fragments = fragments && fragments.length ? new FragmentCursor(fragments) : null;\n    }\n    // Move the parser forward. This will process all parse stacks at\n    // `this.pos` and try to advance them to a further position. If no\n    // stack for such a position is found, it'll start error-recovery.\n    //\n    // When the parse is finished, this will return a syntax tree. When\n    // not, it returns `null`.\n    advance() {\n        if (this.nested) {\n            let result = this.nested.advance();\n            this.pos = this.nested.pos;\n            if (result) {\n                this.finishNested(this.stacks[0], result);\n                this.nested = null;\n            }\n            return null;\n        }\n        let stacks = this.stacks, pos = this.pos;\n        // This will hold stacks beyond `pos`.\n        let newStacks = this.stacks = [];\n        let stopped, stoppedTokens;\n        let maybeNest;\n        // Keep advancing any stacks at `pos` until they either move\n        // forward or can't be advanced. Gather stacks that can't be\n        // advanced further in `stopped`.\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i], nest;\n            for (;;) {\n                if (stack.pos > pos) {\n                    newStacks.push(stack);\n                }\n                else if (nest = this.checkNest(stack)) {\n                    if (!maybeNest || maybeNest.stack.score < stack.score)\n                        maybeNest = nest;\n                }\n                else if (this.advanceStack(stack, newStacks, stacks)) {\n                    continue;\n                }\n                else {\n                    if (!stopped) {\n                        stopped = [];\n                        stoppedTokens = [];\n                    }\n                    stopped.push(stack);\n                    let tok = this.tokens.mainToken;\n                    stoppedTokens.push(tok.value, tok.end);\n                }\n                break;\n            }\n        }\n        if (maybeNest) {\n            this.startNested(maybeNest);\n            return null;\n        }\n        if (!newStacks.length) {\n            let finished = stopped && findFinished(stopped);\n            if (finished)\n                return this.stackToTree(finished);\n            if (this.parser.strict) {\n                if (verbose && stopped)\n                    console.log(\"Stuck with token \" + this.parser.getName(this.tokens.mainToken.value));\n                throw new SyntaxError(\"No parse at \" + pos);\n            }\n            if (!this.recovering)\n                this.recovering = 5 /* Distance */;\n        }\n        if (this.recovering && stopped) {\n            let finished = this.runRecovery(stopped, stoppedTokens, newStacks);\n            if (finished)\n                return this.stackToTree(finished.forceAll());\n        }\n        if (this.recovering) {\n            let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* MaxRemainingPerStep */;\n            if (newStacks.length > maxRemaining) {\n                newStacks.sort((a, b) => b.score - a.score);\n                while (newStacks.length > maxRemaining)\n                    newStacks.pop();\n            }\n            if (newStacks.some(s => s.reducePos > pos))\n                this.recovering--;\n        }\n        else if (newStacks.length > 1) {\n            // Prune stacks that are in the same state, or that have been\n            // running without splitting for a while, to avoid getting stuck\n            // with multiple successful stacks running endlessly on.\n            outer: for (let i = 0; i < newStacks.length - 1; i++) {\n                let stack = newStacks[i];\n                for (let j = i + 1; j < newStacks.length; j++) {\n                    let other = newStacks[j];\n                    if (stack.sameState(other) ||\n                        stack.buffer.length > 200 /* MinBufferLengthPrune */ && other.buffer.length > 200 /* MinBufferLengthPrune */) {\n                        if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {\n                            newStacks.splice(j--, 1);\n                        }\n                        else {\n                            newStacks.splice(i--, 1);\n                            continue outer;\n                        }\n                    }\n                }\n            }\n        }\n        this.pos = newStacks[0].pos;\n        for (let i = 1; i < newStacks.length; i++)\n            if (newStacks[i].pos < this.pos)\n                this.pos = newStacks[i].pos;\n        return null;\n    }\n    // Returns an updated version of the given stack, or null if the\n    // stack can't advance normally. When `split` and `stacks` are\n    // given, stacks split off by ambiguous operations will be pushed to\n    // `split`, or added to `stacks` if they move `pos` forward.\n    advanceStack(stack, stacks, split) {\n        let start = stack.pos, { input, parser } = this;\n        let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n        if (this.fragments) {\n            let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;\n            for (let cached = this.fragments.nodeAt(start); cached;) {\n                let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\n                if (match > -1 && cached.length && (!strictCx || (cached.contextHash || 0) == cxHash)) {\n                    stack.useNode(cached, match);\n                    if (verbose)\n                        console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);\n                    return true;\n                }\n                if (!(cached instanceof lezerTree.Tree) || cached.children.length == 0 || cached.positions[0] > 0)\n                    break;\n                let inner = cached.children[0];\n                if (inner instanceof lezerTree.Tree)\n                    cached = inner;\n                else\n                    break;\n            }\n        }\n        let defaultReduce = parser.stateSlot(stack.state, 4 /* DefaultReduce */);\n        if (defaultReduce > 0) {\n            stack.reduce(defaultReduce);\n            if (verbose)\n                console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* ValueMask */)})`);\n            return true;\n        }\n        let actions = this.tokens.getActions(stack, input);\n        for (let i = 0; i < actions.length;) {\n            let action = actions[i++], term = actions[i++], end = actions[i++];\n            let last = i == actions.length || !split;\n            let localStack = last ? stack : stack.split();\n            localStack.apply(action, term, end);\n            if (verbose)\n                console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* ReduceFlag */) == 0 ? \"shift\"\n                    : `reduce of ${parser.getName(action & 65535 /* ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? \"\" : \", split\"})`);\n            if (last)\n                return true;\n            else if (localStack.pos > start)\n                stacks.push(localStack);\n            else\n                split.push(localStack);\n        }\n        return false;\n    }\n    // Advance a given stack forward as far as it will go. Returns the\n    // (possibly updated) stack if it got stuck, or null if it moved\n    // forward and was given to `pushStackDedup`.\n    advanceFully(stack, newStacks) {\n        let pos = stack.pos;\n        for (;;) {\n            let nest = this.checkNest(stack);\n            if (nest)\n                return nest;\n            if (!this.advanceStack(stack, null, null))\n                return false;\n            if (stack.pos > pos) {\n                pushStackDedup(stack, newStacks);\n                return true;\n            }\n        }\n    }\n    runRecovery(stacks, tokens, newStacks) {\n        let finished = null, restarted = false;\n        let maybeNest;\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];\n            let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n            if (stack.deadEnd) {\n                if (restarted)\n                    continue;\n                restarted = true;\n                stack.restart();\n                if (verbose)\n                    console.log(base + this.stackID(stack) + \" (restarted)\");\n                let done = this.advanceFully(stack, newStacks);\n                if (done) {\n                    if (done !== true)\n                        maybeNest = done;\n                    continue;\n                }\n            }\n            let force = stack.split(), forceBase = base;\n            for (let j = 0; force.forceReduce() && j < 10 /* ForceReduceLimit */; j++) {\n                if (verbose)\n                    console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\n                let done = this.advanceFully(force, newStacks);\n                if (done) {\n                    if (done !== true)\n                        maybeNest = done;\n                    break;\n                }\n                if (verbose)\n                    forceBase = this.stackID(force) + \" -> \";\n            }\n            for (let insert of stack.recoverByInsert(token)) {\n                if (verbose)\n                    console.log(base + this.stackID(insert) + \" (via recover-insert)\");\n                this.advanceFully(insert, newStacks);\n            }\n            if (this.input.length > stack.pos) {\n                if (tokenEnd == stack.pos) {\n                    tokenEnd++;\n                    token = 0 /* Err */;\n                }\n                stack.recoverByDelete(token, tokenEnd);\n                if (verbose)\n                    console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);\n                pushStackDedup(stack, newStacks);\n            }\n            else if (!finished || finished.score < stack.score) {\n                finished = stack;\n            }\n        }\n        if (finished)\n            return finished;\n        if (maybeNest)\n            for (let s of this.stacks)\n                if (s.score > maybeNest.stack.score) {\n                    maybeNest = undefined;\n                    break;\n                }\n        if (maybeNest)\n            this.startNested(maybeNest);\n        return null;\n    }\n    forceFinish() {\n        let stack = this.stacks[0].split();\n        if (this.nested)\n            this.finishNested(stack, this.nested.forceFinish());\n        return this.stackToTree(stack.forceAll());\n    }\n    // Convert the stack's buffer to a syntax tree.\n    stackToTree(stack, pos = stack.pos) {\n        if (this.parser.context)\n            stack.emitContext();\n        return lezerTree.Tree.build({ buffer: StackBufferCursor.create(stack),\n            nodeSet: this.parser.nodeSet,\n            topID: this.topTerm,\n            maxBufferLength: this.parser.bufferLength,\n            reused: this.reused,\n            start: this.startPos,\n            length: pos - this.startPos,\n            minRepeatType: this.parser.minRepeatTerm });\n    }\n    checkNest(stack) {\n        let info = this.parser.findNested(stack.state);\n        if (!info)\n            return null;\n        let spec = info.value;\n        if (typeof spec == \"function\")\n            spec = spec(this.input, stack);\n        return spec ? { stack, info, spec } : null;\n    }\n    startNested(nest) {\n        let { stack, info, spec } = nest;\n        this.stacks = [stack];\n        this.nestEnd = this.scanForNestEnd(stack, info.end, spec.filterEnd);\n        this.nestWrap = typeof spec.wrapType == \"number\" ? this.parser.nodeSet.types[spec.wrapType] : spec.wrapType || null;\n        if (spec.startParse) {\n            this.nested = spec.startParse(this.input.clip(this.nestEnd), stack.pos, this.context);\n        }\n        else {\n            this.finishNested(stack);\n        }\n    }\n    scanForNestEnd(stack, endToken, filter) {\n        for (let pos = stack.pos; pos < this.input.length; pos++) {\n            dummyToken.start = pos;\n            dummyToken.value = -1;\n            endToken.token(this.input, dummyToken, stack);\n            if (dummyToken.value > -1 && (!filter || filter(this.input.read(pos, dummyToken.end))))\n                return pos;\n        }\n        return this.input.length;\n    }\n    finishNested(stack, tree) {\n        if (this.nestWrap)\n            tree = new lezerTree.Tree(this.nestWrap, tree ? [tree] : [], tree ? [0] : [], this.nestEnd - stack.pos);\n        else if (!tree)\n            tree = new lezerTree.Tree(lezerTree.NodeType.none, [], [], this.nestEnd - stack.pos);\n        let info = this.parser.findNested(stack.state);\n        stack.useNode(tree, this.parser.getGoto(stack.state, info.placeholder, true));\n        if (verbose)\n            console.log(this.stackID(stack) + ` (via unnest)`);\n    }\n    stackID(stack) {\n        let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);\n        if (!id)\n            stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\n        return id + stack;\n    }\n}\nfunction pushStackDedup(stack, newStacks) {\n    for (let i = 0; i < newStacks.length; i++) {\n        let other = newStacks[i];\n        if (other.pos == stack.pos && other.sameState(stack)) {\n            if (newStacks[i].score < stack.score)\n                newStacks[i] = stack;\n            return;\n        }\n    }\n    newStacks.push(stack);\n}\nclass Dialect {\n    constructor(source, flags, disabled) {\n        this.source = source;\n        this.flags = flags;\n        this.disabled = disabled;\n    }\n    allows(term) { return !this.disabled || this.disabled[term] == 0; }\n}\nconst id = x => x;\n/// Context trackers are used to track stateful context (such as\n/// indentation in the Python grammar, or parent elements in the XML\n/// grammar) needed by external tokenizers. You declare them in a\n/// grammar file as `@context exportName from \"module\"`.\n///\n/// Context values should be immutable, and can be updated (replaced)\n/// on shift or reduce actions.\nclass ContextTracker {\n    /// The export used in a `@context` declaration should be of this\n    /// type.\n    constructor(spec) {\n        this.start = spec.start;\n        this.shift = spec.shift || id;\n        this.reduce = spec.reduce || id;\n        this.reuse = spec.reuse || id;\n        this.hash = spec.hash;\n        this.strict = spec.strict !== false;\n    }\n}\n/// A parser holds the parse tables for a given grammar, as generated\n/// by `lezer-generator`.\nclass Parser {\n    /// @internal\n    constructor(spec) {\n        /// @internal\n        this.bufferLength = lezerTree.DefaultBufferLength;\n        /// @internal\n        this.strict = false;\n        this.cachedDialect = null;\n        if (spec.version != 13 /* Version */)\n            throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${13 /* Version */})`);\n        let tokenArray = decodeArray(spec.tokenData);\n        let nodeNames = spec.nodeNames.split(\" \");\n        this.minRepeatTerm = nodeNames.length;\n        this.context = spec.context;\n        for (let i = 0; i < spec.repeatNodeCount; i++)\n            nodeNames.push(\"\");\n        let nodeProps = [];\n        for (let i = 0; i < nodeNames.length; i++)\n            nodeProps.push([]);\n        function setProp(nodeID, prop, value) {\n            nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\n        }\n        if (spec.nodeProps)\n            for (let propSpec of spec.nodeProps) {\n                let prop = propSpec[0];\n                for (let i = 1; i < propSpec.length;) {\n                    let next = propSpec[i++];\n                    if (next >= 0) {\n                        setProp(next, prop, propSpec[i++]);\n                    }\n                    else {\n                        let value = propSpec[i + -next];\n                        for (let j = -next; j > 0; j--)\n                            setProp(propSpec[i++], prop, value);\n                        i++;\n                    }\n                }\n            }\n        this.specialized = new Uint16Array(spec.specialized ? spec.specialized.length : 0);\n        this.specializers = [];\n        if (spec.specialized)\n            for (let i = 0; i < spec.specialized.length; i++) {\n                this.specialized[i] = spec.specialized[i].term;\n                this.specializers[i] = spec.specialized[i].get;\n            }\n        this.states = decodeArray(spec.states, Uint32Array);\n        this.data = decodeArray(spec.stateData);\n        this.goto = decodeArray(spec.goto);\n        let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);\n        this.nodeSet = new lezerTree.NodeSet(nodeNames.map((name, i) => lezerTree.NodeType.define({\n            name: i >= this.minRepeatTerm ? undefined : name,\n            id: i,\n            props: nodeProps[i],\n            top: topTerms.indexOf(i) > -1,\n            error: i == 0,\n            skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n        })));\n        this.maxTerm = spec.maxTerm;\n        this.tokenizers = spec.tokenizers.map(value => typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value);\n        this.topRules = spec.topRules;\n        this.nested = (spec.nested || []).map(([name, value, endToken, placeholder]) => {\n            return { name, value, end: new TokenGroup(decodeArray(endToken), 0), placeholder };\n        });\n        this.dialects = spec.dialects || {};\n        this.dynamicPrecedences = spec.dynamicPrecedences || null;\n        this.tokenPrecTable = spec.tokenPrec;\n        this.termNames = spec.termNames || null;\n        this.maxNode = this.nodeSet.types.length - 1;\n        this.dialect = this.parseDialect();\n        this.top = this.topRules[Object.keys(this.topRules)[0]];\n    }\n    /// Parse a given string or stream.\n    parse(input, startPos = 0, context = {}) {\n        if (typeof input == \"string\")\n            input = lezerTree.stringInput(input);\n        let cx = new Parse(this, input, startPos, context);\n        for (;;) {\n            let done = cx.advance();\n            if (done)\n                return done;\n        }\n    }\n    /// Start an incremental parse.\n    startParse(input, startPos = 0, context = {}) {\n        if (typeof input == \"string\")\n            input = lezerTree.stringInput(input);\n        return new Parse(this, input, startPos, context);\n    }\n    /// Get a goto table entry @internal\n    getGoto(state, term, loose = false) {\n        let table = this.goto;\n        if (term >= table[0])\n            return -1;\n        for (let pos = table[term + 1];;) {\n            let groupTag = table[pos++], last = groupTag & 1;\n            let target = table[pos++];\n            if (last && loose)\n                return target;\n            for (let end = pos + (groupTag >> 1); pos < end; pos++)\n                if (table[pos] == state)\n                    return target;\n            if (last)\n                return -1;\n        }\n    }\n    /// Check if this state has an action for a given terminal @internal\n    hasAction(state, terminal) {\n        let data = this.data;\n        for (let set = 0; set < 2; set++) {\n            for (let i = this.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */), next;; i += 3) {\n                if ((next = data[i]) == 65535 /* End */) {\n                    if (data[i + 1] == 1 /* Next */)\n                        next = data[i = pair(data, i + 2)];\n                    else if (data[i + 1] == 2 /* Other */)\n                        return pair(data, i + 2);\n                    else\n                        break;\n                }\n                if (next == terminal || next == 0 /* Err */)\n                    return pair(data, i + 1);\n            }\n        }\n        return 0;\n    }\n    /// @internal\n    stateSlot(state, slot) {\n        return this.states[(state * 6 /* Size */) + slot];\n    }\n    /// @internal\n    stateFlag(state, flag) {\n        return (this.stateSlot(state, 0 /* Flags */) & flag) > 0;\n    }\n    /// @internal\n    findNested(state) {\n        let flags = this.stateSlot(state, 0 /* Flags */);\n        return flags & 4 /* StartNest */ ? this.nested[flags >> 10 /* NestShift */] : null;\n    }\n    /// @internal\n    validAction(state, action) {\n        if (action == this.stateSlot(state, 4 /* DefaultReduce */))\n            return true;\n        for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* End */) {\n                if (this.data[i + 1] == 1 /* Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    return false;\n            }\n            if (action == pair(this.data, i + 1))\n                return true;\n        }\n    }\n    /// Get the states that can follow this one through shift actions or\n    /// goto jumps. @internal\n    nextStates(state) {\n        let result = [];\n        for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* End */) {\n                if (this.data[i + 1] == 1 /* Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            if ((this.data[i + 2] & (65536 /* ReduceFlag */ >> 16)) == 0) {\n                let value = this.data[i + 1];\n                if (!result.some((v, i) => (i & 1) && v == value))\n                    result.push(this.data[i], value);\n            }\n        }\n        return result;\n    }\n    /// @internal\n    overrides(token, prev) {\n        let iPrev = findOffset(this.data, this.tokenPrecTable, prev);\n        return iPrev < 0 || findOffset(this.data, this.tokenPrecTable, token) < iPrev;\n    }\n    /// Configure the parser. Returns a new parser instance that has the\n    /// given settings modified. Settings not provided in `config` are\n    /// kept from the original parser.\n    configure(config) {\n        // Hideous reflection-based kludge to make it easy to create a\n        // slightly modified copy of a parser.\n        let copy = Object.assign(Object.create(Parser.prototype), this);\n        if (config.props)\n            copy.nodeSet = this.nodeSet.extend(...config.props);\n        if (config.top) {\n            let info = this.topRules[config.top];\n            if (!info)\n                throw new RangeError(`Invalid top rule name ${config.top}`);\n            copy.top = info;\n        }\n        if (config.tokenizers)\n            copy.tokenizers = this.tokenizers.map(t => {\n                let found = config.tokenizers.find(r => r.from == t);\n                return found ? found.to : t;\n            });\n        if (config.dialect)\n            copy.dialect = this.parseDialect(config.dialect);\n        if (config.nested)\n            copy.nested = this.nested.map(obj => {\n                if (!Object.prototype.hasOwnProperty.call(config.nested, obj.name))\n                    return obj;\n                return { name: obj.name, value: config.nested[obj.name], end: obj.end, placeholder: obj.placeholder };\n            });\n        if (config.strict != null)\n            copy.strict = config.strict;\n        if (config.bufferLength != null)\n            copy.bufferLength = config.bufferLength;\n        return copy;\n    }\n    /// Returns the name associated with a given term. This will only\n    /// work for all terms when the parser was generated with the\n    /// `--names` option. By default, only the names of tagged terms are\n    /// stored.\n    getName(term) {\n        return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\n    }\n    /// The eof term id is always allocated directly after the node\n    /// types. @internal\n    get eofTerm() { return this.maxNode + 1; }\n    /// Tells you whether this grammar has any nested grammars.\n    get hasNested() { return this.nested.length > 0; }\n    /// The type of top node produced by the parser.\n    get topNode() { return this.nodeSet.types[this.top[1]]; }\n    /// @internal\n    dynamicPrecedence(term) {\n        let prec = this.dynamicPrecedences;\n        return prec == null ? 0 : prec[term] || 0;\n    }\n    /// @internal\n    parseDialect(dialect) {\n        if (this.cachedDialect && this.cachedDialect.source == dialect)\n            return this.cachedDialect;\n        let values = Object.keys(this.dialects), flags = values.map(() => false);\n        if (dialect)\n            for (let part of dialect.split(\" \")) {\n                let id = values.indexOf(part);\n                if (id >= 0)\n                    flags[id] = true;\n            }\n        let disabled = null;\n        for (let i = 0; i < values.length; i++)\n            if (!flags[i]) {\n                for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* End */;)\n                    (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;\n            }\n        return this.cachedDialect = new Dialect(dialect, flags, disabled);\n    }\n    /// (used by the output of the parser generator) @internal\n    static deserialize(spec) {\n        return new Parser(spec);\n    }\n}\nfunction pair(data, off) { return data[off] | (data[off + 1] << 16); }\nfunction findOffset(data, start, term) {\n    for (let i = start, next; (next = data[i]) != 65535 /* End */; i++)\n        if (next == term)\n            return i - start;\n    return -1;\n}\nfunction findFinished(stacks) {\n    let best = null;\n    for (let stack of stacks) {\n        if (stack.pos == stack.p.input.length &&\n            stack.p.parser.stateFlag(stack.state, 2 /* Accepting */) &&\n            (!best || best.score < stack.score))\n            best = stack;\n    }\n    return best;\n}\n\nexports.NodeProp = lezerTree.NodeProp;\nexports.NodeSet = lezerTree.NodeSet;\nexports.NodeType = lezerTree.NodeType;\nexports.Tree = lezerTree.Tree;\nexports.TreeCursor = lezerTree.TreeCursor;\nexports.ContextTracker = ContextTracker;\nexports.ExternalTokenizer = ExternalTokenizer;\nexports.Parser = Parser;\nexports.Stack = Stack;\nexports.Token = Token;\n//# sourceMappingURL=index.cjs.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","decodeArray","input","Type","Uint16Array","array","pos","out","length","value","next","charCodeAt","stop","digit","cutAt","tree","side","cursor","childBefore","childAfter","to","from","type","isError","Math","max","min","prevSibling","nextSibling","parent","pushStackDedup","stack","newStacks","i","other","sameState","score","push","pair","data","off","findOffset","start","term","findFinished","stacks","best","p","parser","stateFlag","state","process","Object","defineProperty","lezerTree","Stack","constructor","reducePos","buffer","bufferBase","curContext","toString","filter","_","concat","cx","context","StackContext","pushState","reduce","action","depth","dPrec","dynamicPrecedence","minRepeatTerm","storeNode","getGoto","base","count","baseStateID","pop","reduceContext","end","size","isReduce","cur","top","index","shift","nextEnd","maxNode","shiftContext","apply","useNode","reused","updateContext","tracker","reuse","split","slice","recoverByDelete","isNode","canShift","sim","SimulatedStack","stateSlot","hasAction","force","startOf","types","before","frame","indexOf","recoverByInsert","nextStates","s","some","v","result","forceReduce","validAction","forceAll","restart","dialectEnabled","dialectID","dialect","flags","emitContext","strict","last","hash","newCx","Recover","rest","offset","goto","StackBufferCursor","maybeNext","create","fork","Token","accept","TokenGroup","id","token","groupMask","accEnd","allows","overrides","get","low","high","mid","prototype","contextual","fallback","extend","ExternalTokenizer","options","verbose","test","env","LOG","stackIDs","FragmentCursor","fragments","fragment","safeTo","safeFrom","trees","nextFragment","fr","openStart","openEnd","nextStart","nodeAt","children","positions","TreeBuffer","CachedToken","arguments","extended","mask","clear","dummyToken","TokenCache","tokens","mainToken","actions","tokenizers","map","getActions","actionIndex","main","tokenizer","updateCachedToken","startIndex","addActions","eofTerm","specialized","specializers","read","putAction","set","Rec","Parse","startPos","recovering","nextStackID","nested","nestEnd","nestWrap","topTerm","advance","finishNested","nest","checkNest","maybeNest","advanceStack","stopped","stoppedTokens","tok","startNested","finished","stackToTree","console","log","getName","SyntaxError","runRecovery","maxRemaining","sort","a","b","j","splice","stackID","strictCx","cxHash","cached","match","nodeSet","contextHash","Tree","inner","defaultReduce","localStack","advanceFully","restarted","tokenEnd","deadEnd","done","forceBase","insert","undefined","forceFinish","build","topID","maxBufferLength","bufferLength","minRepeatType","info","findNested","spec","scanForNestEnd","filterEnd","wrapType","startParse","clip","endToken","NodeType","none","placeholder","WeakMap","String","fromCodePoint","Dialect","source","disabled","x","ContextTracker","Parser","setProp","nodeID","prop","nodeProps","deserialize","DefaultBufferLength","cachedDialect","version","RangeError","tokenArray","tokenData","nodeNames","repeatNodeCount","propSpec","states","Uint32Array","stateData","topTerms","keys","topRules","r","NodeSet","name","define","props","error","skipped","skippedNodes","maxTerm","dialects","dynamicPrecedences","tokenPrecTable","tokenPrec","termNames","parseDialect","parse","stringInput","loose","table","groupTag","target","terminal","slot","flag","prev","iPrev","configure","config","copy","assign","t","found","find","obj","hasOwnProperty","call","prec","values","part","Uint8Array","NodeProp","TreeCursor"]
}
