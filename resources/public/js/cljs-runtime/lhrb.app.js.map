{"version":3,"sources":["lhrb/app.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","_","re_frame.core.reg_event_fx","p__48519","vec__48520","cljs.core.nth","p1__48518#","cofx","cljs.core.println","p__48523","vec__48524","db","res","cljs.core/assoc-in","re_frame.core.reg_sub","cljs.core.get_in","p__48527","map__48528","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","obj48530","k48531","obj48532","applied-science.js-interop.impl/in?*","js/undefined","lhrb.app/eval-cell","state","lhrb.app/keymap*","modifier","p__48533","map__48534","cljs.core/--destructure-map","cljs.core.get","lhrb.app/extension","js/module$node_modules$$codemirror$view$dist$index_cjs.keymap","cljs.core.partial","lhrb.app/theme","js/module$node_modules$$codemirror$view$dist$index_cjs.EditorView","js/lhrb","js/lhrb.app","js/lhrb.app.extensions","lhrb.app/extensions","js/module$node_modules$$codemirror$history$dist$index_cjs.history","js/module$node_modules$$codemirror$highlight$dist$index_cjs.defaultHighlightStyle","js/module$node_modules$$codemirror$view$dist$index_cjs.drawSelection","js/module$node_modules$$codemirror$fold$dist$index_cjs.foldGutter","js/module$node_modules$$codemirror$state$dist$index_cjs.EditorState","nextjournal.clojure-mode/default-extensions","nextjournal.clojure-mode/complete-keymap","js/module$node_modules$$codemirror$history$dist$index_cjs.historyKeymap","lhrb.app/extensions-read-only","lhrb.app/editor","!view","cljs.core.atom","!mount","el","cljs.core/reset!","lhrb.app/result-view","source","reagent.core.atom","reagent.core.create_class","this","old-argv","cljs.core/deref","new-argv","cljs.core/first","cljs.core/rest","reagent.core/argv","v","transaction","lhrb.app/result-box","re_frame.core.subscribe","lhrb.app/page","lhrb.app/linux?","cljs.core/re-find","js/navigator.userAgent","lhrb.app/mac?","js/navigator.platform","lhrb.app/key-mapping","G__48535","cljs.core.merge","lhrb.app/render-key","key","keys","cljs.core.into","p1__48536#","cljs.core.map","cljs.core/memoize","clojure.string.split","cljs.core.map_indexed","i","k","lhrb.app/key-bindings-table","nextjournal.clojure-mode.keymap/paredit-keymap*","cljs.core.sort_by","p__48537","vec__48538","vec__48541","seq__48542","cljs.core/seq","first__48543","cljs.core/next","map__48544","vec__48545","map__48548","command","shift","doc","alternate-key","cljs.core/name","G__48549","lhrb.app/render","reagent.dom.render","js/document.getElementById","lhrb.app/init","re-frame.core/dispatch-sync"],"sourcesContent":["(ns lhrb.app\n  (:require [\"@codemirror/closebrackets\" :refer [closeBrackets]]\n            [\"@codemirror/fold\" :as fold]\n            [\"@codemirror/gutter\" :refer [lineNumbers]]\n            [\"@codemirror/highlight\" :as highlight]\n            [\"@codemirror/history\" :refer [history historyKeymap]]\n            [\"@codemirror/state\" :refer [EditorState]]\n            [\"@codemirror/view\" :as view :refer [EditorView]]\n            [\"lezer\" :as lezer]\n            [\"lezer-generator\" :as lg]\n            [\"lezer-tree\" :as lz-tree]\n            [applied-science.js-interop :as j]\n            [clojure.string :as str]\n            [nextjournal.clojure-mode :as cm-clj]\n            [nextjournal.clojure-mode.extensions.close-brackets :as close-brackets]\n            [nextjournal.clojure-mode.extensions.formatting :as format]\n            [nextjournal.clojure-mode.extensions.selection-history :as sel-history]\n            [nextjournal.clojure-mode.keymap :as keymap]\n            [nextjournal.clojure-mode.live-grammar :as live-grammar]\n            [nextjournal.clojure-mode.node :as n]\n            [nextjournal.clojure-mode.selections :as sel]\n            [nextjournal.clojure-mode.test-utils :as test-utils]\n            [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [re-frame.db :as rdb]\n            [re-frame.core :as rf]\n            [ajax.core :as ajax]\n            ;; cause :http-xhrio effect handler to register with re-frame\n            [day8.re-frame.http-fx]))\n\n(rf/reg-event-db\n :initialize\n (fn [_ _]\n   {:cells {0 {:id 0\n               :code \"(load-db db \\\"resources/got-db.edn\\\")\"}}\n    :order [0]\n    :active 0\n    :results {:code \";; => eval output gets displayed here\"}\n    :last []}))\n\n(rf/reg-event-fx\n :eval\n (fn [cofx [_ _]]\n   {:http-xhrio {:method            :post\n                 :uri               \"http://localhost:8890/repl\"\n                 :body              '(+ 1 1)\n                 :format            \"application/edn\"\n                 :response-format   \"application/edn\"\n                 :on-success        #(println %)}}))\n\n(rf/reg-event-db\n :new-result\n (fn [db [_ res]]\n   (assoc-in db [:results :code] res)))\n\n(rf/reg-sub\n :results\n (fn [db _]\n   (get-in db [:results :code] '(nothing to see yet))))\n\n(comment\n  (rf/dispatch [:new-result '(+ 1 1)])\n  (rf/dispatch [:eval \"hallo\"])\n\n  @rdb/app-db\n  ,)\n\n(j/defn eval-cell [^:js {:keys [state]}]\n  (-> (str \"(do \" (.-doc state) \" )\"))\n  true)\n\n(defn keymap* [modifier]\n  {:eval-cell\n   [{:key \"Mod-Enter\"\n     :doc \"Evaluate cell\"}]\n   :eval-at-cursor\n   [{:key (str modifier \"-Enter\")\n     :doc \"Evaluates form at cursor\"}]\n   :eval-top-level\n   [{:key (str modifier \"-Shift-Enter\")\n     :doc \"Evaluates top-level form at cursor\"}]})\n\n(defn extension [{:keys [modifier]}]\n  (.of view/keymap\n       (j/lit\n        [{:key \"Mod-Enter\"\n          :run (partial eval-cell)}])))\n\n(def theme\n  (.theme EditorView\n          (j/lit {\".cm-content\" {:white-space \"pre-wrap\"\n                                 :padding \"10px 0\"}\n                  \"&.cm-focused\" {:outline \"none\"}\n                  \".cm-line\" {:padding \"0 9px\"\n                              :line-height \"1.6\"\n                              :font-size \"16px\"\n                              :font-family \"var(--code-font)\"}\n                  \".cm-matchingBracket\" {:border-bottom \"1px solid #ff0000\"\n                                         :color \"inherit\"}\n                  \".cm-gutters\" {:background \"transparent\"\n                                 :border \"none\"}\n                  \".cm-gutterElement\" {:margin-left \"5px\"}\n                  ;; only show cursor when focused\n                  \".cm-cursor\" {:visibility \"hidden\"}\n                  \"&.cm-focused .cm-cursor\" {:visibility \"visible\"}})))\n\n(defonce ^:private extensions #js[theme\n                        (history)\n                        highlight/defaultHighlightStyle\n                        (view/drawSelection)\n                        ;(lineNumbers)\n                        (fold/foldGutter)\n                        (.. EditorState -allowMultipleSelections (of true))\n                        cm-clj/default-extensions\n                        (.of view/keymap cm-clj/complete-keymap)\n                        (.of view/keymap historyKeymap)])\n\n(def extensions-read-only\n  #js[theme\n      highlight/defaultHighlightStyle\n      (view/drawSelection)\n      (.. EditorState -allowMultipleSelections (of true))\n      cm-clj/default-extensions\n      (.. EditorView -editable (of false))])\n\n(defn editor []\n  (let [!view (atom nil)\n        !mount (fn [el]\n                   (reset!\n                    !view\n                    (EditorView.\n                     #js {:state\n                          (.create\n                           EditorState\n                           #js {:doc (str '(load-db db-name \"resources\"))\n                                :extensions extensions})\n                          :parent el})))]\n    [:div\n     [:div {:ref !mount}]]))\n\n(defn result-view [source]\n  (let [!view (r/atom nil)\n        !mount (fn [el]\n                   (reset!\n                    !view\n                    (EditorView.\n                     #js {:state\n                          (.create\n                           EditorState\n                           #js {:doc (str source)\n                                :extensions extensions})\n                          :parent el})))]\n    (r/create-class\n     {:display-name \"result-view\"\n      :component-did-update\n      (fn [this old-argv] ;; somewhat wired according to the reagent docs\n                         ;; this is due to the object oriented react api\n        (let [;; arg-list from reagent\n              new-argv (first (rest (r/argv this)))\n              v @!view\n              state (. v -state)\n              ;; replaces the whole document, maybe there is a better way?\n              transaction (. state\n                             update\n                             #js {:changes #js {:from 0\n                                                :to (.. state -doc -length)\n                                                :insert (str new-argv)}})]\n          (. v dispatch transaction)))\n      :reagent-render\n      (fn [source]\n        [:div {:ref !mount}])})))\n\n(defn result-box []\n  (let [source (rf/subscribe [:results])]\n    (fn []\n      [:div {:class \"code-box\"}\n       [result-view @source]])))\n\n(defn page []\n  [:div\n   [:section {:class \"header\"}\n    [:h2 {:class \"title\"} \"Datahog\"]]\n   [:div {:class \"row bg-grey\"}\n    [:div {:class \"six columns padding-10\"}\n     [:div {:class \"code-wrapper\"}\n      [:div {:class \"code-box\"}\n       [editor]]]\n      [:div {:class \"code-wrapper\"}\n      [:div {:class \"code-box\"}\n       [editor]]]]\n    [:div {:class \"six columns padding-10\"}\n     [result-box]\n     ]]])\n\n;; nextjournal/clojure-mode/demo\n(defn linux? []\n  (some? (re-find #\"(Linux)|(X11)\" js/navigator.userAgent)))\n\n(defn mac? []\n  (and (not (linux?))\n       (some? (re-find #\"(Mac)|(iPhone)|(iPad)|(iPod)\" js/navigator.platform))))\n\n(defn key-mapping []\n  (cond-> {\"ArrowUp\" \"\u2191\"\n           \"ArrowDown\" \"\u2193\"\n           \"ArrowRight\" \"\u2192\"\n           \"ArrowLeft\" \"\u2190\"\n           \"Mod\" \"Ctrl\"}\n    (mac?)\n    (merge {\"Alt\" \"\u2325\"\n            \"Shift\" \"\u21e7\"\n            \"Enter\" \"\u23ce\"\n            \"Ctrl\" \"\u2303\"\n            \"Mod\" \"\u2318\"})))\n\n(defn render-key [key]\n  (let [keys (into [] (map #(get ((memoize key-mapping)) % %) (str/split key #\"-\")))]\n    (into [:span]\n          (map-indexed (fn [i k]\n                         [:<>\n                          (when-not (zero? i) [:span \" + \"])\n                          [:kbd.kbd k]]) keys))))\n\n(defn key-bindings-table []\n  [:table.w-full.text-sm\n   [:thead\n    [:tr.border-t\n     [:th.px-3.py-1.align-top.text-left.text-xs.uppercase.font-normal.black-50 \"Command\"]\n     [:th.px-3.py-1.align-top.text-left.text-xs.uppercase.font-normal.black-50 \"Keybinding\"]\n     [:th.px-3.py-1.align-top.text-left.text-xs.uppercase.font-normal.black-50 \"Alternate Binding\"]\n     [:th.px-3.py-1.align-top.text-left.text-xs.uppercase.font-normal.black-50 {:style {:min-width 290}} \"Description\"]]]\n   (into [:tbody]\n         (->> keymap/paredit-keymap*\n              (merge (keymap* \"Alt\"))\n              (sort-by first)\n              (map (fn [[command [{:keys [key shift doc]} & [{alternate-key :key}]]]]\n                     [:<>\n                      [:tr.border-t.hover:bg-gray-100\n                       [:td.px-3.py-1.align-top.monospace.whitespace-nowrap [:b (name command)]]\n                       [:td.px-3.py-1.align-top.text-right.text-sm.whitespace-nowrap (render-key key)]\n                       [:td.px-3.py-1.align-top.text-right.text-sm.whitespace-nowrap (some-> alternate-key render-key)]\n                       [:td.px-3.py-1.align-top doc]]\n                      (when shift\n                        [:tr.border-t.hover:bg-gray-100\n                         [:td.px-3.py-1.align-top [:b (name shift)]]\n                         [:td.px-3.py-1.align-top.text-sm.whitespace-nowrap.text-right\n                          (render-key (str \"Shift-\" key))]\n                         [:td.px-3.py-1.align-top.text-sm]\n                         [:td.px-3.py-1.align-top]])]))))])\n\n\n(defn ^:dev/after-load render []\n  (rdom/render [page] (js/document.getElementById \"app\"))\n\n  #_(let [mapping (key-mapping)]\n    (.. (js/document.querySelectorAll \".mod,.alt,.ctrl\")\n        (forEach #(when-let [k (get mapping (.-innerHTML %))]\n                    (set! (.-innerHTML %) k))))))\n\n(defn init []\n  (rf/dispatch-sync [:initialize])\n  (rdom/render [page] (js/document.getElementById \"app\")))\n"]}