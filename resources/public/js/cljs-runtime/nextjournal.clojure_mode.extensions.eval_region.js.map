{"version":3,"sources":["nextjournal/clojure_mode/extensions/eval_region.cljs"],"mappings":"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","names":["nextjournal.clojure-mode.extensions.eval-region/uppermost-edge-here","pos","node","or__4223__auto__","cljs.core/iterate","nextjournal.clojure-mode.node/up","cljs.core.take_while","p1__52725#","cljs.core.every_pred","cljs.core/complement","nextjournal.clojure-mode.node/top?","cljs.core._EQ_","nextjournal.clojure-mode.node/end","nextjournal.clojure-mode.node/start","cljs.core/last","nextjournal.clojure-mode.extensions.eval-region/main-selection","state","parent__51019__auto__","f__51020__auto__","obj52730","obj52728","k52729","obj52733","applied-science.js-interop.impl/in?*","js/undefined","k52731","obj52736","var_args","G__52745","nextjournal.clojure-mode.extensions.eval-region/node-at-cursor","js/Error","nextjournal.clojure_mode.extensions.eval_region.node_at_cursor","obj52749","k52750","obj52752","from","G__52755","nextjournal.clojure-mode.node/nearest-touching","p1__52740#","nextjournal.clojure-mode.node/terminal-type?","nextjournal.clojure-mode.node/type","G__52762","nextjournal.clojure_mode.node.children","cljs.core/first","nextjournal.clojure_mode.node.balanced_range","nextjournal.clojure-mode.extensions.eval-region/top-level-node","obj52765","k52766","obj52767","cljs.core/identity","js/nextjournal","js/nextjournal.clojure-mode","js/nextjournal.clojure-mode.extensions","js/nextjournal.clojure-mode.extensions.eval-region","js/nextjournal.clojure-mode.extensions.eval-region.modifier-effect","nextjournal.clojure-mode.extensions.eval-region/modifier-effect","js/module$node_modules$$codemirror$state$dist$index_cjs.StateEffect","js/nextjournal.clojure-mode.extensions.eval-region.modifier-field","nextjournal.clojure-mode.extensions.eval-region/modifier-field","js/module$node_modules$$codemirror$state$dist$index_cjs.StateField","cljs.core/constantly","value","tr","G__52769","p1__52768#","cljs.core.filter","obj52770","k52771","obj52772","nextjournal.clojure-mode.extensions.eval-region/get-modifier-field","p__52773","map__52774","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","obj52776","k52777","obj52778","obj52779","k52780","obj52781","nextjournal.clojure-mode.extensions.eval-region/set-modifier-field!","view","dispatch","G__52782","p__52783","map__52784","obj52786","k52787","obj52788","obj52789","k52790","obj52791","nextjournal.clojure-mode.extensions.eval-region/mark","spec","to","js/module$node_modules$$codemirror$view$dist$index_cjs.Decoration","nextjournal.clojure-mode.extensions.eval-region/single-mark","range","js/nextjournal.clojure-mode.extensions.eval-region.mark-spec","nextjournal.clojure-mode.extensions.eval-region/mark-spec","js/nextjournal.clojure-mode.extensions.eval-region.mark-spec-highlight","nextjournal.clojure-mode.extensions.eval-region/mark-spec-highlight","nextjournal.clojure-mode.extensions.eval-region/cursor-range","js/nextjournal.clojure-mode.extensions.eval-region.region-field","nextjournal.clojure-mode.extensions.eval-region/region-field","p__52793","map__52794","obj52796","k52797","obj52798","_value","map__52799","cljs.core/--destructure-map","cljs.core.get","Alt","Shift","Enter","temp__5752__auto__","and__4221__auto__","p1__52792#","nextjournal.clojure-mode.util/guard","cljs.core/not","obj52800","k52801","obj52802","nextjournal.clojure-mode.extensions.eval-region/get-region-field","nextjournal.clojure-mode.extensions.eval-region/current-range","G__52804","obj__50995__auto__","f__50996__auto__","p1__52803#","obj52805","k52806","obj52807","nextjournal.clojure-mode.extensions.eval-region/modifier-extension","modifier","handle-enter","p__52808","map__52809","obj52811","k52812","obj52813","cljs.core.assoc","handle-key-event","p__52814","p__52815","map__52816","obj52818","k52819","obj52820","obj52821","k52822","obj52823","obj52824","k52825","obj52826","obj52827","k52828","obj52829","obj52830","k52831","obj52832","map__52833","obj52835","k52836","obj52837","event","altKey","shiftKey","metaKey","controlKey","type","prev","next","G__52838","js/module$node_modules$w3c_keyname$index_cjs.keyName","cljs.core.not_EQ_","handle-backspace","p__52839","map__52840","obj52842","k52843","obj52844","obj52845","k52846","obj52847","map__52848","obj52850","k52851","obj52852","obj52853","k52854","obj52855","G__52856","nextjournal.clojure-mode.util/user-event-annotation","js/module$node_modules$$codemirror$view$dist$index_cjs.keymap","js/module$node_modules$$codemirror$view$dist$index_cjs.EditorView","p__52857","map__52858","nextjournal.clojure-mode.extensions.eval-region/extension","nextjournal.clojure-mode.extensions.eval-region/cursor-node-string","G__52859","nextjournal.clojure-mode.util/range-str","clojure.string/blank?","nextjournal.clojure-mode.extensions.eval-region/top-level-string","G__52860"],"sourcesContent":["(ns nextjournal.clojure-mode.extensions.eval-region\n  (:require\n   [\"@codemirror/state\" :as state :refer [StateEffect StateField]]\n   [\"@codemirror/view\" :as view :refer [EditorView Decoration keymap]]\n   [\"w3c-keyname\" :refer [keyName]]\n   [applied-science.js-interop :as j]\n   [nextjournal.clojure-mode.util :as u]\n   [nextjournal.clojure-mode.node :as n]\n   [clojure.string :as str]))\n\n(defn uppermost-edge-here\n  \"Returns node or its highest ancestor that starts or ends at the cursor position.\"\n  [pos node]\n  (or (->> (iterate n/up node)\n           (take-while (every-pred (complement n/top?)\n                                   #(or (= pos (n/end %) (n/end node))\n                                        (= pos (n/start %) (n/start node)))))\n           (last))\n      node))\n\n(defn main-selection [state]\n  (-> (j/call-in state [:selection :asSingle])\n      (j/get-in [:ranges 0])))\n\n(defn node-at-cursor\n  ([state] (node-at-cursor state (j/get (main-selection state) :from)))\n  ([^js state from]\n   (some->> (n/nearest-touching state from -1)\n            (#(when (or (n/terminal-type? (n/type %))\n                        (<= (n/start %) from)\n                        (<= (n/end %) from))\n                (cond-> %\n                  (or (n/top? %)\n                      (and (not (n/terminal-type? (n/type %)))\n                           (< (n/start %) from (n/end %))))\n                  (-> (n/children from -1) first))))\n            (uppermost-edge-here from)\n            (n/balanced-range state))))\n\n(defn top-level-node [state]\n  (->> (n/nearest-touching state (j/get (main-selection state) :from) -1)\n       (iterate n/up)\n       (take-while (every-pred identity (complement n/top?)))\n       last))\n\n;; Modifier field\n(defonce modifier-effect (.define StateEffect))\n(defonce modifier-field\n         (.define StateField\n                  (j/lit {:create (constantly {})\n                          :update (fn [value ^js tr]\n                                    (or (some-> (first (filter #(.is ^js % modifier-effect) (.-effects tr)))\n                                                (j/get :value))\n                                        value))})))\n\n(defn get-modifier-field [^js state] (.field state modifier-field))\n\n(j/defn set-modifier-field! [^:js {:as view :keys [dispatch state]} value]\n  (dispatch #js{:effects (.of modifier-effect value)}))\n\n(j/defn mark [spec ^:js {:keys [from to]}]\n  (-> (.mark Decoration spec)\n      (.range from to)))\n\n(defn single-mark [spec range]\n  (.set Decoration #js[(mark spec range)]))\n\n(defonce mark-spec (j/lit {:attributes {:style \"background-color: rgba(0, 243, 255, 0.14);\"}}))\n(defonce mark-spec-highlight (j/lit {:attributes {:style \"background-color: rgba(0, 243, 255, 0.35);\"}}))\n\n(defn cursor-range [^js state]\n  (if (.. state -selection -main -empty)\n    (node-at-cursor state)\n    (.. state -selection -main)))\n\n(defonce region-field\n  (.define StateField\n           (j/lit\n            {:create  (constantly (.-none Decoration))\n             :update  (j/fn [_value ^:js {:keys [state]}]\n                        (let [{:strs [Alt Shift Enter]} (get-modifier-field state)\n                              spec (if Enter mark-spec-highlight mark-spec)]\n                          (if-let [range (cond (and Alt Shift) (top-level-node state)\n                                               Alt (or (u/guard (main-selection state)\n                                                                #(not (j/get % :empty)))\n                                                       (cursor-range state)))]\n                            (single-mark spec range)\n                            (.-none Decoration))))})))\n\n\n(defn get-region-field [^js state] (.field state region-field))\n\n(defn current-range [^js state]\n  (or (some-> (get-region-field state)\n              (j/call :iter)\n              (u/guard #(j/get % :value)))\n      (.. state -selection -main)))\n\n(defn modifier-extension\n  \"Maintains modifier-state-field, containing a map of {<modifier> true}, including Enter.\"\n  [modifier]\n  (let [handle-enter (j/fn handle-enter [^:js {:as view :keys [state]}]\n                       (set-modifier-field! view (assoc (get-modifier-field state) \"Enter\" true))\n                       nil)\n        handle-key-event (j/fn [^:js {:as event :keys [altKey shiftKey metaKey controlKey type]}\n                                ^:js {:as view :keys [state]}]\n                           (let [prev (get-modifier-field state)\n                                 next (cond-> {}\n                                        altKey (assoc \"Alt\" true)\n                                        shiftKey (assoc \"Shift\" true)\n                                        metaKey (assoc \"Meta\" true)\n                                        controlKey (assoc \"Control\" true)\n                                        (and (= \"keydown\" type)\n                                             (= \"Enter\" (keyName event)))\n                                        (assoc \"Enter\" true))]\n                             (when (not= prev next)\n                               (set-modifier-field! view next))))\n        handle-backspace (j/fn [^:js {:as view :keys [state dispatch]}]\n                           (j/let [^:js {:keys [from to]} (current-range state)]\n                             (when (not= from to)\n                               (dispatch (j/lit {:changes {:from from :to to :insert \"\"}\n                                                 :annotations (u/user-event-annotation \"delete\")})))\n                             true))]\n    #js[modifier-field\n        (.of keymap\n             (j/lit [{:key   (str modifier \"-Enter\")\n                      :shift handle-enter\n                      :run   handle-enter}\n                     {:key (str modifier \"-Backspace\")\n                      :run handle-backspace\n                      :shift handle-backspace}]))\n        (.domEventHandlers view/EditorView\n                           #js{:keydown handle-key-event\n                               :keyup   handle-key-event})]))\n\n(defn extension [{:keys [modifier]\n                  :or   {modifier \"Alt\"}}]\n  #js[(modifier-extension modifier)\n      region-field\n      (.. EditorView -decorations (from region-field))])\n\n(defn cursor-node-string [^js state]\n  (u/guard (some->> (node-at-cursor state)\n                    (u/range-str state))\n           (complement str/blank?)))\n\n(defn top-level-string [^js state]\n  (u/guard (some->> (top-level-node state)\n                    (u/range-str state))\n           (complement str/blank?)))\n"]}