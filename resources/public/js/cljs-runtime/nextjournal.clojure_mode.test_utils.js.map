{"version":3,"sources":["nextjournal/clojure_mode/test_utils.cljs"],"mappings":"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","names":["nextjournal.clojure-mode.test-utils/make-state","extensions","doc","vec__52269","cljs.core.nth","ranges","cljs.core/re-seq","cljs.core.reduce","p__52272","vec__52273","match","cljs.core._EQ_","cljs.core.conj","js/module$node_modules$$codemirror$state$dist$index_cjs.EditorSelection","clojure.string/starts-with?","cljs.core.subs","cljs.core/count","js/module$node_modules$$codemirror$state$dist$index_cjs.EditorState","cljs.core/seq","cljs.core/to-array","js/undefined","G__52279","array52284","nextjournal.clojure-mode.test-utils/state-str","state","cljs.core/reverse","p__52288","map__52290","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","obj52292","k52293","obj52294","applied-science.js-interop.impl/in?*","obj52295","k52296","obj52298","obj52300","k52301","obj52302","empty","from","to","nextjournal.clojure-mode.test-utils/apply-cmd","cmd","cljs.core/deref","!tr","cljs.core.atom","_","G__52333","p1__52318#","cljs.core/reset!","tr","obj52337","k52338","obj52339","js/Error","nextjournal.clojure-mode.test-utils/apply-f","cljs.core/array?","cljs.core/fn?"],"sourcesContent":["(ns nextjournal.clojure-mode.test-utils\n  (:require [\"@codemirror/state\" :as cm-state\n             :refer [EditorState EditorSelection Extension StateCommand\n                     ChangeSet ChangeDesc TransactionSpec StrictTransactionSpec]]\n            [applied-science.js-interop :as j]\n            [clojure.string :as str]\n            [nextjournal.clojure-mode.extensions.formatting :as format]))\n\n;; (de)serialize cursors| and <selections> for testing\n\n(defn make-state [extensions doc]\n  (let [[doc ranges] (->> (re-seq #\"\\||<[^>]*?>|[^<>|]+\" doc)\n                          (reduce (fn [[^string doc ranges] match]\n                                    (cond (= match \"|\")\n                                          [doc (conj ranges (.cursor EditorSelection (count doc)))]\n\n                                          (str/starts-with? match \"<\")\n                                          [(str doc (subs match 1 (dec (count match))))\n                                           (conj ranges (.range EditorSelection\n                                                                (count doc)\n                                                                (+ (count doc) (- (count match) 2))))]\n                                          :else\n                                          [(str doc match) ranges])) [\"\" []]))]\n    (.create EditorState\n             #js{:doc doc\n                 :selection (if (seq ranges)\n                              (.create EditorSelection (to-array ranges))\n                              js/undefined)\n                 :extensions (cond-> #js[(.. EditorState -allowMultipleSelections (of true))]\n                               extensions\n                               (j/push! extensions))})))\n\n(defn state-str [^js state]\n  (let [doc (str (.-doc state))]\n    (->> (.. state -selection -ranges)\n         reverse\n         (reduce (j/fn [doc ^:js {:keys [empty from to]}]\n                   (if empty\n                     (str (subs doc 0 from) \"|\" (subs doc from))\n                     (str (subs doc 0 from) \"<\" (subs doc from to) \">\" (subs doc to)))) doc))))\n\n(comment\n (-> (make-state #js[] \"<a>b|c<d\\n>a<b>c|\")\n     (state-str)\n     (= \"<a>b|c<d\\n>a<b>c|\"))\n\n )\n\n(defn apply-cmd [extensions cmd doc]\n  (let [state (make-state extensions doc)\n        !tr (atom nil)\n        _ (cmd #js{:state state\n                   :dispatch #(reset! !tr %)})\n        tr @!tr]\n    (state-str (j/get tr :state))))\n\n(defn apply-f [extensions cmd doc]\n  {:pre [(array? extensions)\n         (fn? cmd)\n         (string? doc)]}\n  (let [state (make-state extensions doc)\n        tr (cmd state)]\n    (state-str (if tr (.-state tr) state))))\n"]}