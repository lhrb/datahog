{"version":3,"sources":["nextjournal/clojure_mode/util.cljs"],"mappings":"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","names":["nextjournal.clojure-mode.util/user-event-annotation","event-name","js/module$node_modules$$codemirror$state$dist$index_cjs.Transaction","nextjournal.clojure-mode.util/get-user-event-annotation","tr","nextjournal.clojure-mode.util/guard","x","f","nextjournal.clojure-mode.util/from-to","p1","p2","nextjournal.clojure-mode.util/dispatch-some","view","var_args","G__51403","nextjournal.clojure-mode.util/insertion","js/Error","from","s","nextjournal.clojure_mode.util.insertion","to","G__51410","nextjournal.clojure-mode.util/deletion","nextjournal.clojure_mode.util.deletion","x__4306__auto__","y__4307__auto__","cljs.core._EQ_","nextjournal.clojure-mode.util/line-content-at","state","parent__51019__auto__","f__51020__auto__","obj__50995__auto__","f__50996__auto__","nextjournal.clojure-mode.util/map-cursor","original-range","update-map","cljs.core/map?","map__51438","cljs.core/--destructure-map","cljs.core.get","mapped","cursor","from-to","range","changes","change-desc","cljs.core/clj->js","G__51451","or__4223__auto__","nextjournal.clojure-mode.selections/cursor","nextjournal.clojure_mode.selections.range","obj51455","G__51458","nextjournal.clojure-mode.util/update-ranges","nextjournal.clojure_mode.util.update_ranges","tr-specs","temp__5758__auto__","result","p1__51456#","applied_science.js_interop.extend_BANG_","nextjournal.clojure-mode.util/dispatch-changes","dispatch","G__51470","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","nextjournal.clojure-mode.util/update-lines","p__51504","vec__51505","map__51508","cljs.core.nth","seq51484","G__51486","cljs.core/first","cljs.core/next","G__51487","self__4816__auto__","spec","iterator","from-pos","line-num","map__51532","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","obj51538","k51539","obj51540","applied-science.js-interop.impl/in?*","js/undefined","obj51541","k51542","obj51544","obj51545","k51546","obj51547","done","lineBreak","value","temp__5752__auto__","change","and__4221__auto__","cljs.core/not","array51551","G__51553","nextjournal.clojure-mode.util/update-selected-lines","at-line","cljs.core.atom","doc","p__51558","map__51560","obj51562","k51563","obj51564","obj51567","k51568","obj51569","obj51570","k51571","obj51572","obj51575","k51576","obj51577","anchor","head","line","map__51594","obj51601","k51602","obj51607","obj51608","k51609","obj51610","line-number","line-to","cljs.core/deref","cljs.core/reset!","next-line","p1__51556#","change-set","js/module$node_modules$$codemirror$state$dist$index_cjs.EditorSelection","p__51627","map__51647","map__51649","obj51666","k51667","obj51668","obj51671","k51672","obj51673","obj51674","k51675","obj51676","obj51683","k51684","obj51686","obj51692","k51693","obj51698","nextjournal.clojure-mode.util/iter-changed-lines","effects","selection","next-changes","_","from-a","to-a","from-b","to-b","inserted","map__51713","obj51736","k51737","obj51742","obj51748","k51749","obj51751","next-changeset","cljs.core/seq","obj51798","out51799","k__50868__auto__","obj51802","obj51806","obj51807","obj51793","obj51810","G__51788","obj51813","obj51814","obj51817","obj51818","js/module$node_modules$$codemirror$state$dist$index_cjs.StateEffect","p__51822","map__51823","map__51824","obj51826","k51827","obj51828","obj51830","k51831","obj51832","nextjournal.clojure-mode.util/something-selected?","ranges","p1__51821#","cljs.core/every?","p__51833","map__51834","obj51836","k51837","obj51838","obj51839","k51840","obj51841","nextjournal.clojure-mode.util/range-str"],"sourcesContent":["(ns nextjournal.clojure-mode.util\n  (:require [applied-science.js-interop :as j]\n            [\"@codemirror/state\" :refer [EditorSelection\n                                         ChangeSet\n                                         ChangeDesc\n                                         TransactionSpec\n                                         StrictTransactionSpec\n                                         StateEffect\n                                         Transaction]]\n            [nextjournal.clojure-mode.selections :as sel]))\n\n(defn user-event-annotation [event-name]\n  (.. Transaction -userEvent (of event-name)))\n\n(defn get-user-event-annotation [tr]\n  (.annotation tr (.-userEvent Transaction)))\n\n(defn guard [x f] (when (f x) x))\n\n(defn ^js from-to [p1 p2]\n  (if (> p1 p2) #js{:from p2 :to p1} #js{:from p1 :to p2}))\n\n(defn dispatch-some\n  \"If passed a transaction, dispatch to view and return true to stop processing commands.\"\n  [^js view tr]\n  (if tr\n    (do (.dispatch view tr)\n        true)\n    false))\n\n(defn insertion\n  \"Returns a `change` that inserts string `s` at position `from` and moves cursor to end of insertion.\"\n  ([from s] (insertion from from s))\n  ([from to ^string s]\n   {:changes {:insert s\n              :from   from\n              :to     to}\n    :cursor  (+ from (count s))}))\n\n(defn deletion\n  ([from] (deletion (max 0 (dec from)) from))\n  ([from to]\n   (let [from (if (= from to)\n                (max 0 (dec from))\n                from)]\n     {:cursor  from\n      :changes {:from from :to to}})))\n\n(defn line-content-at [state from]\n  (-> state\n      (j/call-in [:doc :lineAt] from)\n      (j/call :slice)))\n\n(defn map-cursor [^js original-range ^js state update-map]\n  {:pre [(map? update-map)]}\n  (let [{:keys [cursor/mapped\n                cursor\n                from-to\n                range\n                changes]} (guard update-map map?)\n        change-desc (when changes (.changes state (clj->js changes)))]\n    (cond-> #js{:range (or range\n                           (cond mapped (sel/cursor (.mapPos change-desc mapped))\n                                 cursor (sel/cursor cursor)\n                                 from-to (sel/range (from-to 0) (from-to 1)))\n                           original-range)}\n      change-desc (j/!set :changes change-desc))))\n\n(defn update-ranges\n  \"Applies `f` to each range in `state` (see `changeByRange`)\"\n  ([state f]\n   (update-ranges state nil f))\n  ([^js state tr-specs f ]\n   (->> (fn [range]\n          (or (when-some [result (f range)]\n                (map-cursor range state result))\n              #js{:range range}))\n        (.changeByRange state)\n        (#(j/extend! % tr-specs))\n        (.update state))))\n\n(defn dispatch-changes [^js state dispatch ^js changes]\n  (when-not (.-empty changes)\n    (dispatch (.update state #js{:changes changes}))))\n\n(defn update-lines\n  [^js state f & [{:keys [from to spec]\n                   :or {from 0}}]]\n  (let [iterator (.. state -doc iter)]\n    (loop [result (.next iterator)\n           changes #js[]\n           from-pos from\n           line-num 1]\n      (j/let [^:js {:keys [done lineBreak ^string value]} result]\n        (if (or done\n                (> from to))\n          (.update state (j/extend! #js{:changes (.changes state changes)} spec))\n          (recur (.next iterator)\n                 (if-let [change (and (not lineBreak) (f from-pos value line-num))]\n                   (j/push! changes change)\n                   changes)\n                 (+ from-pos (count value))\n                 (cond-> line-num lineBreak inc)))))))\n\n(defn update-selected-lines\n  \"`f` will be called for each selected line with args [line, changes-array, range]\n   and should *mutate* changes-array\"\n  [^js state f]\n  (let [at-line (atom -1)\n        doc (.-doc state)]\n    (->> (j/fn [^:js {:as range :keys [from to anchor head]}]\n           (j/let [changes #js[]]\n             (loop [^js line (.lineAt doc from)]\n               (j/let [^:js {line-number :number line-to :to} line]\n                 (when (> (.-number line) @at-line)\n                   (reset! at-line line-number)\n                   (f line changes range))\n                 (if-let [next-line (and (> to line-to)\n                                         (guard (.lineAt doc (inc line-to))\n                                                #(> (.-number ^js %) line-number)))]\n                   (recur next-line)\n                   (let [^js change-set (.changes state changes)]\n                     #js{:changes changes\n                         :range (.range EditorSelection\n                                        (.mapPos change-set anchor 1)\n                                        (.mapPos change-set head 1))}))))))\n         (.changeByRange state))))\n\n\n(j/defn iter-changed-lines\n  \"`f` will be called for each changed line with args [line, changes-array]\n   and should *mutate* changes-array. Selections will be mapped through the resulting changeset.\"\n  [^:js {:as tr\n         :keys [^js changes ^js effects selection]\n         {:as ^js state :keys [^js doc]} :state} f]\n  (let [at-line (atom -1)\n        next-changes #js[]\n        _ (.iterChanges\n           changes\n           (fn [from-a to-a from-b to-b inserted]\n             (j/let [^:js {:as line line-number :number line-to :to} (.lineAt doc from-b)]\n               (loop [line line]\n                 (when (> line-number @at-line)\n                   (reset! at-line line-number)\n                   (f line next-changes))\n                 (when-not (<= to-b line-to)\n                   (let [next-line (.lineAt doc (inc line-to))]\n                     (when (and next-line (> (.-number next-line) (.-number line)))\n                       (recur next-line))))))))\n        next-changeset (.changes state next-changes)]\n    (if (seq next-changes)\n      (-> (j/select-keys tr [:annotations\n                             :scrollIntoView\n                             :reconfigure])\n          (j/assoc! :changes (.compose changes next-changeset))\n          (cond->\n            selection\n            (j/assoc! :selection (.. state -selection (map next-changeset)))\n            effects\n            (j/assoc! :effects (.mapEffects StateEffect effects next-changeset))))\n      tr)))\n\n(j/defn something-selected? [^:js {{:keys [ranges]} :selection}]\n  (not (every? #(.-empty ^js %) ranges)))\n\n(j/defn range-str [state ^:js {:as selection :keys [from to]}]\n  (str (j/call-in state [:doc :slice] from to)))\n"]}