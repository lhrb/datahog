{
"version":3,
"file":"module$node_modules$lezer_generator$dist$index_cjs.js",
"lineCount":222,
"mappings":"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",
"sources":["node_modules/lezer-generator/dist/index.cjs"],
"sourcesContent":["shadow$provide[\"module$node_modules$lezer_generator$dist$index_cjs\"] = function(global,require,module,exports) {\nvar process = require('process');\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar lezer = require('lezer');\n\nclass Node {\n    constructor(start) {\n        this.start = start;\n    }\n}\nclass GrammarDeclaration extends Node {\n    constructor(start, rules, topRules, tokens, context, externalTokens, externalSpecializers, precedences, mainSkip, scopedSkip, dialects, grammars, externalProps, autoDelim) {\n        super(start);\n        this.rules = rules;\n        this.topRules = topRules;\n        this.tokens = tokens;\n        this.context = context;\n        this.externalTokens = externalTokens;\n        this.externalSpecializers = externalSpecializers;\n        this.precedences = precedences;\n        this.mainSkip = mainSkip;\n        this.scopedSkip = scopedSkip;\n        this.dialects = dialects;\n        this.grammars = grammars;\n        this.externalProps = externalProps;\n        this.autoDelim = autoDelim;\n    }\n    toString() { return Object.values(this.rules).join(\"\\n\"); }\n}\nclass RuleDeclaration extends Node {\n    constructor(start, id, props, params, expr) {\n        super(start);\n        this.id = id;\n        this.props = props;\n        this.params = params;\n        this.expr = expr;\n    }\n    toString() {\n        return this.id.name + (this.params.length ? `<${this.params.join()}>` : \"\") + \" -> \" + this.expr;\n    }\n}\nclass PrecDeclaration extends Node {\n    constructor(start, items) {\n        super(start);\n        this.items = items;\n    }\n}\nclass TokenPrecDeclaration extends Node {\n    constructor(start, items) {\n        super(start);\n        this.items = items;\n    }\n}\nclass TokenConflictDeclaration extends Node {\n    constructor(start, a, b) {\n        super(start);\n        this.a = a;\n        this.b = b;\n    }\n}\nclass TokenDeclaration extends Node {\n    constructor(start, precedences, conflicts, rules, literals) {\n        super(start);\n        this.precedences = precedences;\n        this.conflicts = conflicts;\n        this.rules = rules;\n        this.literals = literals;\n    }\n}\nclass LiteralDeclaration extends Node {\n    constructor(start, literal, props) {\n        super(start);\n        this.literal = literal;\n        this.props = props;\n    }\n}\nclass ContextDeclaration extends Node {\n    constructor(start, id, source) {\n        super(start);\n        this.id = id;\n        this.source = source;\n    }\n}\nclass ExternalTokenDeclaration extends Node {\n    constructor(start, id, source, tokens) {\n        super(start);\n        this.id = id;\n        this.source = source;\n        this.tokens = tokens;\n    }\n}\nclass ExternalSpecializeDeclaration extends Node {\n    constructor(start, type, token, id, source, tokens) {\n        super(start);\n        this.type = type;\n        this.token = token;\n        this.id = id;\n        this.source = source;\n        this.tokens = tokens;\n    }\n}\nclass ExternalGrammarDeclaration extends Node {\n    constructor(start, id, externalID, source) {\n        super(start);\n        this.id = id;\n        this.externalID = externalID;\n        this.source = source;\n    }\n}\nclass ExternalPropDeclaration extends Node {\n    constructor(start, id, externalID, source) {\n        super(start);\n        this.id = id;\n        this.externalID = externalID;\n        this.source = source;\n    }\n}\nclass Identifier extends Node {\n    constructor(start, name) {\n        super(start);\n        this.name = name;\n    }\n    toString() { return this.name; }\n}\nclass Expression extends Node {\n    walk(f) { return f(this); }\n    eq(_other) { return false; }\n}\nExpression.prototype.prec = 10;\nclass NameExpression extends Expression {\n    constructor(start, namespace, id, args) {\n        super(start);\n        this.namespace = namespace;\n        this.id = id;\n        this.args = args;\n    }\n    toString() { return this.id.name + (this.args.length ? `<${this.args.join()}>` : \"\"); }\n    eq(other) {\n        return (this.namespace ? other.namespace != null && other.namespace.name == this.namespace.name : !other.namespace) &&\n            this.id.name == other.id.name && exprsEq(this.args, other.args);\n    }\n    walk(f) {\n        let args = walkExprs(this.args, f);\n        return f(args == this.args ? this : new NameExpression(this.start, this.namespace, this.id, args));\n    }\n}\nclass SpecializeExpression extends Expression {\n    constructor(start, type, props, token, content) {\n        super(start);\n        this.type = type;\n        this.props = props;\n        this.token = token;\n        this.content = content;\n    }\n    toString() { return `@${this.type}[${this.props.join(\",\")}]<${this.token}, ${this.content}>`; }\n    eq(other) {\n        return this.type == other.type && Prop.eqProps(this.props, other.props) && exprEq(this.token, other.token) &&\n            exprEq(this.content, other.content);\n    }\n    walk(f) {\n        let token = this.token.walk(f), content = this.content.walk(f);\n        return f(token == this.token && content == this.content ? this : new SpecializeExpression(this.start, this.type, this.props, token, content));\n    }\n}\nclass InlineRuleExpression extends Expression {\n    constructor(start, rule) {\n        super(start);\n        this.rule = rule;\n    }\n    toString() {\n        let rule = this.rule;\n        return `${rule.id}${rule.props.length ? `[${rule.props.join(\",\")}]` : \"\"} { ${rule.expr} }`;\n    }\n    eq(other) {\n        let rule = this.rule, oRule = other.rule;\n        return exprEq(rule.expr, oRule.expr) && rule.id.name == oRule.id.name && Prop.eqProps(rule.props, oRule.props);\n    }\n    walk(f) {\n        let rule = this.rule, expr = rule.expr.walk(f);\n        return f(expr == rule.expr ? this :\n            new InlineRuleExpression(this.start, new RuleDeclaration(rule.start, rule.id, rule.props, [], expr)));\n    }\n}\nclass ChoiceExpression extends Expression {\n    constructor(start, exprs) {\n        super(start);\n        this.exprs = exprs;\n    }\n    toString() { return this.exprs.map(e => maybeParens(e, this)).join(\" | \"); }\n    eq(other) {\n        return exprsEq(this.exprs, other.exprs);\n    }\n    walk(f) {\n        let exprs = walkExprs(this.exprs, f);\n        return f(exprs == this.exprs ? this : new ChoiceExpression(this.start, exprs));\n    }\n}\nChoiceExpression.prototype.prec = 1;\nclass SequenceExpression extends Expression {\n    constructor(start, exprs, markers) {\n        super(start);\n        this.exprs = exprs;\n        this.markers = markers;\n    }\n    toString() { return this.exprs.map(e => maybeParens(e, this)).join(\" \"); }\n    eq(other) {\n        return exprsEq(this.exprs, other.exprs) && this.markers.every((m, i) => {\n            let om = other.markers[i];\n            return m.length == om.length && m.every((x, i) => x.eq(om[i]));\n        });\n    }\n    walk(f) {\n        let exprs = walkExprs(this.exprs, f);\n        return f(exprs == this.exprs ? this : new SequenceExpression(this.start, exprs, this.markers));\n    }\n}\nSequenceExpression.prototype.prec = 2;\nclass ConflictMarker extends Node {\n    constructor(start, id, type) {\n        super(start);\n        this.id = id;\n        this.type = type;\n    }\n    toString() { return (this.type == \"ambig\" ? \"~\" : \"!\") + this.id.name; }\n    eq(other) { return this.id.name == other.id.name && this.type == other.type; }\n}\nclass RepeatExpression extends Expression {\n    constructor(start, expr, kind) {\n        super(start);\n        this.expr = expr;\n        this.kind = kind;\n    }\n    toString() { return maybeParens(this.expr, this) + this.kind; }\n    eq(other) {\n        return exprEq(this.expr, other.expr) && this.kind == other.kind;\n    }\n    walk(f) {\n        let expr = this.expr.walk(f);\n        return f(expr == this.expr ? this : new RepeatExpression(this.start, expr, this.kind));\n    }\n}\nRepeatExpression.prototype.prec = 3;\nclass LiteralExpression extends Expression {\n    // value.length is always > 0\n    constructor(start, value) {\n        super(start);\n        this.value = value;\n    }\n    toString() { return JSON.stringify(this.value); }\n    eq(other) { return this.value == other.value; }\n}\nclass SetExpression extends Expression {\n    constructor(start, ranges, inverted) {\n        super(start);\n        this.ranges = ranges;\n        this.inverted = inverted;\n    }\n    toString() {\n        return `[${this.inverted ? \"^\" : \"\"}${this.ranges.map(([a, b]) => {\n            return String.fromCodePoint(a) + (b == a + 1 ? \"\" : \"-\" + String.fromCodePoint(b));\n        })}]`;\n    }\n    eq(other) {\n        return this.inverted == other.inverted && this.ranges.length == other.ranges.length &&\n            this.ranges.every(([a, b], i) => { let [x, y] = other.ranges[i]; return a == x && b == y; });\n    }\n}\nclass AnyExpression extends Expression {\n    constructor(start) {\n        super(start);\n    }\n    toString() { return \"_\"; }\n    eq() { return true; }\n}\nfunction walkExprs(exprs, f) {\n    let result = null;\n    for (let i = 0; i < exprs.length; i++) {\n        let expr = exprs[i].walk(f);\n        if (expr != exprs[i] && !result)\n            result = exprs.slice(0, i);\n        if (result)\n            result.push(expr);\n    }\n    return result || exprs;\n}\nfunction exprEq(a, b) {\n    return a.constructor == b.constructor && a.eq(b);\n}\nfunction exprsEq(a, b) {\n    return a.length == b.length && a.every((e, i) => exprEq(e, b[i]));\n}\nclass Prop extends Node {\n    constructor(start, at, name, value) {\n        super(start);\n        this.at = at;\n        this.name = name;\n        this.value = value;\n    }\n    eq(other) {\n        return this.name == other.name && this.value.length == other.value.length &&\n            this.value.every((v, i) => v.value == other.value[i].value && v.name == other.value[i].name);\n    }\n    toString() {\n        let result = (this.at ? \"@\" : \"\") + this.name;\n        if (this.value.length) {\n            result += \"=\";\n            for (let { name, value } of this.value)\n                result += name ? `{${name}}` : /[^\\w-]/.test(value) ? JSON.stringify(value) : value;\n        }\n        return result;\n    }\n    static eqProps(a, b) {\n        return a.length == b.length && a.every((p, i) => p.eq(b[i]));\n    }\n}\nclass PropPart extends Node {\n    constructor(start, value, name) {\n        super(start);\n        this.value = value;\n        this.name = name;\n    }\n}\nfunction maybeParens(node, parent) {\n    return node.prec < parent.prec ? \"(\" + node.toString() + \")\" : node.toString();\n}\n\n/// The type of error raised when the parser generator finds an issue.\nclass GenError extends Error {\n}\n\nfunction hasProps(props) {\n    for (let _p in props)\n        return true;\n    return false;\n}\nlet termHash = 0;\nclass Term {\n    constructor(name, flags, nodeName, props = {}) {\n        this.name = name;\n        this.flags = flags;\n        this.nodeName = nodeName;\n        this.props = props;\n        this.hash = ++termHash; // Used for sorting and hashing during parser generation\n        this.id = -1; // Assigned in a later stage, used in actual output\n        // Filled in only after the rules are simplified, used in automaton.ts\n        this.rules = [];\n    }\n    toString() { return this.name; }\n    get nodeType() { return this.top || this.nodeName != null || hasProps(this.props) || this.repeated; }\n    get terminal() { return (this.flags & 1 /* Terminal */) > 0; }\n    get eof() { return (this.flags & 4 /* Eof */) > 0; }\n    get error() { return \"error\" in this.props; }\n    get top() { return (this.flags & 2 /* Top */) > 0; }\n    get interesting() { return this.flags > 0 || this.nodeName != null; }\n    get repeated() { return (this.flags & 16 /* Repeated */) > 0; }\n    set preserve(value) { this.flags = value ? this.flags | 8 /* Preserve */ : this.flags & ~8 /* Preserve */; }\n    get preserve() { return (this.flags & 8 /* Preserve */) > 0; }\n    set inline(value) { this.flags = value ? this.flags | 32 /* Inline */ : this.flags & ~32 /* Inline */; }\n    get inline() { return (this.flags & 32 /* Inline */) > 0; }\n    cmp(other) { return this.hash - other.hash; }\n}\nclass TermSet {\n    constructor() {\n        this.terms = [];\n        // Map from term names to Term instances\n        this.names = Object.create(null);\n        this.tops = [];\n        this.eof = this.term(\"\u2404\", null, 1 /* Terminal */ | 4 /* Eof */);\n        this.error = this.term(\"\u26a0\", \"\u26a0\", 8 /* Preserve */);\n    }\n    term(name, nodeName, flags = 0, props = {}) {\n        let term = new Term(name, flags, nodeName, props);\n        this.terms.push(term);\n        this.names[name] = term;\n        return term;\n    }\n    makeTop(nodeName, props) {\n        const term = this.term(\"@top\", nodeName, 2 /* Top */, props);\n        this.tops.push(term);\n        return term;\n    }\n    makeTerminal(name, nodeName, props = {}) {\n        return this.term(name, nodeName, 1 /* Terminal */, props);\n    }\n    makeNonTerminal(name, nodeName, props = {}) {\n        return this.term(name, nodeName, 0, props);\n    }\n    makeRepeat(name) {\n        return this.term(name, null, 16 /* Repeated */);\n    }\n    uniqueName(name) {\n        for (let i = 0;; i++) {\n            let cur = i ? `${name}-${i}` : name;\n            if (!this.names[cur])\n                return cur;\n        }\n    }\n    finish(rules) {\n        for (let rule of rules)\n            rule.name.rules.push(rule);\n        this.terms = this.terms.filter(t => t.terminal || t.preserve || rules.some(r => r.name == t || r.parts.includes(t)));\n        let names = {};\n        let nodeTypes = [this.error];\n        this.error.id = 0 /* Err */;\n        let nextID = 0 /* Err */ + 1;\n        // Assign ids to terms that represent node types\n        for (let term of this.terms)\n            if (term.id < 0 && term.nodeType && !term.repeated) {\n                term.id = nextID++;\n                nodeTypes.push(term);\n            }\n        // Put all repeated terms after the regular node types\n        let minRepeatTerm = nextID;\n        for (let term of this.terms)\n            if (term.repeated) {\n                term.id = nextID++;\n                nodeTypes.push(term);\n            }\n        // Then comes the EOF term\n        this.eof.id = nextID++;\n        // And then the remaining (non-node, non-repeat) terms.\n        for (let term of this.terms) {\n            if (term.id < 0)\n                term.id = nextID++;\n            if (term.name)\n                names[term.id] = term.name;\n        }\n        if (nextID >= 0xfffe)\n            throw new GenError(\"Too many terms\");\n        return { nodeTypes, names, minRepeatTerm, maxTerm: nextID - 1 };\n    }\n}\nfunction cmpSet(a, b, cmp) {\n    if (a.length != b.length)\n        return a.length - b.length;\n    for (let i = 0; i < a.length; i++) {\n        let diff = cmp(a[i], b[i]);\n        if (diff)\n            return diff;\n    }\n    return 0;\n}\nconst none = [];\nclass Conflicts {\n    constructor(precedence, ambigGroups = none, cut = 0) {\n        this.precedence = precedence;\n        this.ambigGroups = ambigGroups;\n        this.cut = cut;\n    }\n    join(other) {\n        if (this == Conflicts.none || this == other)\n            return other;\n        if (other == Conflicts.none)\n            return this;\n        return new Conflicts(Math.max(this.precedence, other.precedence), union(this.ambigGroups, other.ambigGroups), Math.max(this.cut, other.cut));\n    }\n    cmp(other) {\n        return this.precedence - other.precedence || cmpSet(this.ambigGroups, other.ambigGroups, (a, b) => a < b ? -1 : a > b ? 1 : 0) ||\n            this.cut - other.cut;\n    }\n}\nConflicts.none = new Conflicts(0);\nfunction union(a, b) {\n    if (a.length == 0 || a == b)\n        return b;\n    if (b.length == 0)\n        return a;\n    let result = a.slice();\n    for (let value of b)\n        if (!a.includes(value))\n            result.push(value);\n    return result.sort();\n}\nlet ruleID = 0;\nclass Rule {\n    constructor(name, parts, conflicts, skip) {\n        this.name = name;\n        this.parts = parts;\n        this.conflicts = conflicts;\n        this.skip = skip;\n        this.id = ruleID++;\n    }\n    cmp(rule) {\n        return this.id - rule.id;\n    }\n    cmpNoName(rule) {\n        return this.parts.length - rule.parts.length ||\n            this.skip.hash - rule.skip.hash ||\n            this.parts.reduce((r, s, i) => r || s.cmp(rule.parts[i]), 0) ||\n            cmpSet(this.conflicts, rule.conflicts, (a, b) => a.cmp(b));\n    }\n    toString() {\n        return this.name + \" -> \" + this.parts.join(\" \");\n    }\n    get isRepeatWrap() {\n        return this.name.repeated && this.parts.length == 2 && this.parts[0] == this.name;\n    }\n    sameReduce(other) {\n        return this.name == other.name && this.parts.length == other.parts.length && this.isRepeatWrap == other.isRepeatWrap;\n    }\n}\n\nconst MAX_CHAR = 0xfffe;\nclass Edge {\n    constructor(from, to, target) {\n        this.from = from;\n        this.to = to;\n        this.target = target;\n    }\n    toString() {\n        return `-> ${this.target.id}[label=${JSON.stringify(this.from < 0 ? \"\u03b5\" : charFor(this.from) +\n            (this.to > this.from + 1 ? \"-\" + charFor(this.to - 1) : \"\"))}]`;\n    }\n}\nfunction charFor(n) {\n    return n > MAX_CHAR ? \"\u221e\" : n >= 0xd800 && n < 0xdfff ? \"\\\\u{\" + n.toString(16) + \"}\" : String.fromCharCode(n);\n}\nfunction minimize(states, start) {\n    let partition = Object.create(null);\n    let byAccepting = Object.create(null);\n    for (let state of states) {\n        let id = ids(state.accepting);\n        let group = byAccepting[id] || (byAccepting[id] = []);\n        group.push(state);\n        partition[state.id] = group;\n    }\n    for (;;) {\n        let split = false, newPartition = Object.create(null);\n        for (let state of states) {\n            if (newPartition[state.id])\n                continue;\n            let group = partition[state.id];\n            if (group.length == 1) {\n                newPartition[group[0].id] = group;\n                continue;\n            }\n            let parts = [];\n            groups: for (let state of group) {\n                for (let p of parts) {\n                    if (isEquivalent(state, p[0], partition)) {\n                        p.push(state);\n                        continue groups;\n                    }\n                }\n                parts.push([state]);\n            }\n            if (parts.length > 1)\n                split = true;\n            for (let p of parts)\n                for (let s of p)\n                    newPartition[s.id] = p;\n        }\n        if (!split)\n            return applyMinimization(states, start, partition);\n        partition = newPartition;\n    }\n}\nfunction isEquivalent(a, b, partition) {\n    if (a.edges.length != b.edges.length)\n        return false;\n    for (let i = 0; i < a.edges.length; i++) {\n        let eA = a.edges[i], eB = b.edges[i];\n        if (eA.from != eB.from || eA.to != eB.to || partition[eA.target.id] != partition[eB.target.id])\n            return false;\n    }\n    return true;\n}\nfunction applyMinimization(states, start, partition) {\n    for (let state of states) {\n        for (let i = 0; i < state.edges.length; i++) {\n            let edge = state.edges[i], target = partition[edge.target.id][0];\n            if (target != edge.target)\n                state.edges[i] = new Edge(edge.from, edge.to, target);\n        }\n    }\n    return partition[start.id][0];\n}\nlet stateID = 1;\nclass State {\n    constructor(accepting = [], id = stateID++) {\n        this.accepting = accepting;\n        this.id = id;\n        this.edges = [];\n    }\n    edge(from, to, target) {\n        this.edges.push(new Edge(from, to, target));\n    }\n    nullEdge(target) { this.edge(-1, -1, target); }\n    compile() {\n        let labeled = Object.create(null), localID = 0;\n        let startState = explore(this.closure().sort((a, b) => a.id - b.id));\n        return minimize(Object.values(labeled), startState);\n        function explore(states) {\n            let newState = labeled[ids(states)] =\n                new State(states.reduce((a, s) => union(a, s.accepting), []), localID++);\n            let out = [];\n            for (let state of states)\n                for (let edge of state.edges) {\n                    if (edge.from >= 0)\n                        out.push(edge);\n                }\n            let transitions = mergeEdges(out);\n            for (let merged of transitions) {\n                let targets = merged.targets.sort((a, b) => a.id - b.id);\n                newState.edge(merged.from, merged.to, labeled[ids(targets)] || explore(targets));\n            }\n            return newState;\n        }\n    }\n    closure() {\n        let result = [];\n        function explore(state) {\n            if (result.includes(state))\n                return;\n            // States with only epsilon edges and no accepting term that\n            // isn't also in the next states are left out to help reduce the\n            // number of unique state combinations\n            if (state.edges.some(e => e.from >= 0) ||\n                (state.accepting.length > 0 && !state.edges.some(e => sameSet(state.accepting, e.target.accepting))))\n                result.push(state);\n            for (let edge of state.edges)\n                if (edge.from < 0)\n                    explore(edge.target);\n        }\n        explore(this);\n        return result;\n    }\n    findConflicts(occurTogether) {\n        let conflicts = [], cycleTerms = this.cycleTerms();\n        function add(a, b, soft, aEdges, bEdges) {\n            if (a.id < b.id) {\n                [a, b] = [b, a];\n                soft = -soft;\n            }\n            let found = conflicts.find(c => c.a == a && c.b == b);\n            if (!found)\n                conflicts.push(new Conflict(a, b, soft, exampleFromEdges(aEdges), bEdges && exampleFromEdges(bEdges)));\n            else if (found.soft != soft)\n                found.soft = 0;\n        }\n        this.reachable((state, edges) => {\n            if (state.accepting.length == 0)\n                return;\n            for (let i = 0; i < state.accepting.length; i++)\n                for (let j = i + 1; j < state.accepting.length; j++)\n                    add(state.accepting[i], state.accepting[j], 0, edges);\n            state.reachable((s, es) => {\n                if (s != state)\n                    for (let term of s.accepting) {\n                        let hasCycle = cycleTerms.includes(term);\n                        for (let orig of state.accepting)\n                            if (term != orig)\n                                add(term, orig, hasCycle || cycleTerms.includes(orig) || !occurTogether(term, orig) ? 0 : 1, edges, edges.concat(es));\n                    }\n            });\n        });\n        return conflicts;\n    }\n    cycleTerms() {\n        let work = [];\n        this.reachable(state => {\n            for (let { target } of state.edges)\n                work.push(state, target);\n        });\n        let table = new Map;\n        let haveCycle = [];\n        for (let i = 0; i < work.length;) {\n            let from = work[i++], to = work[i++];\n            let entry = table.get(from);\n            if (!entry)\n                table.set(from, entry = []);\n            if (entry.includes(to))\n                continue;\n            if (from == to) {\n                if (!haveCycle.includes(from))\n                    haveCycle.push(from);\n            }\n            else {\n                for (let next of entry)\n                    work.push(from, next);\n                entry.push(to);\n            }\n        }\n        let result = [];\n        for (let state of haveCycle) {\n            for (let term of state.accepting) {\n                if (!result.includes(term))\n                    result.push(term);\n            }\n        }\n        return result;\n    }\n    reachable(f) {\n        let seen = [], edges = [];\n        (function explore(s) {\n            f(s, edges);\n            seen.push(s);\n            for (let edge of s.edges)\n                if (!seen.includes(edge.target)) {\n                    edges.push(edge);\n                    explore(edge.target);\n                    edges.pop();\n                }\n        })(this);\n    }\n    toString() {\n        let out = \"digraph {\\n\";\n        this.reachable(state => {\n            if (state.accepting.length)\n                out += `  ${state.id} [label=${JSON.stringify(state.accepting.join())}];\\n`;\n            for (let edge of state.edges)\n                out += `  ${state.id} ${edge};\\n`;\n        });\n        return out + \"}\";\n    }\n    // Tokenizer data is represented as a single flat array. This\n    // contains regions for each tokenizer state. Region offsets are\n    // used to identify states.\n    //\n    // Each state is laid out as:\n    //  - Token group mask\n    //  - Offset of the end of the accepting data\n    //  - Number of outgoing edges in the state\n    //  - Pairs of token masks and term ids that indicate the accepting\n    //    states, sorted by precedence\n    //  - Triples for the edges: each with a low and high bound and the\n    //    offset of the next state.\n    toArray(groupMasks, precedence) {\n        let offsets = []; // Used to 'link' the states after building the arrays\n        let data = [];\n        this.reachable(state => {\n            let start = data.length;\n            let acceptEnd = start + 3 + state.accepting.length * 2;\n            offsets[state.id] = start;\n            data.push(state.stateMask(groupMasks), acceptEnd, state.edges.length);\n            state.accepting.sort((a, b) => precedence.indexOf(a.id) - precedence.indexOf(b.id));\n            for (let term of state.accepting)\n                data.push(term.id, groupMasks[term.id] || 0xffff);\n            for (let edge of state.edges)\n                data.push(edge.from, edge.to, -edge.target.id - 1);\n        });\n        // Replace negative numbers with resolved state offsets\n        for (let i = 0; i < data.length; i++)\n            if (data[i] < 0)\n                data[i] = offsets[-data[i] - 1];\n        if (data.length > 2 ** 16)\n            throw new GenError(\"Tokenizer tables too big to represent with 16-bit offsets.\");\n        return Uint16Array.from(data);\n    }\n    stateMask(groupMasks) {\n        let mask = 0;\n        this.reachable(state => {\n            for (let term of state.accepting)\n                mask |= (groupMasks[term.id] || 0xffff);\n        });\n        return mask;\n    }\n}\nclass Conflict {\n    constructor(a, b, \n    // Conflicts between two non-cyclic tokens are marked as\n    // 'soft', with a negative number if a is shorter than\n    // b, and a positive if b is shorter than a.\n    soft, exampleA, exampleB) {\n        this.a = a;\n        this.b = b;\n        this.soft = soft;\n        this.exampleA = exampleA;\n        this.exampleB = exampleB;\n    }\n}\nfunction exampleFromEdges(edges) {\n    let str = \"\";\n    for (let i = 0; i < edges.length; i++)\n        str += String.fromCharCode(edges[i].from);\n    return str;\n}\nfunction ids(elts) {\n    let result = \"\";\n    for (let elt of elts) {\n        if (result.length)\n            result += \"-\";\n        result += elt.id;\n    }\n    return result;\n}\nfunction sameSet(a, b) {\n    if (a.length != b.length)\n        return false;\n    for (let i = 0; i < a.length; i++)\n        if (a[i] != b[i])\n            return false;\n    return true;\n}\nclass MergedEdge {\n    constructor(from, to, targets) {\n        this.from = from;\n        this.to = to;\n        this.targets = targets;\n    }\n}\n// Merge multiple edges (tagged by character ranges) into a set of\n// mutually exclusive ranges pointing at all target states for that\n// range\nfunction mergeEdges(edges) {\n    let separate = [], result = [];\n    for (let edge of edges) {\n        if (!separate.includes(edge.from))\n            separate.push(edge.from);\n        if (!separate.includes(edge.to))\n            separate.push(edge.to);\n    }\n    separate.sort((a, b) => a - b);\n    for (let i = 1; i < separate.length; i++) {\n        let from = separate[i - 1], to = separate[i];\n        let found = [];\n        for (let edge of edges)\n            if (edge.to > from && edge.from < to) {\n                for (let target of edge.target.closure())\n                    if (!found.includes(target))\n                        found.push(target);\n            }\n        if (found.length)\n            result.push(new MergedEdge(from, to, found));\n    }\n    return result;\n}\n\n// Note that this is the parser for grammar files, not the generated parser\nlet word = /[\\w_-]+/gy;\n// Some engines (specifically SpiderMonkey) have still not implemented \\p\ntry {\n    word = /[\\p{Alphabetic}\\d_-]+/ugy;\n}\ncatch (_) { }\nconst none$1 = [];\nclass Input {\n    constructor(string, fileName = null) {\n        this.string = string;\n        this.fileName = fileName;\n        this.type = \"sof\";\n        this.value = null;\n        this.start = 0;\n        this.end = 0;\n        this.next();\n    }\n    lineInfo(pos) {\n        for (let line = 1, cur = 0;;) {\n            let next = this.string.indexOf(\"\\n\", cur);\n            if (next > -1 && next < pos) {\n                ++line;\n                cur = next + 1;\n            }\n            else {\n                return { line, ch: pos - cur };\n            }\n        }\n    }\n    message(msg, pos = -1) {\n        let posInfo = this.fileName || \"\";\n        if (pos > -1) {\n            let info = this.lineInfo(pos);\n            posInfo += (posInfo ? \" \" : \"\") + info.line + \":\" + info.ch;\n        }\n        return posInfo ? msg + ` (${posInfo})` : msg;\n    }\n    raise(msg, pos = -1) {\n        throw new GenError(this.message(msg, pos));\n    }\n    match(pos, re) {\n        let match = re.exec(this.string.slice(pos));\n        return match ? pos + match[0].length : -1;\n    }\n    next() {\n        let start = this.match(this.end, /^(\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/);\n        if (start == this.string.length)\n            return this.set(\"eof\", null, start, start);\n        let next = this.string[start];\n        if (next == '\"') {\n            let end = this.match(start + 1, /^(\\\\.|[^\"])*\"/);\n            if (end == -1)\n                this.raise(\"Unterminated string literal\", start);\n            return this.set(\"string\", readString(this.string.slice(start + 1, end - 1)), start, end);\n        }\n        else if (next == \"'\") {\n            let end = this.match(start + 1, /^(\\\\.|[^'])*'/);\n            if (end == -1)\n                this.raise(\"Unterminated string literal\", start);\n            return this.set(\"string\", readString(this.string.slice(start + 1, end - 1)), start, end);\n        }\n        else if (next == \"@\") {\n            word.lastIndex = start + 1;\n            let m = word.exec(this.string);\n            if (!m)\n                return this.raise(\"@ without a name\", start);\n            return this.set(\"at\", m[0], start, start + 1 + m[0].length);\n        }\n        else if ((next == \"$\" || next == \"!\") && this.string[start + 1] == \"[\") {\n            let end = this.match(start + 2, /^(?:\\\\.|[^\\]])*\\]/);\n            if (end == -1)\n                this.raise(\"Unterminated character set\", start);\n            return this.set(\"set\", this.string.slice(start + 2, end - 1), start, end);\n        }\n        else if (/[\\[\\]()!~+*?{}<>\\.,|:$=]/.test(next)) {\n            return this.set(next, null, start, start + 1);\n        }\n        else {\n            word.lastIndex = start;\n            let m = word.exec(this.string);\n            if (!m)\n                return this.raise(\"Unexpected character \" + JSON.stringify(next), start);\n            return this.set(\"id\", m[0], start, start + m[0].length);\n        }\n    }\n    set(type, value, start, end) {\n        this.type = type;\n        this.value = value;\n        this.start = start;\n        this.end = end;\n    }\n    eat(type, value = null) {\n        if (this.type == type && (value == null || this.value === value)) {\n            this.next();\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    unexpected() {\n        return this.raise(`Unexpected token '${this.string.slice(this.start, this.end)}'`, this.start);\n    }\n    expect(type, value = null) {\n        let val = this.value;\n        if (this.type != type || !(value == null || val === value))\n            this.unexpected();\n        this.next();\n        return val;\n    }\n    parse() {\n        return parseGrammar(this);\n    }\n}\nfunction parseGrammar(input) {\n    let start = input.start;\n    let rules = [];\n    let prec = null;\n    let tokens = null;\n    let mainSkip = null;\n    let scopedSkip = [];\n    let dialects = [];\n    let context = null;\n    let external = [];\n    let specialized = [];\n    let nested = [];\n    let props = [];\n    let tops = [];\n    let autoDelim = false;\n    while (input.type != \"eof\") {\n        let start = input.start;\n        if (input.type == \"at\" && input.value == \"top\") {\n            input.next();\n            if (input.type != \"id\")\n                input.raise(`Top rules must have a name`, input.start);\n            let name = parseIdent(input);\n            if (tops.length && name.name === '@top') {\n                input.raise(`Unnamed secondary @top declaration`, input.start);\n            }\n            tops.push(parseRule(input, name));\n        }\n        else if (input.type == \"at\" && input.value == \"tokens\") {\n            if (tokens)\n                input.raise(`Multiple @tokens declaractions`, input.start);\n            else\n                tokens = parseTokens(input);\n        }\n        else if (input.eat(\"at\", \"context\")) {\n            if (context)\n                input.raise(`Multiple @context declarations`, start);\n            let id = parseIdent(input);\n            input.expect(\"id\", \"from\");\n            let source = input.expect(\"string\");\n            context = new ContextDeclaration(start, id, source);\n        }\n        else if (input.eat(\"at\", \"external\")) {\n            if (input.eat(\"id\", \"tokens\"))\n                external.push(parseExternalTokens(input, start));\n            else if (input.eat(\"id\", \"grammar\"))\n                nested.push(parseExternalGrammar(input, start));\n            else if (input.eat(\"id\", \"prop\"))\n                props.push(parseExternalProp(input, start));\n            else if (input.eat(\"id\", \"extend\"))\n                specialized.push(parseExternalSpecialize(input, \"extend\", start));\n            else if (input.eat(\"id\", \"specialize\"))\n                specialized.push(parseExternalSpecialize(input, \"specialize\", start));\n            else\n                input.unexpected();\n        }\n        else if (input.eat(\"at\", \"dialects\")) {\n            input.expect(\"{\");\n            for (let first = true; !input.eat(\"}\"); first = false) {\n                if (!first)\n                    input.eat(\",\");\n                dialects.push(parseIdent(input));\n            }\n        }\n        else if (input.type == \"at\" && input.value == \"precedence\") {\n            if (prec)\n                input.raise(`Multiple precedence declarations`, input.start);\n            prec = parsePrecedence(input);\n        }\n        else if (input.eat(\"at\", \"detectDelim\")) {\n            autoDelim = true;\n        }\n        else if (input.eat(\"at\", \"skip\")) {\n            let skip = parseBracedExpr(input);\n            if (input.type == \"{\") {\n                input.next();\n                let scoped = [];\n                while (!input.eat(\"}\"))\n                    scoped.push(parseRule(input));\n                scopedSkip.push({ expr: skip, rules: scoped });\n            }\n            else {\n                if (mainSkip)\n                    input.raise(`Multiple top-level skip declarations`, input.start);\n                mainSkip = skip;\n            }\n        }\n        else {\n            rules.push(parseRule(input));\n        }\n    }\n    if (!tops.length)\n        return input.raise(`Missing @top declaration`);\n    return new GrammarDeclaration(start, rules, tops, tokens, context, external, specialized, prec, mainSkip, scopedSkip, dialects, nested, props, autoDelim);\n}\nfunction parseRule(input, named) {\n    let start = named ? named.start : input.start;\n    let id = named || parseIdent(input);\n    let props = parseProps(input);\n    let params = [];\n    if (input.eat(\"<\"))\n        while (!input.eat(\">\")) {\n            if (params.length)\n                input.expect(\",\");\n            params.push(parseIdent(input));\n        }\n    let expr = parseBracedExpr(input);\n    return new RuleDeclaration(start, id, props, params, expr);\n}\nfunction parseProps(input) {\n    if (input.type != \"[\")\n        return none$1;\n    let props = [];\n    input.expect(\"[\");\n    while (!input.eat(\"]\")) {\n        if (props.length)\n            input.expect(\",\");\n        props.push(parseProp(input));\n    }\n    return props;\n}\nfunction parseProp(input) {\n    let start = input.start, value = [], name = input.value, at = input.type == \"at\";\n    if (!input.eat(\"at\") && !input.eat(\"id\"))\n        input.unexpected();\n    if (input.eat(\"=\"))\n        for (;;) {\n            if (input.type == \"string\" || input.type == \"id\") {\n                value.push(new PropPart(input.start, input.value, null));\n                input.next();\n            }\n            else if (input.eat(\".\")) {\n                value.push(new PropPart(input.start, \".\", null));\n            }\n            else if (input.eat(\"{\")) {\n                value.push(new PropPart(input.start, null, input.expect(\"id\")));\n                input.expect(\"}\");\n            }\n            else {\n                break;\n            }\n        }\n    return new Prop(start, at, name, value);\n}\nfunction parseBracedExpr(input) {\n    input.expect(\"{\");\n    let expr = parseExprChoice(input);\n    input.expect(\"}\");\n    return expr;\n}\nconst SET_MARKER = \"\\ufdda\"; // (Invalid unicode character)\nfunction parseExprInner(input) {\n    let start = input.start;\n    if (input.eat(\"(\")) {\n        let expr = parseExprChoice(input);\n        input.expect(\")\");\n        return expr;\n    }\n    else if (input.type == \"string\") {\n        let value = input.value;\n        input.next();\n        if (value.length == 0)\n            return new SequenceExpression(start, none$1, [none$1, none$1]);\n        return new LiteralExpression(start, value);\n    }\n    else if (input.eat(\"id\", \"_\")) {\n        return new AnyExpression(start);\n    }\n    else if (input.type == \"set\") {\n        let content = input.value, invert = input.string[input.start] == \"!\";\n        let unescaped = readString(content.replace(/\\\\.|-|\"/g, (m) => {\n            return m == \"-\" ? SET_MARKER : m == '\"' ? '\\\\\"' : m;\n        }));\n        let ranges = [];\n        for (let pos = 0; pos < unescaped.length;) {\n            let code = unescaped.codePointAt(pos);\n            pos += code > 0xffff ? 2 : 1;\n            if (pos < unescaped.length - 1 && unescaped[pos] == SET_MARKER) {\n                let end = unescaped.codePointAt(pos + 1);\n                pos += end > 0xffff ? 3 : 2;\n                if (end < code)\n                    input.raise(\"Invalid character range\", input.start);\n                addRange(input, ranges, code, end + 1);\n            }\n            else {\n                addRange(input, ranges, code, code + 1);\n            }\n        }\n        input.next();\n        return new SetExpression(start, ranges.sort((a, b) => a[0] - b[0]), invert);\n    }\n    else if (input.type == \"at\" && (input.value == \"specialize\" || input.value == \"extend\")) {\n        let { start, value } = input;\n        input.next();\n        let props = parseProps(input);\n        input.expect(\"<\");\n        let token = parseExprChoice(input), content;\n        if (input.eat(\",\")) {\n            content = parseExprChoice(input);\n        }\n        else if (token instanceof LiteralExpression) {\n            content = token;\n        }\n        else {\n            input.raise(`@${value} requires two arguments when its first argument isn't a literal string`);\n        }\n        input.expect(\">\");\n        return new SpecializeExpression(start, value, props, token, content);\n    }\n    else if (input.type == \"[\") {\n        let rule = parseRule(input, new Identifier(start, \"_anon\"));\n        if (rule.params.length)\n            input.raise(`Inline rules can't have parameters`, rule.start);\n        return new InlineRuleExpression(start, rule);\n    }\n    else {\n        let id = parseIdent(input);\n        if (input.type == \"[\" || input.type == \"{\") {\n            let rule = parseRule(input, id);\n            if (rule.params.length)\n                input.raise(`Inline rules can't have parameters`, rule.start);\n            return new InlineRuleExpression(start, rule);\n        }\n        else {\n            let namespace = null;\n            if (input.eat(\".\")) {\n                namespace = id;\n                id = parseIdent(input);\n            }\n            return new NameExpression(start, namespace, id, parseArgs(input));\n        }\n    }\n}\nfunction parseArgs(input) {\n    let args = [];\n    if (input.eat(\"<\"))\n        while (!input.eat(\">\")) {\n            if (args.length)\n                input.expect(\",\");\n            args.push(parseExprChoice(input));\n        }\n    return args;\n}\nfunction addRange(input, ranges, from, to) {\n    if (!ranges.every(([a, b]) => b <= from || a >= to))\n        input.raise(\"Overlapping character range\", input.start);\n    ranges.push([from, to]);\n}\nfunction parseExprSuffix(input) {\n    let start = input.start;\n    let expr = parseExprInner(input);\n    for (;;) {\n        let kind = input.type;\n        if (input.eat(\"*\") || input.eat(\"?\") || input.eat(\"+\"))\n            expr = new RepeatExpression(start, expr, kind);\n        else\n            return expr;\n    }\n}\nfunction endOfSequence(input) {\n    return input.type == \"}\" || input.type == \")\" || input.type == \"|\" || input.type == \"/\" ||\n        input.type == \"/\\\\\" || input.type == \"{\" || input.type == \",\" || input.type == \">\";\n}\nfunction parseExprSequence(input) {\n    let start = input.start, exprs = [], markers = [none$1];\n    do {\n        // Add markers at this position\n        for (;;) {\n            let localStart = input.start, markerType;\n            if (input.eat(\"~\"))\n                markerType = \"ambig\";\n            else if (input.eat(\"!\"))\n                markerType = \"prec\";\n            else\n                break;\n            markers[markers.length - 1] =\n                markers[markers.length - 1].concat(new ConflictMarker(localStart, parseIdent(input), markerType));\n        }\n        if (endOfSequence(input))\n            break;\n        exprs.push(parseExprSuffix(input));\n        markers.push(none$1);\n    } while (!endOfSequence(input));\n    if (exprs.length == 1 && markers.every(ms => ms.length == 0))\n        return exprs[0];\n    return new SequenceExpression(start, exprs, markers);\n}\nfunction parseExprChoice(input) {\n    let start = input.start, left = parseExprSequence(input);\n    if (!input.eat(\"|\"))\n        return left;\n    let exprs = [left];\n    do {\n        exprs.push(parseExprSequence(input));\n    } while (input.eat(\"|\"));\n    return new ChoiceExpression(start, exprs);\n}\nfunction parseIdent(input) {\n    if (input.type != \"id\")\n        input.unexpected();\n    let start = input.start, name = input.value;\n    input.next();\n    return new Identifier(start, name);\n}\nfunction parsePrecedence(input) {\n    let start = input.start;\n    input.next();\n    input.expect(\"{\");\n    let items = [];\n    while (!input.eat(\"}\")) {\n        if (items.length)\n            input.eat(\",\");\n        items.push({\n            id: parseIdent(input),\n            type: input.eat(\"at\", \"left\") ? \"left\" : input.eat(\"at\", \"right\") ? \"right\" : input.eat(\"at\", \"cut\") ? \"cut\" : null\n        });\n    }\n    return new PrecDeclaration(start, items);\n}\nfunction parseTokens(input) {\n    let start = input.start;\n    input.next();\n    input.expect(\"{\");\n    let tokenRules = [];\n    let literals = [];\n    let precedences = [];\n    let conflicts = [];\n    while (!input.eat(\"}\")) {\n        if (input.type == \"at\" && input.value == \"precedence\") {\n            precedences.push(parseTokenPrecedence(input));\n        }\n        else if (input.type == \"at\" && input.value == \"conflict\") {\n            conflicts.push(parseTokenConflict(input));\n        }\n        else if (input.type == \"string\") {\n            literals.push(new LiteralDeclaration(input.start, input.expect(\"string\"), parseProps(input)));\n        }\n        else {\n            tokenRules.push(parseRule(input));\n        }\n    }\n    return new TokenDeclaration(start, precedences, conflicts, tokenRules, literals);\n}\nfunction parseTokenPrecedence(input) {\n    let start = input.start;\n    input.next();\n    input.expect(\"{\");\n    let tokens = [];\n    while (!input.eat(\"}\")) {\n        if (tokens.length)\n            input.eat(\",\");\n        let expr = parseExprInner(input);\n        if (expr instanceof LiteralExpression || expr instanceof NameExpression)\n            tokens.push(expr);\n        else\n            input.raise(`Invalid expression in token precedences`, expr.start);\n    }\n    return new TokenPrecDeclaration(start, tokens);\n}\nfunction parseTokenConflict(input) {\n    let start = input.start;\n    input.next();\n    input.expect(\"{\");\n    let a = parseExprInner(input);\n    if (!(a instanceof LiteralExpression || a instanceof NameExpression))\n        input.raise(`Invalid expression in token conflict`, a.start);\n    input.eat(\",\");\n    let b = parseExprInner(input);\n    if (!(b instanceof LiteralExpression || b instanceof NameExpression))\n        input.raise(`Invalid expression in token conflict`, b.start);\n    input.expect(\"}\");\n    return new TokenConflictDeclaration(start, a, b);\n}\nfunction parseExternalTokenSet(input) {\n    let tokens = [];\n    input.expect(\"{\");\n    while (!input.eat(\"}\")) {\n        if (tokens.length)\n            input.eat(\",\");\n        let id = parseIdent(input);\n        let props = parseProps(input);\n        tokens.push({ id, props });\n    }\n    return tokens;\n}\nfunction parseExternalTokens(input, start) {\n    let id = parseIdent(input);\n    input.expect(\"id\", \"from\");\n    let from = input.expect(\"string\");\n    return new ExternalTokenDeclaration(start, id, from, parseExternalTokenSet(input));\n}\nfunction parseExternalSpecialize(input, type, start) {\n    let token = parseBracedExpr(input);\n    let id = parseIdent(input);\n    input.expect(\"id\", \"from\");\n    let from = input.expect(\"string\");\n    return new ExternalSpecializeDeclaration(start, type, token, id, from, parseExternalTokenSet(input));\n}\nfunction parseExternalGrammar(input, start) {\n    let externalID = parseIdent(input);\n    let id = input.eat(\"id\", \"as\") ? parseIdent(input) : externalID;\n    let from = null;\n    if (input.eat(\"id\", \"from\"))\n        from = input.expect(\"string\");\n    else\n        input.expect(\"id\", \"empty\");\n    return new ExternalGrammarDeclaration(start, id, externalID, from);\n}\nfunction parseExternalProp(input, start) {\n    let externalID = parseIdent(input);\n    let id = input.eat(\"id\", \"as\") ? parseIdent(input) : externalID;\n    input.expect(\"id\", \"from\");\n    let from = input.expect(\"string\");\n    return new ExternalPropDeclaration(start, id, externalID, from);\n}\nfunction readString(string) {\n    let point = /\\\\(?:u\\{([\\da-f]+)\\}|u([\\da-f]{4})|x([\\da-f]{2})|([ntbrf0])|(.))|./yig;\n    let out = \"\", m;\n    while (m = point.exec(string)) {\n        let [all, u1, u2, u3, single, unknown] = m;\n        if (u1 || u2 || u3)\n            out += String.fromCodePoint(parseInt(u1 || u2 || u3, 16));\n        else if (single)\n            out += single == \"n\" ? \"\\n\" : single == \"t\" ? \"\\t\" : single == \"0\" ? \"\\0\" : single == \"r\" ? \"\\r\" : single == \"f\" ? \"\\f\" : \"\\b\";\n        else if (unknown)\n            out += unknown;\n        else\n            out += all;\n    }\n    return out;\n}\n\nfunction hash(a, b) { return (a << 5) + a + b; }\nfunction hashString(h, s) {\n    for (let i = 0; i < s.length; i++)\n        h = hash(h, s.charCodeAt(i));\n    return h;\n}\n\nconst verbose = (typeof process != \"undefined\" && process.env.LOG) || \"\";\nconst timing = /\\btime\\b/.test(verbose);\nconst time = timing ? (label, f) => {\n    let t0 = Date.now();\n    let result = f();\n    console.log(`${label} (${((Date.now() - t0) / 1000).toFixed(2)}s)`);\n    return result;\n} : (_label, f) => f();\n\nclass Pos {\n    constructor(rule, pos, \n    // NOTE `ahead` and `ambigAhead` aren't mutated anymore after `finish()` has been called\n    ahead, ambigAhead, skipAhead, via) {\n        this.rule = rule;\n        this.pos = pos;\n        this.ahead = ahead;\n        this.ambigAhead = ambigAhead;\n        this.skipAhead = skipAhead;\n        this.via = via;\n        this.hash = 0;\n    }\n    finish() {\n        let h = hash(hash(this.rule.id, this.pos), this.skipAhead.hash);\n        for (let a of this.ahead)\n            h = hash(h, a.hash);\n        for (let group of this.ambigAhead)\n            h = hashString(h, group);\n        this.hash = h;\n        return this;\n    }\n    get next() {\n        return this.pos < this.rule.parts.length ? this.rule.parts[this.pos] : null;\n    }\n    advance() {\n        return new Pos(this.rule, this.pos + 1, this.ahead, this.ambigAhead, this.skipAhead, this.via).finish();\n    }\n    get skip() {\n        return this.pos == this.rule.parts.length ? this.skipAhead : this.rule.skip;\n    }\n    cmp(pos) {\n        return this.rule.cmp(pos.rule) || this.pos - pos.pos || this.skipAhead.hash - pos.skipAhead.hash ||\n            cmpSet(this.ahead, pos.ahead, (a, b) => a.cmp(b)) || cmpSet(this.ambigAhead, pos.ambigAhead, cmpStr);\n    }\n    eqSimple(pos) {\n        return pos.rule == this.rule && pos.pos == this.pos;\n    }\n    toString() {\n        let parts = this.rule.parts.map(t => t.name);\n        parts.splice(this.pos, 0, \"\u00b7\");\n        return `${this.rule.name} -> ${parts.join(\" \")}`;\n    }\n    eq(other) {\n        return this == other ||\n            this.hash == other.hash && this.rule == other.rule && this.pos == other.pos && this.skipAhead == other.skipAhead &&\n                sameSet$1(this.ahead, other.ahead) &&\n                sameSet$1(this.ambigAhead, other.ambigAhead);\n    }\n    trail(maxLen = 60) {\n        let result = [];\n        for (let pos = this; pos; pos = pos.via) {\n            for (let i = pos.pos - 1; i >= 0; i--)\n                result.push(pos.rule.parts[i]);\n        }\n        let value = result.reverse().join(\" \");\n        if (value.length > maxLen)\n            value = value.slice(value.length - maxLen).replace(/.*? /, \"\u2026 \");\n        return value;\n    }\n    conflicts(pos = this.pos) {\n        let result = this.rule.conflicts[pos];\n        if (pos == this.rule.parts.length && this.ambigAhead.length)\n            result = result.join(new Conflicts(0, this.ambigAhead));\n        return result;\n    }\n    static addOrigins(group, context) {\n        let result = group.slice();\n        for (let i = 0; i < result.length; i++) {\n            let next = result[i];\n            if (next.pos == 0)\n                for (let pos of context) {\n                    if (pos.next == next.rule.name && !result.includes(pos))\n                        result.push(pos);\n                }\n        }\n        return result;\n    }\n}\nfunction conflictsAt(group) {\n    let result = Conflicts.none;\n    for (let pos of group)\n        result = result.join(pos.conflicts());\n    return result;\n}\n// Applies automatic action precedence based on repeat productions.\n// These are left-associative, so reducing the `R -> R R` rule has\n// higher precedence.\nfunction compareRepeatPrec(a, b) {\n    for (let pos of a)\n        if (pos.rule.name.repeated) {\n            for (let posB of b)\n                if (posB.rule.name == pos.rule.name) {\n                    if (pos.rule.isRepeatWrap && pos.pos == 2)\n                        return 1;\n                    if (posB.rule.isRepeatWrap && posB.pos == 2)\n                        return -1;\n                }\n        }\n    return 0;\n}\nfunction cmpStr(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\nfunction termsAhead(rule, pos, after, first) {\n    let found = [];\n    for (let i = pos + 1; i < rule.parts.length; i++) {\n        let next = rule.parts[i], cont = false;\n        if (next.terminal) {\n            addTo(next, found);\n        }\n        else\n            for (let term of first[next.name]) {\n                if (term == null)\n                    cont = true;\n                else\n                    addTo(term, found);\n            }\n        if (!cont)\n            return found;\n    }\n    for (let a of after)\n        addTo(a, found);\n    return found;\n}\nfunction eqSet(a, b) {\n    if (a.length != b.length)\n        return false;\n    for (let i = 0; i < a.length; i++)\n        if (!a[i].eq(b[i]))\n            return false;\n    return true;\n}\nfunction sameSet$1(a, b) {\n    if (a.length != b.length)\n        return false;\n    for (let i = 0; i < a.length; i++)\n        if (a[i] != b[i])\n            return false;\n    return true;\n}\nclass Shift {\n    constructor(term, target) {\n        this.term = term;\n        this.target = target;\n    }\n    eq(other) { return other instanceof Shift && this.term == other.term && other.target.id == this.target.id; }\n    cmp(other) { return other instanceof Reduce ? -1 : this.term.id - other.term.id || this.target.id - other.target.id; }\n    toString() { return \"s\" + this.target.id; }\n    map(mapping, states) {\n        let mapped = states[mapping[this.target.id]];\n        return mapped == this.target ? this : new Shift(this.term, mapped);\n    }\n}\nclass Reduce {\n    constructor(term, rule) {\n        this.term = term;\n        this.rule = rule;\n    }\n    eq(other) {\n        return other instanceof Reduce && this.term == other.term && other.rule.sameReduce(this.rule);\n    }\n    cmp(other) {\n        return other instanceof Shift ? 1 : this.term.id - other.term.id || this.rule.name.id - other.rule.name.id ||\n            this.rule.parts.length - other.rule.parts.length;\n    }\n    toString() { return `${this.rule.name.name}(${this.rule.parts.length})`; }\n    map() { return this; }\n}\nfunction hashPositions(set) {\n    let h = 5381;\n    for (let pos of set)\n        h = hash(h, pos.hash);\n    return h;\n}\nclass State$1 {\n    constructor(id, set, flags = 0, skip, hash = hashPositions(set), startRule = null) {\n        this.id = id;\n        this.set = set;\n        this.flags = flags;\n        this.skip = skip;\n        this.hash = hash;\n        this.startRule = startRule;\n        this.actions = [];\n        this.actionPositions = [];\n        this.goto = [];\n        this.tokenGroup = -1;\n        this.defaultReduce = null;\n        this.nested = -1;\n    }\n    toString() {\n        let actions = this.actions.map(t => t.term + \"=\" + t).join(\",\") +\n            (this.goto.length ? \" | \" + this.goto.map(g => g.term + \"=\" + g).join(\",\") : \"\");\n        return this.id + \": \" + this.set.filter(p => p.pos > 0).join() +\n            (this.defaultReduce ? `\\n  always ${this.defaultReduce.name}(${this.defaultReduce.parts.length})`\n                : actions.length ? \"\\n  \" + actions : \"\");\n    }\n    addActionInner(value, positions) {\n        check: for (let i = 0; i < this.actions.length; i++) {\n            let action = this.actions[i];\n            if (action.term == value.term) {\n                if (action.eq(value))\n                    return null;\n                let fullPos = Pos.addOrigins(positions, this.set), actionFullPos = Pos.addOrigins(this.actionPositions[i], this.set);\n                let conflicts = conflictsAt(fullPos), actionConflicts = conflictsAt(actionFullPos);\n                let diff = compareRepeatPrec(fullPos, actionFullPos) || conflicts.precedence - actionConflicts.precedence;\n                if (diff > 0) { // Drop the existing action\n                    this.actions.splice(i, 1);\n                    this.actionPositions.splice(i, 1);\n                    i--;\n                    continue check;\n                }\n                else if (diff < 0) { // Drop this one\n                    return null;\n                }\n                else if (conflicts.ambigGroups.some(g => actionConflicts.ambigGroups.includes(g))) { // Explicitly allowed ambiguity\n                    continue check;\n                }\n                else { // Not resolved\n                    return action;\n                }\n            }\n        }\n        this.actions.push(value);\n        this.actionPositions.push(positions);\n        return null;\n    }\n    addAction(value, positions, conflicts) {\n        let conflict = this.addActionInner(value, positions);\n        if (conflict) {\n            let conflictPos = this.actionPositions[this.actions.indexOf(conflict)][0];\n            let rules = [positions[0].rule.name, conflictPos.rule.name];\n            if (conflicts.some(c => c.rules.some(r => rules.includes(r))))\n                return;\n            let error;\n            if (conflict instanceof Shift)\n                error = `shift/reduce conflict between\\n  ${conflictPos}\\nand\\n  ${positions[0].rule}`;\n            else\n                error = `reduce/reduce conflict between\\n  ${conflictPos.rule}\\nand\\n  ${positions[0].rule}`;\n            error += `\\nWith input:\\n  ${positions[0].trail(70)} \u00b7 ${value.term} \u2026`;\n            error += findConflictOrigin(conflictPos, positions[0]);\n            conflicts.push(new Conflict$1(error, rules));\n        }\n    }\n    getGoto(term) {\n        return this.goto.find(a => a.term == term);\n    }\n    hasSet(set) {\n        return eqSet(this.set, set);\n    }\n    finish() {\n        if (this.actions.length) {\n            let first = this.actions[0];\n            if (first instanceof Reduce) {\n                let { rule } = first;\n                if (this.actions.every(a => a instanceof Reduce && a.rule.sameReduce(rule)))\n                    this.defaultReduce = rule;\n            }\n        }\n        this.actions.sort((a, b) => a.cmp(b));\n        this.goto.sort((a, b) => a.cmp(b));\n    }\n    eq(other) {\n        let dThis = this.defaultReduce, dOther = other.defaultReduce;\n        if (dThis || dOther)\n            return dThis && dOther ? dThis.sameReduce(dOther) : false;\n        return this.skip == other.skip &&\n            this.tokenGroup == other.tokenGroup &&\n            eqSet(this.actions, other.actions) &&\n            eqSet(this.goto, other.goto);\n    }\n}\nfunction closure(set, first) {\n    let added = [], redo = [];\n    function addFor(name, ahead, ambigAhead, skipAhead, via) {\n        for (let rule of name.rules) {\n            let add = added.find(a => a.rule == rule);\n            if (!add) {\n                let existing = set.find(p => p.pos == 0 && p.rule == rule);\n                add = existing ? new Pos(rule, 0, existing.ahead.slice(), existing.ambigAhead, existing.skipAhead, existing.via)\n                    : new Pos(rule, 0, [], none$2, skipAhead, via);\n                added.push(add);\n            }\n            if (add.skipAhead != skipAhead)\n                throw new GenError(\"Inconsistent skip sets after \" + via.trail());\n            add.ambigAhead = union(add.ambigAhead, ambigAhead);\n            for (let term of ahead)\n                if (!add.ahead.includes(term)) {\n                    add.ahead.push(term);\n                    if (add.rule.parts.length && !add.rule.parts[0].terminal)\n                        addTo(add, redo);\n                }\n        }\n    }\n    for (let pos of set) {\n        let next = pos.next;\n        if (next && !next.terminal)\n            addFor(next, termsAhead(pos.rule, pos.pos, pos.ahead, first), pos.conflicts(pos.pos + 1).ambigGroups, pos.pos == pos.rule.parts.length - 1 ? pos.skipAhead : pos.rule.skip, pos);\n    }\n    while (redo.length) {\n        let add = redo.pop();\n        addFor(add.rule.parts[0], termsAhead(add.rule, 0, add.ahead, first), union(add.rule.conflicts[1].ambigGroups, add.rule.parts.length == 1 ? add.ambigAhead : none$2), add.skipAhead, add);\n    }\n    let result = set.slice();\n    for (let add of added) {\n        add.ahead.sort((a, b) => a.hash - b.hash);\n        add.finish();\n        let origIndex = set.findIndex(p => p.pos == 0 && p.rule == add.rule);\n        if (origIndex > -1)\n            result[origIndex] = add;\n        else\n            result.push(add);\n    }\n    return result.sort((a, b) => a.cmp(b));\n}\nfunction addTo(value, array) {\n    if (!array.includes(value))\n        array.push(value);\n}\nfunction computeFirstSets(terms) {\n    let table = Object.create(null);\n    for (let t of terms.terms)\n        if (!t.terminal)\n            table[t.name] = [];\n    for (;;) {\n        let change = false;\n        for (let nt of terms.terms)\n            if (!nt.terminal)\n                for (let rule of nt.rules) {\n                    let set = table[nt.name];\n                    let found = false, startLen = set.length;\n                    for (let part of rule.parts) {\n                        found = true;\n                        if (part.terminal) {\n                            addTo(part, set);\n                        }\n                        else {\n                            for (let t of table[part.name]) {\n                                if (t == null)\n                                    found = false;\n                                else\n                                    addTo(t, set);\n                            }\n                        }\n                        if (found)\n                            break;\n                    }\n                    if (!found)\n                        addTo(null, set);\n                    if (set.length > startLen)\n                        change = true;\n                }\n        if (!change)\n            return table;\n    }\n}\nclass Core {\n    constructor(set, state) {\n        this.set = set;\n        this.state = state;\n    }\n}\nclass Conflict$1 {\n    constructor(error, rules) {\n        this.error = error;\n        this.rules = rules;\n    }\n}\nfunction findConflictOrigin(a, b) {\n    if (a.eqSimple(b))\n        return \"\";\n    function via(root, start) {\n        let hist = [];\n        for (let p = start.via; !p.eqSimple(root); p = p.via)\n            hist.push(p);\n        if (!hist.length)\n            return \"\";\n        hist.unshift(start);\n        return hist.reverse().map((p, i) => \"\\n\" + \"  \".repeat(i + 1) + (p == start ? \"\" : \"via \") + p).join(\"\");\n    }\n    for (let p = a; p; p = p.via)\n        for (let p2 = b; p2; p2 = p2.via) {\n            if (p.eqSimple(p2))\n                return \"\\nShared origin: \" + p + via(p, a) + via(p, b);\n        }\n    return \"\";\n}\n// Builds a full LR(1) automaton\nfunction buildFullAutomaton(terms, startTerms, first) {\n    let states = [];\n    let cores = {};\n    let t0 = Date.now();\n    function getState(core, top) {\n        if (core.length == 0)\n            return null;\n        let coreHash = hashPositions(core), byHash = cores[coreHash];\n        let skip;\n        for (let pos of core) {\n            if (!skip)\n                skip = pos.skip;\n            else if (skip != pos.skip)\n                throw new GenError(\"Inconsistent skip sets after \" + pos.trail());\n        }\n        if (byHash)\n            for (let known of byHash)\n                if (eqSet(core, known.set)) {\n                    if (known.state.skip != skip)\n                        throw new GenError(\"Inconsistent skip sets after \" + known.set[0].trail());\n                    return known.state;\n                }\n        let set = closure(core, first);\n        let hash = hashPositions(set), found;\n        if (!top)\n            for (let state of states)\n                if (state.hash == hash && state.hasSet(set))\n                    found = state;\n        if (!found) {\n            found = new State$1(states.length, set, 0, skip, hash, top);\n            states.push(found);\n            if (timing && states.length % 500 == 0)\n                console.log(`${states.length} states after ${((Date.now() - t0) / 1000).toFixed(2)}s`);\n        }\n        (cores[coreHash] || (cores[coreHash] = [])).push(new Core(core, found));\n        return found;\n    }\n    for (const startTerm of startTerms) {\n        const startSkip = startTerm.rules.length ? startTerm.rules[0].skip : terms.names[\"%noskip\"];\n        getState(startTerm.rules.map(rule => new Pos(rule, 0, [terms.eof], none$2, startSkip, null).finish()), startTerm);\n    }\n    let conflicts = [];\n    for (let filled = 0; filled < states.length; filled++) {\n        let state = states[filled];\n        let byTerm = [], byTermPos = [], atEnd = [];\n        for (let pos of state.set) {\n            if (pos.pos == pos.rule.parts.length) {\n                if (!pos.rule.name.top)\n                    atEnd.push(pos);\n            }\n            else {\n                let next = pos.rule.parts[pos.pos];\n                let index = byTerm.indexOf(next);\n                if (index < 0) {\n                    byTerm.push(next);\n                    byTermPos.push([pos]);\n                }\n                else {\n                    byTermPos[index].push(pos);\n                }\n            }\n        }\n        for (let i = 0; i < byTerm.length; i++) {\n            let term = byTerm[i], positions = byTermPos[i].map(p => p.advance());\n            if (term.terminal) {\n                let set = applyCut(positions);\n                let next = getState(set);\n                if (next)\n                    state.addAction(new Shift(term, next), byTermPos[i], conflicts);\n            }\n            else {\n                let goto = getState(positions);\n                if (goto)\n                    state.goto.push(new Shift(term, goto));\n            }\n        }\n        let replaced = false;\n        for (let pos of atEnd)\n            for (let ahead of pos.ahead) {\n                let count = state.actions.length;\n                state.addAction(new Reduce(ahead, pos.rule), [pos], conflicts);\n                if (state.actions.length == count)\n                    replaced = true;\n            }\n        // If some actions were replaced by others, double-check whether\n        // goto entries are now superfluous (for example, in an operator\n        // precedence-related state that has a shift for `*` but only a\n        // reduce for `+`, we don't need a goto entry for rules that start\n        // with `+`)\n        if (replaced)\n            for (let i = 0; i < state.goto.length; i++) {\n                let start = first[state.goto[i].term.name];\n                if (!start.some(term => state.actions.some(a => a.term == term && (a instanceof Shift))))\n                    state.goto.splice(i--, 1);\n            }\n    }\n    if (conflicts.length)\n        throw new GenError(conflicts.map(c => c.error).join(\"\\n\\n\"));\n    // Resolve alwaysReduce and sort actions\n    for (let state of states)\n        state.finish();\n    if (timing)\n        console.log(`${states.length} states total.`);\n    return states;\n}\nfunction applyCut(set) {\n    let found = null, cut = 1;\n    for (let pos of set) {\n        let value = pos.rule.conflicts[pos.pos - 1].cut;\n        if (value < cut)\n            continue;\n        if (!found || value > cut) {\n            cut = value;\n            found = [];\n        }\n        found.push(pos);\n    }\n    return found || set;\n}\nfunction canMergeInner(a, b, mapping) {\n    for (let goto of a.goto)\n        for (let other of b.goto) {\n            if (goto.term == other.term && mapping[goto.target.id] != mapping[other.target.id])\n                return false;\n        }\n    actions: for (let action of a.actions) {\n        let conflict = false;\n        for (let other of b.actions)\n            if (other.term == action.term) {\n                if (action instanceof Shift\n                    ? other instanceof Shift && mapping[action.target.id] == mapping[other.target.id]\n                    : other.eq(action))\n                    continue actions;\n                conflict = true;\n            }\n        if (conflict)\n            return false;\n    }\n    return true;\n}\nfunction canMerge(a, b, mapping) {\n    return canMergeInner(a, b, mapping) && canMergeInner(b, a, mapping);\n}\nfunction mergeStates(states, mapping) {\n    let newStates = [];\n    for (let state of states) {\n        let newID = mapping[state.id];\n        if (!newStates[newID]) {\n            newStates[newID] = new State$1(newID, state.set, 0, state.skip, state.hash, state.startRule);\n            newStates[newID].tokenGroup = state.tokenGroup;\n            newStates[newID].defaultReduce = state.defaultReduce;\n        }\n    }\n    for (let state of states) {\n        let newID = mapping[state.id], target = newStates[newID];\n        target.flags |= state.flags;\n        for (let i = 0; i < state.actions.length; i++) {\n            let action = state.actions[i].map(mapping, newStates);\n            if (!target.actions.some(a => a.eq(action))) {\n                target.actions.push(action);\n                target.actionPositions.push(state.actionPositions[i]);\n            }\n        }\n        for (let goto of state.goto) {\n            let mapped = goto.map(mapping, newStates);\n            if (!target.goto.some(g => g.eq(mapped)))\n                target.goto.push(mapped);\n        }\n    }\n    return newStates;\n}\nclass Group {\n    constructor(origin, member) {\n        this.origin = origin;\n        this.members = [member];\n    }\n}\nfunction samePosSet(a, b) {\n    if (a.length != b.length)\n        return false;\n    for (let i = 0; i < a.length; i++)\n        if (!a[i].eqSimple(b[i]))\n            return false;\n    return true;\n}\n// Collapse an LR(1) automaton to an LALR-like automaton\nfunction collapseAutomaton(states) {\n    let mapping = [], groups = [];\n    assignGroups: for (let i = 0; i < states.length; i++) {\n        let state = states[i];\n        if (!state.startRule)\n            for (let j = 0; j < groups.length; j++) {\n                let group = groups[j], other = states[group.members[0]];\n                if (state.tokenGroup == other.tokenGroup &&\n                    state.skip == other.skip &&\n                    !other.startRule &&\n                    samePosSet(state.set, other.set)) {\n                    group.members.push(i);\n                    mapping.push(j);\n                    continue assignGroups;\n                }\n            }\n        mapping.push(groups.length);\n        groups.push(new Group(groups.length, i));\n    }\n    function spill(groupIndex, index) {\n        let group = groups[groupIndex], state = states[group.members[index]];\n        let pop = group.members.pop();\n        if (index != group.members.length)\n            group.members[index] = pop;\n        for (let i = groupIndex + 1; i < groups.length; i++) {\n            mapping[state.id] = i;\n            if (groups[i].origin == group.origin &&\n                groups[i].members.every(id => canMerge(state, states[id], mapping))) {\n                groups[i].members.push(state.id);\n                return;\n            }\n        }\n        mapping[state.id] = groups.length;\n        groups.push(new Group(group.origin, state.id));\n    }\n    for (let pass = 1;; pass++) {\n        let conflicts = false, t0 = Date.now();\n        for (let g = 0, startLen = groups.length; g < startLen; g++) {\n            let group = groups[g];\n            for (let i = 0; i < group.members.length - 1; i++) {\n                for (let j = i + 1; j < group.members.length; j++) {\n                    let idA = group.members[i], idB = group.members[j];\n                    if (!canMerge(states[idA], states[idB], mapping)) {\n                        conflicts = true;\n                        spill(g, j--);\n                    }\n                }\n            }\n        }\n        if (timing)\n            console.log(`Collapse pass ${pass}${conflicts ? `` : `, done`} (${((Date.now() - t0) / 1000).toFixed(2)}s)`);\n        if (!conflicts)\n            return mergeStates(states, mapping);\n    }\n}\nfunction mergeIdentical(states) {\n    for (let pass = 1;; pass++) {\n        let mapping = [], didMerge = false, t0 = Date.now();\n        let newStates = [];\n        // Find states that either have the same alwaysReduce or the same\n        // actions, and merge them.\n        for (let i = 0; i < states.length; i++) {\n            let state = states[i];\n            let match = newStates.findIndex(s => state.eq(s));\n            if (match < 0) {\n                mapping[i] = newStates.length;\n                newStates.push(state);\n            }\n            else {\n                mapping[i] = match;\n                didMerge = true;\n                let other = newStates[match], add = null;\n                for (let pos of state.set)\n                    if (!other.set.some(p => p.eqSimple(pos)))\n                        (add || (add = [])).push(pos);\n                if (add)\n                    other.set = add.concat(other.set).sort((a, b) => a.cmp(b));\n            }\n        }\n        if (timing)\n            console.log(`Merge identical pass ${pass}${didMerge ? \"\" : \", done\"} (${((Date.now() - t0) / 1000).toFixed(2)}s)`);\n        if (!didMerge)\n            return states;\n        // Make sure actions point at merged state objects\n        for (let state of newStates)\n            if (!state.defaultReduce) {\n                state.actions = state.actions.map(a => a.map(mapping, newStates));\n                state.goto = state.goto.map(a => a.map(mapping, newStates));\n            }\n        // Renumber ids\n        for (let i = 0; i < newStates.length; i++)\n            newStates[i].id = i;\n        states = newStates;\n    }\n}\nconst none$2 = [];\nfunction finishAutomaton(full) {\n    return mergeIdentical(collapseAutomaton(full));\n}\n\n// Encode numbers as groups of printable ascii characters\n//\n// - 0xffff, which is often used as placeholder, is encoded as \"~\"\n//\n// - The characters from \" \" (32) to \"}\" (125), excluding '\"' and\n//   \"\\\\\", indicate values from 0 to 92\n//\n// - The first bit in a 'digit' is used to indicate whether this is\n//   the end of a number.\n//\n// - That leaves 46 other values, which are actually significant.\n//\n// - The digits in a number are ordered from high to low significance.\nfunction digitToChar(digit) {\n    let ch = digit + 32 /* Start */;\n    if (ch >= 34 /* Gap1 */)\n        ch++;\n    if (ch >= 92 /* Gap2 */)\n        ch++;\n    return String.fromCharCode(ch);\n}\nfunction encode(value, max = 0xffff) {\n    if (value > max)\n        throw new Error(\"Trying to encode a number that's too big: \" + value);\n    if (value == 65535 /* BigVal */)\n        return String.fromCharCode(126 /* BigValCode */);\n    let result = \"\";\n    for (let first = 46 /* Base */;; first = 0) {\n        let low = value % 46 /* Base */, rest = value - low;\n        result = digitToChar(low + first) + result;\n        if (rest == 0)\n            break;\n        value = rest / 46 /* Base */;\n    }\n    return result;\n}\nfunction encodeArray(values, max = 0xffff) {\n    let result = '\"' + encode(values.length, 0xffffffff);\n    for (let i = 0; i < values.length; i++)\n        result += encode(values[i], max);\n    result += '\"';\n    return result;\n}\n\nconst none$3 = [];\nclass Parts {\n    constructor(terms, conflicts) {\n        this.terms = terms;\n        this.conflicts = conflicts;\n    }\n    concat(other) {\n        if (this == Parts.none)\n            return other;\n        if (other == Parts.none)\n            return this;\n        let conflicts = null;\n        if (this.conflicts || other.conflicts) {\n            conflicts = this.conflicts ? this.conflicts.slice() : this.ensureConflicts();\n            let otherConflicts = other.ensureConflicts();\n            conflicts[conflicts.length - 1] = conflicts[conflicts.length - 1].join(otherConflicts[0]);\n            for (let i = 1; i < otherConflicts.length; i++)\n                conflicts.push(otherConflicts[i]);\n        }\n        return new Parts(this.terms.concat(other.terms), conflicts);\n    }\n    withConflicts(pos, conflicts) {\n        if (conflicts == Conflicts.none)\n            return this;\n        let array = this.conflicts ? this.conflicts.slice() : this.ensureConflicts();\n        array[pos] = array[pos].join(conflicts);\n        return new Parts(this.terms, array);\n    }\n    ensureConflicts() {\n        if (this.conflicts)\n            return this.conflicts;\n        let empty = [];\n        for (let i = 0; i <= this.terms.length; i++)\n            empty.push(Conflicts.none);\n        return empty;\n    }\n}\nParts.none = new Parts(none$3, null);\nfunction p(...terms) { return new Parts(terms, null); }\nclass BuiltRule {\n    constructor(id, args, term) {\n        this.id = id;\n        this.args = args;\n        this.term = term;\n    }\n    matches(expr) {\n        return this.id == expr.id.name && exprsEq(expr.args, this.args);\n    }\n    matchesRepeat(expr) {\n        return this.id == \"+\" && exprEq(expr.expr, this.args[0]);\n    }\n}\nclass Builder {\n    constructor(text, options) {\n        this.options = options;\n        this.terms = new TermSet;\n        this.nestedParsers = [];\n        this.specialized = Object.create(null);\n        this.tokenOrigins = Object.create(null);\n        this.rules = [];\n        this.built = [];\n        this.ruleNames = Object.create(null);\n        this.namespaces = Object.create(null);\n        this.namedTerms = Object.create(null);\n        this.termTable = Object.create(null);\n        this.knownProps = Object.create(null);\n        this.dynamicRulePrecedences = [];\n        this.definedGroups = [];\n        this.astRules = [];\n        this.currentSkip = [];\n        time(\"Parse\", () => {\n            this.input = new Input(text, options.fileName);\n            this.ast = this.input.parse();\n        });\n        let NP = lezer.NodeProp;\n        for (let prop in NP) {\n            if (NP[prop] instanceof lezer.NodeProp)\n                this.knownProps[prop] = { prop: NP[prop], source: { name: prop, from: null } };\n        }\n        for (let prop of this.ast.externalProps) {\n            this.knownProps[prop.id.name] = {\n                prop: this.options.externalProp ? this.options.externalProp(prop.id.name) : lezer.NodeProp.string(),\n                source: { name: prop.externalID.name, from: prop.source }\n            };\n        }\n        this.dialects = this.ast.dialects.map(d => d.name);\n        this.tokens = new TokenSet(this, this.ast.tokens);\n        this.externalTokens = this.ast.externalTokens.map(ext => new ExternalTokenSet(this, ext));\n        this.externalSpecializers = this.ast.externalSpecializers.map(decl => new ExternalSpecializer(this, decl));\n        this.defineNamespace(\"nest\", new NestNamespace);\n        for (let grammar of this.ast.grammars) {\n            if (this.ast.grammars.some(g => g != grammar && g.id.name == grammar.id.name))\n                this.raise(`Duplicate external grammar name '${grammar.id.name}'`, grammar.id.start);\n        }\n        time(\"Build rules\", () => {\n            let noSkip = this.newName(\"%noskip\", true);\n            this.defineRule(noSkip, []);\n            let mainSkip = this.ast.mainSkip ? this.newName(\"%mainskip\", true) : noSkip;\n            let scopedSkip = [];\n            for (let rule of this.ast.rules)\n                this.astRules.push({ skip: mainSkip, rule });\n            for (let scoped of this.ast.scopedSkip) {\n                let skip = noSkip, found = this.ast.scopedSkip.findIndex((sc, i) => i < scopedSkip.length && exprEq(sc.expr, scoped.expr));\n                if (found > -1)\n                    skip = scopedSkip[found];\n                else if (this.ast.mainSkip && exprEq(scoped.expr, this.ast.mainSkip))\n                    skip = mainSkip;\n                else if (!isEmpty(scoped.expr))\n                    skip = this.newName(\"%skip\", true);\n                scopedSkip.push(skip);\n                for (let rule of scoped.rules)\n                    this.astRules.push({ skip, rule });\n            }\n            for (let { rule } of this.astRules) {\n                this.unique(rule.id);\n                if (this.namespaces[rule.id.name])\n                    this.raise(`Rule name '${rule.id.name}' conflicts with a defined namespace`, rule.id.start);\n            }\n            this.currentSkip.push(noSkip);\n            this.skipRules = mainSkip == noSkip ? [mainSkip] : [noSkip, mainSkip];\n            if (mainSkip != noSkip)\n                this.defineRule(mainSkip, this.normalizeExpr(this.ast.mainSkip));\n            for (let i = 0; i < this.ast.scopedSkip.length; i++) {\n                let skip = scopedSkip[i];\n                if (!this.skipRules.includes(skip)) {\n                    this.skipRules.push(skip);\n                    if (skip != noSkip)\n                        this.defineRule(skip, this.normalizeExpr(this.ast.scopedSkip[i].expr));\n                }\n            }\n            this.currentSkip.pop();\n            for (const top of this.ast.topRules) {\n                this.unique(top.id);\n                this.used(top.id.name);\n                this.currentSkip.push(mainSkip);\n                let { name, props } = this.nodeInfo(top.props, \"t\", top.id.name, none$3, none$3, top.expr);\n                let term = this.terms.makeTop(name, props);\n                this.namedTerms[name] = term;\n                this.defineRule(term, this.normalizeExpr(top.expr));\n                this.currentSkip.pop();\n            }\n            for (let ext of this.externalSpecializers)\n                ext.finish();\n            for (let { skip, rule } of this.astRules) {\n                if (this.ruleNames[rule.id.name] && isExported(rule) && !rule.params.length) {\n                    this.buildRule(rule, [], skip, false);\n                    if (rule.expr instanceof SequenceExpression && rule.expr.exprs.length == 0)\n                        this.used(rule.id.name);\n                }\n            }\n        });\n        for (let name in this.ruleNames) {\n            let value = this.ruleNames[name];\n            if (value)\n                this.warn(`Unused rule '${value.name}'`, value.start);\n        }\n        this.tokens.takePrecedences();\n        this.tokens.takeConflicts();\n        for (let { name, group, rule } of this.definedGroups)\n            this.defineGroup(name, group, rule);\n        this.checkGroups();\n    }\n    unique(id) {\n        if (id.name in this.ruleNames)\n            this.raise(`Duplicate definition of rule '${id.name}'`, id.start);\n        this.ruleNames[id.name] = id;\n    }\n    used(name) {\n        this.ruleNames[name] = null;\n    }\n    defineNamespace(name, value, pos = 0) {\n        if (this.namespaces[name])\n            this.raise(`Duplicate definition of namespace '${name}'`, pos);\n        this.namespaces[name] = value;\n    }\n    newName(base, nodeName = null, props = {}) {\n        for (let i = nodeName ? 0 : 1;; i++) {\n            let name = i ? `${base}-${i}` : base;\n            if (!this.terms.names[name])\n                return this.terms.makeNonTerminal(name, nodeName === true ? null : nodeName, props);\n        }\n    }\n    prepareParser() {\n        let rules = time(\"Simplify rules\", () => simplifyRules(this.rules, [\n            ...this.skipRules,\n            ...this.nestedParsers.map(g => g.placeholder),\n            ...this.terms.tops\n        ]));\n        let { nodeTypes, names: termNames, minRepeatTerm, maxTerm } = this.terms.finish(rules);\n        for (let prop in this.namedTerms)\n            this.termTable[prop] = this.namedTerms[prop].id;\n        if (/\\bgrammar\\b/.test(verbose))\n            console.log(rules.join(\"\\n\"));\n        let startTerms = this.terms.tops.slice();\n        let first = computeFirstSets(this.terms);\n        let skipInfo = this.skipRules.map((name, id) => {\n            let skip = [], startTokens = [], rules = [];\n            for (let rule of name.rules) {\n                if (!rule.parts.length)\n                    continue;\n                let start = rule.parts[0];\n                for (let t of start.terminal ? [start] : first[start.name] || [])\n                    if (!startTokens.includes(t))\n                        startTokens.push(t);\n                if (start.terminal && rule.parts.length == 1 && !rules.some(r => r != rule && r.parts[0] == start))\n                    skip.push(start);\n                else\n                    rules.push(rule);\n            }\n            name.rules = rules;\n            if (rules.length)\n                startTerms.push(name);\n            return { skip, rule: rules.length ? name : null, startTokens, id };\n        });\n        let fullTable = time(\"Build full automaton\", () => buildFullAutomaton(this.terms, startTerms, first));\n        let { tokenGroups, tokenPrec, tokenData } = time(\"Build token groups\", () => this.tokens.buildTokenGroups(fullTable, skipInfo));\n        let table = time(\"Finish automaton\", () => finishAutomaton(fullTable));\n        let skipState = findSkipStates(table, this.terms.tops);\n        this.addNestedParsers(table);\n        if (/\\blr\\b/.test(verbose))\n            console.log(table.join(\"\\n\"));\n        let specialized = [];\n        for (let ext of this.externalSpecializers)\n            specialized.push(ext);\n        for (let name in this.specialized)\n            specialized.push({ token: this.terms.names[name], table: buildSpecializeTable(this.specialized[name]) });\n        let tokStart = (tokenizer) => {\n            if (tokenizer instanceof ExternalTokenDeclaration)\n                return tokenizer.start;\n            return this.tokens.ast ? this.tokens.ast.start : -1;\n        };\n        let tokenizers = tokenGroups\n            .concat(this.externalTokens.map(e => e.ast)).sort((a, b) => tokStart(a) - tokStart(b));\n        let data = new DataBuilder;\n        let skipData = skipInfo.map(info => {\n            let actions = [];\n            for (let term of info.skip)\n                actions.push(term.id, 0, 262144 /* StayFlag */ >> 16);\n            if (info.rule) {\n                let state = table.find(s => s.startRule == info.rule);\n                for (let action of state.actions)\n                    actions.push(action.term.id, state.id, 131072 /* GotoFlag */ >> 16);\n            }\n            actions.push(65535 /* End */, 0 /* Done */);\n            return data.storeArray(actions);\n        });\n        let states = time(\"Finish states\", () => {\n            let states = new Uint32Array(table.length * 6 /* Size */);\n            let forceReductions = this.computeForceReductions(table, skipInfo);\n            let finishCx = new FinishStateContext(tokenizers, data, states, skipData, skipInfo, table, this);\n            for (let s of table)\n                finishCx.finish(s, skipState(s.id), forceReductions[s.id]);\n            return states;\n        });\n        let dialects = Object.create(null);\n        for (let i = 0; i < this.dialects.length; i++)\n            dialects[this.dialects[i]] = data.storeArray((this.tokens.byDialect[i] || none$3).map(t => t.id).concat(65535 /* End */));\n        let dynamicPrecedences = null;\n        if (this.dynamicRulePrecedences.length) {\n            dynamicPrecedences = Object.create(null);\n            for (let { rule, prec } of this.dynamicRulePrecedences)\n                dynamicPrecedences[rule.id] = prec;\n        }\n        let topRules = Object.create(null);\n        for (let term of this.terms.tops)\n            topRules[term.nodeName] = [table.find(state => state.startRule == term).id, term.id];\n        let precTable = data.storeArray(tokenPrec.concat(65535 /* End */));\n        let { nodeProps, skippedTypes } = this.gatherNodeProps(nodeTypes);\n        return {\n            states,\n            stateData: data.finish(),\n            goto: computeGotoTable(table),\n            nodeNames: nodeTypes.filter(t => t.id < minRepeatTerm).map(t => t.nodeName).join(\" \"),\n            nodeProps,\n            skippedTypes,\n            maxTerm,\n            repeatNodeCount: nodeTypes.length - minRepeatTerm,\n            tokenizers,\n            tokenData,\n            topRules,\n            dialects,\n            dynamicPrecedences,\n            specialized,\n            tokenPrec: precTable,\n            termNames\n        };\n    }\n    getParser() {\n        let { states, stateData, goto, nodeNames, nodeProps: rawNodeProps, skippedTypes, maxTerm, repeatNodeCount, tokenizers: rawTokenizers, tokenData, topRules, dialects, dynamicPrecedences, specialized: rawSpecialized, tokenPrec, termNames } = this.prepareParser();\n        let specialized = rawSpecialized.map(v => {\n            if (v instanceof ExternalSpecializer) {\n                let ext = this.options.externalSpecializer(v.ast.id.name, this.termTable);\n                return { term: v.term.id, get: (value, stack) => (ext(value, stack) << 1) |\n                        (v.ast.type == \"extend\" ? 1 /* Extend */ : 0 /* Specialize */) };\n            }\n            else {\n                return { term: v.token.id, get: (value) => v.table[value] || -1 };\n            }\n        });\n        let tokenizers = rawTokenizers.map(tok => {\n            return tok instanceof ExternalTokenDeclaration\n                ? this.options.externalTokenizer(tok.id.name, this.termTable)\n                : tok.id;\n        });\n        return lezer.Parser.deserialize({\n            version: 13 /* Version */,\n            states,\n            stateData,\n            goto,\n            nodeNames,\n            maxTerm,\n            repeatNodeCount,\n            nodeProps: rawNodeProps.map(({ prop, terms }) => [this.knownProps[prop].prop, ...terms]),\n            skippedNodes: skippedTypes,\n            tokenData,\n            tokenizers,\n            context: this.ast.context ? this.options.contextTracker : undefined,\n            topRules,\n            nested: this.nestedParsers.map(spec => {\n                return [spec.name, spec.source ? this.options.nestedParser(spec.name, this.termTable) : {}, spec.end.compile().toArray({}, none$3), spec.placeholder.id];\n            }),\n            dialects,\n            dynamicPrecedences,\n            specialized,\n            tokenPrec,\n            termNames\n        });\n    }\n    getParserFile() {\n        let { states, stateData, goto, nodeNames, nodeProps: rawNodeProps, skippedTypes, maxTerm, repeatNodeCount, tokenizers: rawTokenizers, tokenData, topRules, dialects: rawDialects, dynamicPrecedences, specialized: rawSpecialized, tokenPrec, termNames } = this.prepareParser();\n        let mod = this.options.moduleStyle || \"es\";\n        let gen = \"// This file was generated by lezer-generator. You probably shouldn't edit it.\\n\", head = gen;\n        head += mod == \"cjs\" ? `const {Parser} = require(\"lezer\")\\n`\n            : `import {Parser} from \"lezer\"\\n`;\n        let imports = {}, imported = Object.create(null);\n        let defined = Object.create(null);\n        let exportName = this.options.exportName || \"parser\";\n        defined.Parser = defined[exportName] = true;\n        let getName = (prefix) => {\n            for (let i = 0;; i++) {\n                let id = prefix + (i ? \"_\" + i : \"\");\n                if (!defined[id])\n                    return id;\n            }\n        };\n        let importName = (name, source, prefix) => {\n            let spec = name + \" from \" + source;\n            if (imported[spec])\n                return imported[spec];\n            let src = JSON.stringify(source), varName = name;\n            if (name in defined) {\n                varName = getName(prefix);\n                name += `${mod == \"cjs\" ? \":\" : \" as\"} ${varName}`;\n            }\n            (imports[src] || (imports[src] = [])).push(name);\n            return imported[spec] = varName;\n        };\n        let tokenizers = rawTokenizers.map(tok => {\n            if (tok instanceof ExternalTokenDeclaration) {\n                let { source, id: { name } } = tok;\n                return importName(name, source, \"tok\");\n            }\n            else {\n                return tok.id;\n            }\n        });\n        let nested = this.nestedParsers.map(spec => {\n            return `[${JSON.stringify(spec.name)}, ${spec.source ? importName(spec.extName, spec.source, spec.name) : \"{}\"},\\\n${encodeArray(spec.end.compile().toArray({}, none$3))}, ${spec.placeholder.id}]`;\n        });\n        let context = this.ast.context ? importName(this.ast.context.id.name, this.ast.context.source, \"cx\") : null;\n        let nodeProps = rawNodeProps.map(({ prop, terms }) => {\n            let { source } = this.knownProps[prop];\n            let propID = source.from ? importName(source.name, source.from, \"prop\") :\n                importName(\"NodeProp\", \"lezer\", \"NodeProp\") + \".\" + source.name;\n            return `[${propID}, ${terms.map(serializePropValue).join(\",\")}]`;\n        });\n        function specializationTableString(table) {\n            return \"{__proto__:null,\" + Object.keys(table).map(key => `${/\\W/.test(key) ? JSON.stringify(key) : key}:${table[key]}`)\n                .join(\", \") + \"}\";\n        }\n        let specHead = \"\";\n        let specialized = rawSpecialized.map(v => {\n            if (v instanceof ExternalSpecializer) {\n                let name = importName(v.ast.id.name, v.ast.source, v.ast.id.name);\n                return `{term: ${v.term.id}, get: (value, stack) => (${name}(value, stack) << 1)${v.ast.type == \"extend\" ? ` | ${1 /* Extend */}` : ''}}`;\n            }\n            else {\n                let tableName = getName(\"spec_\" + v.token.name.replace(/\\W/g, \"\"));\n                specHead += `const ${tableName} = ${specializationTableString(v.table)}\\n`;\n                return `{term: ${v.token.id}, get: value => ${tableName}[value] || -1}`;\n            }\n        });\n        for (let source in imports) {\n            if (mod == \"cjs\")\n                head += `const {${imports[source].join(\", \")}} = require(${source})\\n`;\n            else\n                head += `import {${imports[source].join(\", \")}} from ${source}\\n`;\n        }\n        head += specHead;\n        function serializePropValue(value) {\n            return typeof value != \"string\" || /^(true|false|\\d+(\\.\\d+)?|\\.\\d+)$/.test(value) ? value : JSON.stringify(value);\n        }\n        let dialects = Object.keys(rawDialects).map(d => `${d}: ${rawDialects[d]}`);\n        let parserStr = `Parser.deserialize({\n  version: ${13 /* Version */},\n  states: ${encodeArray(states, 0xffffffff)},\n  stateData: ${encodeArray(stateData)},\n  goto: ${encodeArray(goto)},\n  nodeNames: ${JSON.stringify(nodeNames)},\n  maxTerm: ${maxTerm}${context ? `,\n  context: ${context}` : \"\"}${nodeProps.length ? `,\n  nodeProps: [\n    ${nodeProps.join(\",\\n    \")}\n  ]` : \"\"}${skippedTypes.length ? `,\n  skippedNodes: ${JSON.stringify(skippedTypes)}` : \"\"},\n  repeatNodeCount: ${repeatNodeCount},\n  tokenData: ${encodeArray(tokenData)},\n  tokenizers: [${tokenizers.join(\", \")}],\n  topRules: ${JSON.stringify(topRules)}${nested.length ? `,\n  nested: [${nested.join(\", \")}]` : \"\"}${dialects.length ? `,\n  dialects: {${dialects.join(\", \")}}` : \"\"}${dynamicPrecedences ? `,\n  dynamicPrecedences: ${JSON.stringify(dynamicPrecedences)}` : \"\"}${specialized.length ? `,\n  specialized: [${specialized.join(\",\")}]` : \"\"},\n  tokenPrec: ${tokenPrec}${this.options.includeNames ? `,\n  termNames: ${JSON.stringify(termNames)}` : ''}\n})`; // FIXME more compact format for term names (omit named nodes, drop quotes)\n        let terms = [];\n        for (let name in this.termTable) {\n            let id = name;\n            if (KEYWORDS.includes(id))\n                for (let i = 1;; i++) {\n                    id = \"_\".repeat(i) + name;\n                    if (!(id in this.termTable))\n                        break;\n                }\n            terms.push(`${id}${mod == \"cjs\" ? \":\" : \" =\"} ${this.termTable[name]}`);\n        }\n        for (let id = 0; id < this.dialects.length; id++)\n            terms.push(`Dialect_${this.dialects[id]}${mod == \"cjs\" ? \":\" : \" =\"} ${id}`);\n        return {\n            parser: head + (mod == \"cjs\" ? `exports.${exportName} = ${parserStr}\\n` : `export const ${exportName} = ${parserStr}\\n`),\n            terms: mod == \"cjs\" ? `${gen}module.exports = {\\n  ${terms.join(\",\\n  \")}\\n}`\n                : `${gen}export const\\n  ${terms.join(\",\\n  \")}\\n`\n        };\n    }\n    gatherNonSkippedNodes() {\n        let seen = Object.create(null);\n        let work = [];\n        let add = (term) => {\n            if (!seen[term.id]) {\n                seen[term.id] = true;\n                work.push(term);\n            }\n        };\n        this.terms.tops.forEach(add);\n        for (let i = 0; i < work.length; i++) {\n            for (let rule of work[i].rules)\n                for (let part of rule.parts)\n                    add(part);\n        }\n        return seen;\n    }\n    gatherNodeProps(nodeTypes) {\n        let notSkipped = this.gatherNonSkippedNodes(), skippedTypes = [];\n        let nodeProps = [];\n        for (let type of nodeTypes) {\n            if (!notSkipped[type.id] && !type.error)\n                skippedTypes.push(type.id);\n            for (let prop in type.props) {\n                let known = this.knownProps[prop];\n                if (!known)\n                    throw new GenError(\"No known prop type for \" + prop);\n                if (known.source.from == null && (known.source.name == \"repeated\" || known.source.name == \"error\"))\n                    continue;\n                let rec = nodeProps.find(r => r.prop == prop);\n                if (!rec)\n                    nodeProps.push(rec = { prop, values: {} });\n                (rec.values[type.props[prop]] || (rec.values[type.props[prop]] = [])).push(type.id);\n            }\n        }\n        return {\n            nodeProps: nodeProps.map(({ prop, values }) => {\n                let terms = [];\n                for (let val in values) {\n                    let ids = values[val];\n                    if (ids.length == 1) {\n                        terms.push(ids[0], val);\n                    }\n                    else {\n                        terms.push(-ids.length);\n                        for (let id of ids)\n                            terms.push(id);\n                        terms.push(val);\n                    }\n                }\n                return { prop, terms };\n            }),\n            skippedTypes\n        };\n    }\n    addNestedParsers(table) {\n        for (let state of table) {\n            let nest = state.set.filter(pos => this.nestedParsers.some(g => g.placeholder == pos.next));\n            if (nest.length) {\n                let placeholder = nest[0].next;\n                if (!nest.every(pos => pos.next == placeholder))\n                    this.raise(`Multiple nested grammars possible after ${nest[0].trail()}`);\n                if (!state.set.every(pos => pos.next == placeholder || (pos.pos == 0 && state.set.some(p => p.next == pos.rule.name))))\n                    this.raise(`Nested grammar in ambiguous position after ${nest[0].trail()} ` + state.set);\n                state.nested = this.nestedParsers.findIndex(g => g.placeholder == placeholder);\n            }\n        }\n    }\n    makeTerminal(name, tag, props) {\n        return this.terms.makeTerminal(this.terms.uniqueName(name), tag, props);\n    }\n    computeForceReductions(states, skipInfo) {\n        // This finds a forced reduction for every state, trying to guard\n        // against cyclic forced reductions, where a given parse stack can\n        // endlessly continue running forced reductions without making any\n        // progress.\n        //\n        // This occurs with length-1 reductions. We never generate\n        // length-0 reductions, and length-2+ reductions always shrink the\n        // stack, so they are guaranteed to make progress.\n        //\n        // If there are states S1 and S2 whose forced reductions reduce\n        // terms T1 and T2 respectively, both with a length of 1, _and_\n        // there is a state S3, which has goto entries T1 -> S2, T2 -> S1,\n        // you can get cyclic reductions. Of course, the cycle may also\n        // contain more than two steps.\n        let reductions = [];\n        let candidates = [];\n        // A map from terms to states that they are mapped to in goto\n        // entries.\n        let gotoEdges = Object.create(null);\n        for (let state of states) {\n            reductions.push(0);\n            for (let edge of state.goto) {\n                let array = gotoEdges[edge.term.id] || (gotoEdges[edge.term.id] = []);\n                let found = array.find(o => o.target == edge.target.id);\n                if (found)\n                    found.parents.push(state.id);\n                else\n                    array.push({ parents: [state.id], target: edge.target.id });\n            }\n            candidates[state.id] = state.set.filter(pos => pos.pos > 0 && !pos.rule.name.top)\n                .sort((a, b) => b.pos - a.pos || a.rule.parts.length - b.rule.parts.length);\n        }\n        // Mapping from state ids to terms that that state has a length-1\n        // forced reduction for.\n        let length1Reductions = Object.create(null);\n        function createsCycle(term, startState, parents = null) {\n            let edges = gotoEdges[term];\n            if (!edges)\n                return false;\n            return edges.some(val => {\n                let parentIntersection = parents ? parents.filter(id => val.parents.includes(id)) : val.parents;\n                if (parentIntersection.length == 0)\n                    return false;\n                if (val.target == startState)\n                    return true;\n                let found = length1Reductions[val.target];\n                return found != null && createsCycle(found, startState, parentIntersection);\n            });\n        }\n        for (let state of states) {\n            if (state.defaultReduce && state.defaultReduce.parts.length > 0) {\n                reductions[state.id] = reduceAction(state.defaultReduce, skipInfo);\n                if (state.defaultReduce.parts.length == 1)\n                    length1Reductions[state.id] = state.defaultReduce.name.id;\n            }\n        }\n        // To avoid painting states that only have one potential forced\n        // reduction into a corner, reduction assignment is done by\n        // candidate size, starting with the states with fewer candidates.\n        for (let setSize = 1;; setSize++) {\n            let done = true;\n            for (let state of states) {\n                if (state.defaultReduce)\n                    continue;\n                let set = candidates[state.id];\n                if (set.length != setSize) {\n                    if (set.length > setSize)\n                        done = false;\n                    continue;\n                }\n                for (let pos of set) {\n                    if (pos.pos != 1 || !createsCycle(pos.rule.name.id, state.id)) {\n                        reductions[state.id] = reduceAction(pos.rule, skipInfo, pos.pos);\n                        if (pos.pos == 1)\n                            length1Reductions[state.id] = pos.rule.name.id;\n                        break;\n                    }\n                }\n            }\n            if (done)\n                break;\n        }\n        return reductions;\n    }\n    substituteArgs(expr, args, params) {\n        if (args.length == 0)\n            return expr;\n        return expr.walk(expr => {\n            let found;\n            if (expr instanceof NameExpression && !expr.namespace &&\n                (found = params.findIndex(p => p.name == expr.id.name)) > -1) {\n                let arg = args[found];\n                if (expr.args.length) {\n                    if (arg instanceof NameExpression && !arg.args.length)\n                        return new NameExpression(expr.start, arg.namespace, arg.id, expr.args);\n                    this.raise(`Passing arguments to a parameter that already has arguments`, expr.start);\n                }\n                return arg;\n            }\n            else if (expr instanceof InlineRuleExpression) {\n                let r = expr.rule, props = this.substituteArgsInProps(r.props, args, params);\n                return props == r.props ? expr :\n                    new InlineRuleExpression(expr.start, new RuleDeclaration(r.start, r.id, props, r.params, r.expr));\n            }\n            else if (expr instanceof SpecializeExpression) {\n                let props = this.substituteArgsInProps(expr.props, args, params);\n                return props == expr.props ? expr :\n                    new SpecializeExpression(expr.start, expr.type, props, expr.token, expr.content);\n            }\n            return expr;\n        });\n    }\n    substituteArgsInProps(props, args, params) {\n        let substituteInValue = (value) => {\n            let result = value;\n            for (let i = 0; i < value.length; i++) {\n                let part = value[i];\n                if (!part.name)\n                    continue;\n                let found = params.findIndex(p => p.name == part.name);\n                if (found < 0)\n                    continue;\n                if (result == value)\n                    result = value.slice();\n                let expr = args[found];\n                if (expr instanceof NameExpression && !expr.namespace && !expr.args.length)\n                    result[i] = new PropPart(part.start, expr.id.name, null);\n                else if (expr instanceof LiteralExpression)\n                    result[i] = new PropPart(part.start, expr.value, null);\n                else\n                    this.raise(`Trying to interpolate expression '${expr}' into a prop`, part.start);\n            }\n            return result;\n        };\n        let result = props;\n        for (let i = 0; i < props.length; i++) {\n            let prop = props[i], value = substituteInValue(prop.value);\n            if (value != prop.value) {\n                if (result == props)\n                    result = props.slice();\n                result[i] = new Prop(prop.start, prop.at, prop.name, value);\n            }\n        }\n        return result;\n    }\n    conflictsFor(markers) {\n        let here = Conflicts.none, atEnd = Conflicts.none;\n        for (let marker of markers) {\n            if (marker.type == \"ambig\") {\n                here = here.join(new Conflicts(0, [marker.id.name]));\n            }\n            else {\n                let precs = this.ast.precedences;\n                let index = precs ? precs.items.findIndex(item => item.id.name == marker.id.name) : -1;\n                if (index < 0)\n                    this.raise(`Reference to unknown precedence: '${marker.id.name}'`, marker.id.start);\n                let prec = precs.items[index], value = precs.items.length - index;\n                if (prec.type == \"cut\") {\n                    here = here.join(new Conflicts(0, none$3, value));\n                }\n                else {\n                    here = here.join(new Conflicts(value << 2));\n                    atEnd = atEnd.join(new Conflicts((value << 2) + (prec.type == \"left\" ? 1 : prec.type == \"right\" ? -1 : 0)));\n                }\n            }\n        }\n        return { here, atEnd };\n    }\n    raise(message, pos = 1) {\n        return this.input.raise(message, pos);\n    }\n    warn(message, pos = -1) {\n        let msg = this.input.message(message, pos);\n        if (this.options.warn)\n            this.options.warn(msg);\n        else\n            console.warn(msg);\n    }\n    defineRule(name, choices) {\n        let skip = this.currentSkip[this.currentSkip.length - 1];\n        for (let choice of choices)\n            this.rules.push(new Rule(name, choice.terms, choice.ensureConflicts(), skip));\n    }\n    resolve(expr) {\n        if (expr.namespace) {\n            let ns = this.namespaces[expr.namespace.name];\n            if (!ns)\n                this.raise(`Reference to undefined namespace '${expr.namespace.name}'`, expr.start);\n            return ns.resolve(expr, this);\n        }\n        else {\n            for (let built of this.built)\n                if (built.matches(expr))\n                    return [p(built.term)];\n            let found = this.tokens.getToken(expr);\n            if (found)\n                return [p(found)];\n            for (let ext of this.externalTokens) {\n                let found = ext.getToken(expr);\n                if (found)\n                    return [p(found)];\n            }\n            for (let ext of this.externalSpecializers) {\n                let found = ext.getToken(expr);\n                if (found)\n                    return [p(found)];\n            }\n            let known = this.astRules.find(r => r.rule.id.name == expr.id.name);\n            if (!known)\n                return this.raise(`Reference to undefined rule '${expr.id.name}'`, expr.start);\n            if (known.rule.params.length != expr.args.length)\n                this.raise(`Wrong number or arguments for '${expr.id.name}'`, expr.start);\n            this.used(known.rule.id.name);\n            return [p(this.buildRule(known.rule, expr.args, known.skip))];\n        }\n    }\n    // For tree-balancing reasons, repeat expressions X+ have to be\n    // normalized to something like\n    //\n    //     R -> X | R R\n    //\n    // Returns the `R` term.\n    normalizeRepeat(expr) {\n        let known = this.built.find(b => b.matchesRepeat(expr));\n        if (known)\n            return p(known.term);\n        let name = expr.expr.prec < expr.prec ? `(${expr.expr})+` : `${expr.expr}+`;\n        let term = this.terms.makeRepeat(this.terms.uniqueName(name));\n        this.built.push(new BuiltRule(\"+\", [expr.expr], term));\n        this.defineRule(term, this.normalizeExpr(expr.expr).concat(p(term, term)));\n        return p(term);\n    }\n    normalizeSequence(expr) {\n        let result = expr.exprs.map(e => this.normalizeExpr(e));\n        let builder = this;\n        function complete(start, from, endConflicts) {\n            let { here, atEnd } = builder.conflictsFor(expr.markers[from]);\n            if (from == result.length)\n                return [start.withConflicts(start.terms.length, here.join(endConflicts))];\n            let choices = [];\n            for (let choice of result[from]) {\n                for (let full of complete(start.concat(choice).withConflicts(start.terms.length, here), from + 1, endConflicts.join(atEnd)))\n                    choices.push(full);\n            }\n            return choices;\n        }\n        return complete(Parts.none, 0, Conflicts.none);\n    }\n    normalizeExpr(expr) {\n        if (expr instanceof RepeatExpression && expr.kind == \"?\") {\n            return [Parts.none, ...this.normalizeExpr(expr.expr)];\n        }\n        else if (expr instanceof RepeatExpression) {\n            let repeated = this.normalizeRepeat(expr);\n            return expr.kind == \"+\" ? [repeated] : [Parts.none, repeated];\n        }\n        else if (expr instanceof ChoiceExpression) {\n            return expr.exprs.reduce((o, e) => o.concat(this.normalizeExpr(e)), []);\n        }\n        else if (expr instanceof SequenceExpression) {\n            return this.normalizeSequence(expr);\n        }\n        else if (expr instanceof LiteralExpression) {\n            return [p(this.tokens.getLiteral(expr))];\n        }\n        else if (expr instanceof NameExpression) {\n            return this.resolve(expr);\n        }\n        else if (expr instanceof SpecializeExpression) {\n            return [p(this.resolveSpecialization(expr))];\n        }\n        else if (expr instanceof InlineRuleExpression) {\n            return [p(this.buildRule(expr.rule, none$3, this.currentSkip[this.currentSkip.length - 1], true))];\n        }\n        else {\n            return this.raise(`This type of expression ('${expr}') may not occur in non-token rules`, expr.start);\n        }\n    }\n    buildRule(rule, args, skip, inline = false) {\n        let expr = this.substituteArgs(rule.expr, args, rule.params);\n        let { name: nodeName, props, dynamicPrec, inline: explicitInline, group, exported } = this.nodeInfo(rule.props || none$3, inline ? \"pg\" : \"pgi\", rule.id.name, args, rule.params, rule.expr);\n        if (exported && rule.params.length)\n            this.warn(`Can't export parameterized rules`, rule.start);\n        let name = this.newName(rule.id.name + (args.length ? \"<\" + args.join(\",\") + \">\" : \"\"), nodeName || true, props);\n        if (explicitInline)\n            name.inline = true;\n        if (dynamicPrec)\n            this.registerDynamicPrec(name, dynamicPrec);\n        if ((name.nodeType || exported) && rule.params.length == 0) {\n            if (!nodeName)\n                name.preserve = true;\n            if (!inline)\n                this.namedTerms[rule.id.name] = name;\n        }\n        if (!inline)\n            this.built.push(new BuiltRule(rule.id.name, args, name));\n        this.currentSkip.push(skip);\n        this.defineRule(name, this.normalizeExpr(expr));\n        this.currentSkip.pop();\n        if (group)\n            this.definedGroups.push({ name, group, rule });\n        return name;\n    }\n    nodeInfo(props, \n    // p for dynamic precedence, d for dialect, i for inline, g for group, t for top\n    allow, defaultName = null, args = none$3, params = none$3, expr, defaultProps) {\n        let result = {};\n        let name = defaultName && (allow.indexOf(\"t\") > -1 || !ignored(defaultName)) && !/ /.test(defaultName) ? defaultName : null;\n        let dialect = null, dynamicPrec = 0, inline = false, group = null, exported = false;\n        for (let prop of props) {\n            if (!prop.at) {\n                if (!this.knownProps[prop.name]) {\n                    let builtin = [\"name\", \"dialect\", \"dynamicPrecedence\", \"export\", \"isGroup\"].includes(prop.name)\n                        ? ` (did you mean '@${prop.name}'?)` : \"\";\n                    this.raise(`Unknown prop name '${prop.name}'${builtin}`, prop.start);\n                }\n                result[prop.name] = this.finishProp(prop, args, params);\n            }\n            else if (prop.name == \"name\") {\n                name = this.finishProp(prop, args, params);\n                if (/ /.test(name))\n                    this.raise(`Node names cannot have spaces ('${name}')`, prop.start);\n            }\n            else if (prop.name == \"dialect\") {\n                if (allow.indexOf(\"d\") < 0)\n                    this.raise(\"Can't specify a dialect on non-token rules\", props[0].start);\n                if (prop.value.length != 1 && !prop.value[0].value)\n                    this.raise(\"The '@dialect' rule prop must hold a plain string value\");\n                let dialectID = this.dialects.indexOf(prop.value[0].value);\n                if (dialectID < 0)\n                    this.raise(`Unknown dialect '${prop.value[0].value}'`, prop.value[0].start);\n                dialect = dialectID;\n            }\n            else if (prop.name == \"dynamicPrecedence\") {\n                if (allow.indexOf(\"p\") < 0)\n                    this.raise(\"Dynamic precedence can only be specified on nonterminals\");\n                if (prop.value.length != 1 || !/^-?(?:10|\\d)$/.test(prop.value[0].value))\n                    this.raise(\"The '@dynamicPrecedence' rule prop must hold an integer between -10 and 10\");\n                dynamicPrec = +prop.value[0].value;\n            }\n            else if (prop.name == \"inline\") {\n                if (prop.value.length)\n                    this.raise(\"'@inline' doesn't take a value\", prop.value[0].start);\n                if (allow.indexOf(\"i\") < 0)\n                    this.raise(\"Inline can only be specified on nonterminals\");\n                inline = true;\n            }\n            else if (prop.name == \"isGroup\") {\n                if (allow.indexOf(\"g\") < 0)\n                    this.raise(\"'@isGroup' can only be specified on nonterminals\");\n                group = prop.value.length ? this.finishProp(prop, args, params) : defaultName;\n            }\n            else if (prop.name == \"export\") {\n                if (prop.value.length)\n                    this.raise(\"'@export' doesn't take a value\", prop.value[0].start);\n                exported = true;\n            }\n            else {\n                this.raise(`Unknown built-in prop name '@${prop.name}'`, prop.start);\n            }\n        }\n        if (expr && this.ast.autoDelim && (name || hasProps(result))) {\n            let delim = this.findDelimiters(expr);\n            if (delim) {\n                addToProp(delim[0], \"closedBy\", delim[1].nodeName);\n                addToProp(delim[1], \"openedBy\", delim[0].nodeName);\n            }\n        }\n        if (defaultProps && hasProps(defaultProps)) {\n            for (let prop in defaultProps)\n                if (!(prop in result))\n                    result[prop] = defaultProps[prop];\n        }\n        if (hasProps(result) && !name)\n            this.raise(`Node has properties but no name`, props.length ? props[0].start : expr.start);\n        if (inline && (hasProps(result) || dialect || dynamicPrec))\n            this.raise(`Inline nodes can't have props, dynamic precedence, or a dialect`, props[0].start);\n        if (inline && name)\n            name = null;\n        return { name, props: result, dialect, dynamicPrec, inline, group, exported };\n    }\n    finishProp(prop, args, params) {\n        return prop.value.map(part => {\n            if (part.value)\n                return part.value;\n            let pos = params.findIndex(param => param.name == part.name);\n            if (pos < 0)\n                this.raise(`Property refers to '${part.name}', but no parameter by that name is in scope`, part.start);\n            let expr = args[pos];\n            if (expr instanceof NameExpression && !expr.args.length && !expr.namespace)\n                return expr.id.name;\n            if (expr instanceof LiteralExpression)\n                return expr.value;\n            return this.raise(`Expression '${expr}' can not be used as part of a property value`, part.start);\n        }).join(\"\");\n    }\n    resolveSpecialization(expr) {\n        let type = expr.type;\n        let { name, props, dialect } = this.nodeInfo(expr.props, \"d\");\n        let terminal = this.normalizeExpr(expr.token);\n        if (terminal.length != 1 || terminal[0].terms.length != 1 || !terminal[0].terms[0].terminal)\n            this.raise(`The first argument to '${type}' must resolve to a token`, expr.token.start);\n        let values;\n        if (expr.content instanceof LiteralExpression)\n            values = [expr.content.value];\n        else if ((expr.content instanceof ChoiceExpression) && expr.content.exprs.every(e => e instanceof LiteralExpression))\n            values = expr.content.exprs.map(expr => expr.value);\n        else\n            return this.raise(`The second argument to '${expr.type}' must be a literal or choice of literals`, expr.content.start);\n        let term = terminal[0].terms[0], token = null;\n        let table = this.specialized[term.name] || (this.specialized[term.name] = []);\n        for (let value of values) {\n            let known = table.find(sp => sp.value == value);\n            if (known == null) {\n                if (!token) {\n                    token = this.makeTerminal(term.name + \"/\" + JSON.stringify(value), name, props);\n                    if (dialect != null)\n                        (this.tokens.byDialect[dialect] || (this.tokens.byDialect[dialect] = [])).push(token);\n                }\n                table.push({ value, term: token, type, dialect, name });\n                this.tokenOrigins[token.name] = { spec: term };\n            }\n            else {\n                if (known.type != type)\n                    this.raise(`Conflicting specialization types for ${JSON.stringify(value)} of ${term.name} (${type} vs ${known.type})`, expr.start);\n                if (known.dialect != dialect)\n                    this.raise(`Conflicting dialects for specialization ${JSON.stringify(value)} of ${term.name}`, expr.start);\n                if (known.name != name)\n                    this.raise(`Conflicting names for specialization ${JSON.stringify(value)} of ${term.name}`, expr.start);\n                if (token && known.term != token)\n                    this.raise(`Conflicting specialization tokens for ${JSON.stringify(value)} of ${term.name}`, expr.start);\n                token = known.term;\n            }\n        }\n        return token;\n    }\n    findDelimiters(expr) {\n        if (!(expr instanceof SequenceExpression) || expr.exprs.length < 2)\n            return null;\n        let findToken = (expr) => {\n            if (expr instanceof LiteralExpression)\n                return { term: this.tokens.getLiteral(expr), str: expr.value };\n            if (expr instanceof NameExpression && expr.args.length == 0) {\n                let rule = this.ast.rules.find(r => r.id.name == expr.id.name);\n                if (rule)\n                    return findToken(rule.expr);\n                let token = this.tokens.rules.find(r => r.id.name == expr.id.name);\n                if (token && token.expr instanceof LiteralExpression)\n                    return { term: this.tokens.getToken(expr), str: token.expr.value };\n            }\n            return null;\n        };\n        let lastToken = findToken(expr.exprs[expr.exprs.length - 1]);\n        if (!lastToken || !lastToken.term.nodeName)\n            return null;\n        const brackets = [\"()\", \"[]\", \"{}\", \"<>\"];\n        let bracket = brackets.find(b => lastToken.str.indexOf(b[1]) > -1 && lastToken.str.indexOf(b[0]) < 0);\n        if (!bracket)\n            return null;\n        let firstToken = findToken(expr.exprs[0]);\n        if (!firstToken || !firstToken.term.nodeName ||\n            firstToken.str.indexOf(bracket[0]) < 0 || firstToken.str.indexOf(bracket[1]) > -1)\n            return null;\n        return [firstToken.term, lastToken.term];\n    }\n    registerDynamicPrec(term, prec) {\n        this.dynamicRulePrecedences.push({ rule: term, prec });\n        term.preserve = true;\n    }\n    defineGroup(rule, group, ast) {\n        var _a;\n        let recur = [];\n        let getNamed = (rule) => {\n            if (rule.nodeName)\n                return [rule];\n            if (recur.includes(rule))\n                this.raise(`Rule '${ast.id.name}' cannot define a group because it contains a non-named recursive rule ('${rule.name}')`, ast.start);\n            let result = [];\n            recur.push(rule);\n            for (let r of this.rules)\n                if (r.name == rule) {\n                    let names = r.parts.map(getNamed).filter(x => x.length);\n                    if (names.length > 1)\n                        this.raise(`Rule '${ast.id.name}' cannot define a group because some choices produce multiple named nodes`, ast.start);\n                    if (names.length == 1)\n                        for (let n of names[0])\n                            result.push(n);\n                }\n            recur.pop();\n            return result;\n        };\n        for (let name of getNamed(rule))\n            name.props[\"group\"] = (((_a = name.props[\"group\"]) === null || _a === void 0 ? void 0 : _a.split(\" \")) || []).concat(group).sort().join(\" \");\n    }\n    checkGroups() {\n        let groups = Object.create(null), nodeNames = Object.create(null);\n        for (let term of this.terms.terms)\n            if (term.nodeName) {\n                nodeNames[term.nodeName] = true;\n                if (term.props[\"group\"])\n                    for (let group of term.props[\"group\"].split(\" \")) {\n                        (groups[group] || (groups[group] = [])).push(term);\n                    }\n            }\n        let names = Object.keys(groups);\n        for (let i = 0; i < names.length; i++) {\n            let name = names[i], terms = groups[name];\n            if (nodeNames[name])\n                this.warn(`Group name '${name}' conflicts with a node of the same name`);\n            for (let j = i + 1; j < names.length; j++) {\n                let other = groups[names[j]];\n                if (terms.some(t => other.includes(t)) &&\n                    (terms.length > other.length ? other.some(t => !terms.includes(t)) : terms.some(t => !other.includes(t))))\n                    this.warn(`Groups '${name}' and '${names[j]}' overlap without one being a superset of the other`);\n            }\n        }\n    }\n}\nconst MinSharedActions = 5;\nclass FinishStateContext {\n    constructor(tokenizers, data, stateArray, skipData, skipInfo, states, builder) {\n        this.tokenizers = tokenizers;\n        this.data = data;\n        this.stateArray = stateArray;\n        this.skipData = skipData;\n        this.skipInfo = skipInfo;\n        this.states = states;\n        this.builder = builder;\n        this.sharedActions = [];\n    }\n    findSharedActions(state) {\n        if (state.actions.length < MinSharedActions)\n            return null;\n        let found = null;\n        for (let shared of this.sharedActions) {\n            if ((!found || shared.actions.length > found.actions.length) &&\n                shared.actions.every(a => state.actions.some(b => b.eq(a))))\n                found = shared;\n        }\n        if (found)\n            return found;\n        let max = null, scratch = [];\n        for (let i = state.id + 1; i < this.states.length; i++) {\n            let other = this.states[i], fill = 0;\n            if (other.defaultReduce || other.actions.length < MinSharedActions)\n                continue;\n            for (let a of state.actions)\n                for (let b of other.actions)\n                    if (a.eq(b))\n                        scratch[fill++] = a;\n            if (fill >= MinSharedActions && (!max || max.length < fill)) {\n                max = scratch;\n                scratch = [];\n            }\n        }\n        if (!max)\n            return null;\n        let result = { actions: max, addr: this.storeActions(max, -1, null) };\n        this.sharedActions.push(result);\n        return result;\n    }\n    storeActions(actions, skipReduce, shared) {\n        if (skipReduce < 0 && shared && shared.actions.length == actions.length)\n            return shared.addr;\n        let data = [];\n        for (let action of actions) {\n            if (shared && shared.actions.some(a => a.eq(action)))\n                continue;\n            if (action instanceof Shift) {\n                data.push(action.term.id, action.target.id, 0);\n            }\n            else {\n                let code = reduceAction(action.rule, this.skipInfo);\n                if (code != skipReduce)\n                    data.push(action.term.id, code & 65535 /* ValueMask */, code >> 16);\n            }\n        }\n        data.push(65535 /* End */);\n        if (skipReduce > -1)\n            data.push(2 /* Other */, skipReduce & 65535 /* ValueMask */, skipReduce >> 16);\n        else if (shared)\n            data.push(1 /* Next */, shared.addr & 0xffff, shared.addr >> 16);\n        else\n            data.push(0 /* Done */);\n        return this.data.storeArray(data);\n    }\n    finish(state, isSkip, forcedReduce) {\n        let b = this.builder;\n        let skipID = b.skipRules.indexOf(state.skip);\n        let skipTable = this.skipData[skipID], skipTerms = this.skipInfo[skipID].startTokens;\n        let defaultReduce = state.defaultReduce ? reduceAction(state.defaultReduce, this.skipInfo) : 0;\n        let flags = (isSkip ? 1 /* Skipped */ : 0) |\n            (state.nested > -1 ? 4 /* StartNest */ | (state.nested << 10 /* NestShift */) : 0);\n        let skipReduce = -1, shared = null;\n        if (defaultReduce == 0) {\n            for (const action of state.actions)\n                if (action instanceof Reduce && action.term.eof && this.skipInfo.some(i => i.rule == action.rule.name))\n                    skipReduce = reduceAction(action.rule, this.skipInfo);\n            if (skipReduce < 0)\n                shared = this.findSharedActions(state);\n        }\n        if (state.set.some(p => p.rule.name.top && p.pos == p.rule.parts.length))\n            flags |= 2 /* Accepting */;\n        let external = [];\n        for (let i = 0; i < state.actions.length + skipTerms.length; i++) {\n            let term = i < state.actions.length ? state.actions[i].term : skipTerms[i - state.actions.length];\n            for (;;) {\n                let orig = b.tokenOrigins[term.name];\n                if (orig && orig.spec) {\n                    term = orig.spec;\n                    continue;\n                }\n                if (orig && (orig.external instanceof ExternalTokenSet))\n                    addToSet(external, orig.external.ast);\n                break;\n            }\n        }\n        external.sort((a, b) => a.start - b.start);\n        let tokenizerMask = 0;\n        for (let i = 0; i < this.tokenizers.length; i++) {\n            let tok = this.tokenizers[i];\n            if (tok instanceof ExternalTokenDeclaration ? external.includes(tok) : tok.id == state.tokenGroup)\n                tokenizerMask |= (1 << i);\n        }\n        let base = state.id * 6 /* Size */;\n        this.stateArray[base + 0 /* Flags */] = flags;\n        this.stateArray[base + 1 /* Actions */] = this.storeActions(defaultReduce ? none$3 : state.actions, skipReduce, shared);\n        this.stateArray[base + 2 /* Skip */] = skipTable;\n        this.stateArray[base + 3 /* TokenizerMask */] = tokenizerMask;\n        this.stateArray[base + 4 /* DefaultReduce */] = defaultReduce;\n        this.stateArray[base + 5 /* ForcedReduce */] = forcedReduce;\n    }\n}\nfunction addToProp(term, prop, value) {\n    let cur = term.props[prop];\n    if (!cur || cur.split(\" \").indexOf(value) < 0)\n        term.props[prop] = cur ? cur + \" \" + value : value;\n}\nfunction buildSpecializeTable(spec) {\n    let table = Object.create(null);\n    for (let { value, term, type } of spec) {\n        let code = type == \"specialize\" ? 0 /* Specialize */ : 1 /* Extend */;\n        table[value] = (term.id << 1) | code;\n    }\n    return table;\n}\nfunction reduceAction(rule, skipInfo, depth = rule.parts.length) {\n    return rule.name.id | 65536 /* ReduceFlag */ |\n        (rule.isRepeatWrap && depth == rule.parts.length ? 131072 /* RepeatFlag */ : 0) |\n        (skipInfo.some(i => i.rule == rule.name) ? 262144 /* StayFlag */ : 0) |\n        (depth << 19 /* ReduceDepthShift */);\n}\nfunction findArray(data, value) {\n    search: for (let i = 0;;) {\n        let next = data.indexOf(value[0], i);\n        if (next == -1 || next + value.length > data.length)\n            break;\n        for (let j = 1; j < value.length; j++) {\n            if (value[j] != data[next + j]) {\n                i = next + 1;\n                continue search;\n            }\n        }\n        return next;\n    }\n    return -1;\n}\nfunction findSkipStates(table, startRules) {\n    let nonSkip = Object.create(null);\n    let work = [];\n    let add = (state) => {\n        if (!nonSkip[state.id]) {\n            nonSkip[state.id] = true;\n            work.push(state);\n        }\n    };\n    for (let state of table)\n        if (state.startRule && startRules.includes(state.startRule))\n            add(state);\n    for (let i = 0; i < work.length; i++) {\n        for (let a of work[i].actions)\n            if (a instanceof Shift)\n                add(a.target);\n        for (let a of work[i].goto)\n            add(a.target);\n    }\n    return (id) => !nonSkip[id];\n}\nclass DataBuilder {\n    constructor() {\n        this.data = [];\n    }\n    storeArray(data) {\n        let found = findArray(this.data, data);\n        if (found > -1)\n            return found;\n        let pos = this.data.length;\n        for (let num of data)\n            this.data.push(num);\n        return pos;\n    }\n    finish() {\n        return Uint16Array.from(this.data);\n    }\n}\n// The goto table maps a start state + a term to a new state, and is\n// used to determine the new state when reducing. Because this allows\n// more more efficient representation and access, unlike the action\n// tables, the goto table is organized by term, with groups of start\n// states that map to a given end state enumerated for each term.\n// Since many terms only have a single valid goto target, this makes\n// it cheaper to look those up.\n//\n// (Unfortunately, though the standard LR parsing mechanism never\n// looks up invalid goto states, the incremental parsing mechanism\n// needs accurate goto information for a state/term pair, so we do\n// need to store state ids even for terms that have only one target.)\n//\n// - First comes the amount of terms in the table\n//\n// - Then, for each term, the offset of the term's data\n//\n// - At these offsets, there's a record for each target state\n//\n//   - Such a record starts with the amount of start states that go to\n//     this target state, shifted one to the left, with the first bit\n//     only set if this is the last record for this term.\n//\n//   - Then follows the target state id\n//\n//   - And then the start state ids\nfunction computeGotoTable(states) {\n    let goto = {};\n    let maxTerm = 0;\n    for (let state of states) {\n        for (let entry of state.goto) {\n            maxTerm = Math.max(entry.term.id, maxTerm);\n            let set = goto[entry.term.id] || (goto[entry.term.id] = {});\n            (set[entry.target.id] || (set[entry.target.id] = [])).push(state.id);\n        }\n    }\n    let data = new DataBuilder;\n    let index = [];\n    let offset = maxTerm + 2; // Offset of the data, taking index size into account\n    for (let term = 0; term <= maxTerm; term++) {\n        let entries = goto[term];\n        if (!entries) {\n            index.push(1);\n            continue;\n        }\n        let termTable = [];\n        let keys = Object.keys(entries);\n        for (let target of keys) {\n            let list = entries[target];\n            termTable.push((target == keys[keys.length - 1] ? 1 : 0) + (list.length << 1));\n            termTable.push(+target);\n            for (let source of list)\n                termTable.push(source);\n        }\n        index.push(data.storeArray(termTable) + offset);\n    }\n    if (index.some(n => n > 0xffff))\n        throw new GenError(\"Goto table too large\");\n    return Uint16Array.from([maxTerm + 1, ...index, ...data.data]);\n}\nclass TokenGroup {\n    constructor(tokens, id) {\n        this.tokens = tokens;\n        this.id = id;\n    }\n}\nfunction addToSet(set, value) {\n    if (!set.includes(value))\n        set.push(value);\n}\nfunction buildTokenMasks(groups) {\n    let masks = Object.create(null);\n    for (let group of groups) {\n        let groupMask = 1 << group.id;\n        for (let term of group.tokens) {\n            masks[term.id] = (masks[term.id] || 0) | groupMask;\n        }\n    }\n    return masks;\n}\nclass NestedParserSpec {\n    constructor(placeholder, name, extName, source, end) {\n        this.placeholder = placeholder;\n        this.name = name;\n        this.extName = extName;\n        this.source = source;\n        this.end = end;\n    }\n}\nclass NestNamespace {\n    resolve(expr, builder) {\n        if (expr.args.length > 2)\n            builder.raise(`Too many arguments to 'nest.${expr.id.name}'`, expr.start);\n        let [endExpr, defaultExpr] = expr.args;\n        let extGrammar = builder.ast.grammars.find(g => g.id.name == expr.id.name);\n        if (!extGrammar)\n            return builder.raise(`No external grammar '${expr.id.name}' defined`, expr.id.start);\n        let placeholder = builder.newName(expr.id.name + \"-placeholder\", true);\n        builder.defineRule(placeholder, defaultExpr ? builder.normalizeExpr(defaultExpr) : []);\n        if (!endExpr && !(endExpr = findExprAfter(builder.ast, expr)))\n            return builder.raise(`No end token specified, and no token found directly after the nest expression`, expr.start);\n        let endStart = new State, endEnd = new State([builder.terms.eof]);\n        try {\n            builder.tokens.build(endExpr, endStart, endEnd, none$3);\n        }\n        catch (e) {\n            if (!(e instanceof SyntaxError))\n                throw e;\n            builder.raise(`End token '${endExpr}' for nested grammar is not a valid token expression`, endExpr.start);\n        }\n        builder.nestedParsers.push(new NestedParserSpec(placeholder, extGrammar.id.name, extGrammar.externalID.name, extGrammar.source, endStart));\n        if (builder.nestedParsers.length >= 2 ** (30 - 10 /* NestShift */))\n            builder.raise(\"Too many nested grammars used\");\n        return [p(placeholder)];\n    }\n}\nfunction findExprAfter(ast, expr) {\n    let found;\n    function walk(cur) {\n        if (cur instanceof SequenceExpression) {\n            let index = cur.exprs.indexOf(expr);\n            if (index > -1 && index < cur.exprs.length - 1)\n                found = cur.exprs[index + 1];\n        }\n        return cur;\n    }\n    for (let rule of ast.rules)\n        rule.expr.walk(walk);\n    for (let topRule of ast.topRules)\n        topRule.expr.walk(walk);\n    return found;\n}\nclass TokenArg {\n    constructor(name, expr, scope) {\n        this.name = name;\n        this.expr = expr;\n        this.scope = scope;\n    }\n}\nclass BuildingRule {\n    constructor(name, start, to, args) {\n        this.name = name;\n        this.start = start;\n        this.to = to;\n        this.args = args;\n    }\n}\nclass TokenSet {\n    constructor(b, ast) {\n        this.b = b;\n        this.ast = ast;\n        this.startState = new State;\n        this.built = [];\n        this.building = []; // Used for recursion check\n        this.byDialect = Object.create(null);\n        this.precedenceRelations = [];\n        this.explicitConflicts = [];\n        this.rules = ast ? ast.rules : none$3;\n        for (let rule of this.rules)\n            this.b.unique(rule.id);\n    }\n    getToken(expr) {\n        for (let built of this.built)\n            if (built.matches(expr))\n                return built.term;\n        let name = expr.id.name;\n        let rule = this.rules.find(r => r.id.name == name);\n        if (!rule)\n            return null;\n        let { name: nodeName, props, dialect, exported } = this.b.nodeInfo(rule.props, \"d\", name, expr.args, rule.params.length != expr.args.length ? none$3 : rule.params);\n        let term = this.b.makeTerminal(expr.toString(), nodeName, props);\n        if (dialect != null)\n            (this.byDialect[dialect] || (this.byDialect[dialect] = [])).push(term);\n        if ((term.nodeType || exported) && rule.params.length == 0) {\n            if (!term.nodeType)\n                term.preserve = true;\n            this.b.namedTerms[name] = term;\n        }\n        this.buildRule(rule, expr, this.startState, new State([term]));\n        this.built.push(new BuiltRule(name, expr.args, term));\n        return term;\n    }\n    getLiteral(expr) {\n        let id = JSON.stringify(expr.value);\n        for (let built of this.built)\n            if (built.id == id)\n                return built.term;\n        let name = null, props = {}, dialect = null;\n        let decl = this.ast ? this.ast.literals.find(l => l.literal == expr.value) : null;\n        if (decl)\n            ({ name, props, dialect } = this.b.nodeInfo(decl.props, \"d\", expr.value));\n        let term = this.b.makeTerminal(id, name, props);\n        if (dialect != null)\n            (this.byDialect[dialect] || (this.byDialect[dialect] = [])).push(term);\n        this.build(expr, this.startState, new State([term]), none$3);\n        this.built.push(new BuiltRule(id, none$3, term));\n        return term;\n    }\n    buildRule(rule, expr, from, to, args = none$3) {\n        let name = expr.id.name;\n        if (rule.params.length != expr.args.length)\n            this.b.raise(`Incorrect number of arguments for token '${name}'`, expr.start);\n        let building = this.building.find(b => b.name == name && exprsEq(expr.args, b.args));\n        if (building) {\n            if (building.to == to) {\n                from.nullEdge(building.start);\n                return;\n            }\n            let lastIndex = this.building.length - 1;\n            while (this.building[lastIndex].name != name)\n                lastIndex--;\n            this.b.raise(`Invalid (non-tail) recursion in token rules: ${this.building.slice(lastIndex).map(b => b.name).join(\" -> \")}`, expr.start);\n        }\n        this.b.used(rule.id.name);\n        let start = new State;\n        from.nullEdge(start);\n        this.building.push(new BuildingRule(name, start, to, expr.args));\n        this.build(this.b.substituteArgs(rule.expr, expr.args, rule.params), start, to, expr.args.map((e, i) => new TokenArg(rule.params[i].name, e, args)));\n        this.building.pop();\n    }\n    build(expr, from, to, args) {\n        if (expr instanceof NameExpression) {\n            if (expr.namespace) {\n                if (expr.namespace.name == \"std\")\n                    return this.buildStd(expr, from, to);\n                this.b.raise(`Unknown namespace '${expr.namespace.name}'`, expr.start);\n            }\n            let name = expr.id.name, arg = args.find(a => a.name == name);\n            if (arg)\n                return this.build(arg.expr, from, to, arg.scope);\n            let rule = this.rules.find(r => r.id.name == name);\n            if (!rule)\n                return this.b.raise(`Reference to rule '${expr.id.name}', which isn't found in this token group`, expr.start);\n            this.buildRule(rule, expr, from, to, args);\n        }\n        else if (expr instanceof ChoiceExpression) {\n            for (let choice of expr.exprs)\n                this.build(choice, from, to, args);\n        }\n        else if (isEmpty(expr)) {\n            from.nullEdge(to);\n        }\n        else if (expr instanceof SequenceExpression) {\n            let conflict = expr.markers.find(c => c.length > 0);\n            if (conflict)\n                this.b.raise(\"Conflict marker in token expression\", conflict[0].start);\n            for (let i = 0; i < expr.exprs.length; i++) {\n                let next = i == expr.exprs.length - 1 ? to : new State;\n                this.build(expr.exprs[i], from, next, args);\n                from = next;\n            }\n        }\n        else if (expr instanceof RepeatExpression) {\n            if (expr.kind == \"*\") {\n                let loop = new State;\n                from.nullEdge(loop);\n                this.build(expr.expr, loop, loop, args);\n                loop.nullEdge(to);\n            }\n            else if (expr.kind == \"+\") {\n                let loop = new State;\n                this.build(expr.expr, from, loop, args);\n                this.build(expr.expr, loop, loop, args);\n                loop.nullEdge(to);\n            }\n            else { // expr.kind == \"?\"\n                from.nullEdge(to);\n                this.build(expr.expr, from, to, args);\n            }\n        }\n        else if (expr instanceof SetExpression) {\n            for (let [a, b] of expr.inverted ? invertRanges(expr.ranges) : expr.ranges)\n                rangeEdges(from, to, a, b);\n        }\n        else if (expr instanceof LiteralExpression) {\n            for (let i = 0; i < expr.value.length; i++) {\n                let ch = expr.value.charCodeAt(i);\n                let next = i == expr.value.length - 1 ? to : new State;\n                from.edge(ch, ch + 1, next);\n                from = next;\n            }\n        }\n        else if (expr instanceof AnyExpression) {\n            from.edge(0, MAX_CHAR + 1, to);\n        }\n        else {\n            return this.b.raise(`Unrecognized expression type in token`, expr.start);\n        }\n    }\n    buildStd(expr, from, to) {\n        if (expr.args.length)\n            this.b.raise(`'std.${expr.id.name}' does not take arguments`, expr.args[0].start);\n        if (!STD_RANGES.hasOwnProperty(expr.id.name))\n            this.b.raise(`There is no builtin rule 'std.${expr.id.name}'`, expr.start);\n        for (let [a, b] of STD_RANGES[expr.id.name])\n            from.edge(a, b, to);\n    }\n    takePrecedences() {\n        let rel = this.precedenceRelations = [];\n        if (this.ast)\n            for (let group of this.ast.precedences) {\n                let prev = [];\n                for (let item of group.items) {\n                    let level = [];\n                    if (item instanceof NameExpression) {\n                        for (let built of this.built)\n                            if (item.args.length ? built.matches(item) : built.id == item.id.name)\n                                level.push(built.term);\n                    }\n                    else {\n                        let id = JSON.stringify(item.value), found = this.built.find(b => b.id == id);\n                        if (found)\n                            level.push(found.term);\n                    }\n                    if (!level.length)\n                        this.b.warn(`Precedence specified for unknown token ${item}`, item.start);\n                    for (let term of level)\n                        addRel(rel, term, prev);\n                    prev = prev.concat(level);\n                }\n            }\n    }\n    takeConflicts() {\n        var _a;\n        let resolve = (expr) => {\n            if (expr instanceof NameExpression) {\n                for (let built of this.built)\n                    if (built.matches(expr))\n                        return built.term;\n            }\n            else {\n                let id = JSON.stringify(expr.value), found = this.built.find(b => b.id == id);\n                if (found)\n                    return found.term;\n            }\n            this.b.warn(`Precedence specified for unknown token ${expr}`, expr.start);\n            return null;\n        };\n        for (let c of ((_a = this.ast) === null || _a === void 0 ? void 0 : _a.conflicts) || []) {\n            let a = resolve(c.a), b = resolve(c.b);\n            if (a && b) {\n                if (a.id < b.id)\n                    [a, b] = [b, a];\n                this.explicitConflicts.push({ a, b });\n            }\n        }\n    }\n    precededBy(a, b) {\n        let found = this.precedenceRelations.find(r => r.term == a);\n        return found && found.after.includes(b);\n    }\n    // Token groups are a mechanism for allowing conflicting (matching\n    // overlapping input, without an explicit precedence being given)\n    // tokens to exist in a grammar _if_ they don't occur in the same\n    // place (aren't used in the same states).\n    //\n    // States that use tokens that conflict will raise an error when any\n    // of the conflicting pairs of tokens both occur in that state.\n    // Otherwise, they are assigned a token group, which includes all\n    // the potentially-conflicting tokens they use. If there's already a\n    // group that doesn't have any conflicts with those tokens, that is\n    // reused, otherwise a new group is created.\n    //\n    // So each state has zero or one token groups, and each conflicting\n    // token may belong to one or more groups. Tokens get assigned a\n    // 16-bit bitmask with the groups they belong to set to 1 (all-1s\n    // for non-conflicting tokens). When tokenizing, that mask is\n    // compared to the current state's group (again using all-1s for\n    // group-less states) to determine whether a token is applicable for\n    // this state.\n    //\n    // Extended/specialized tokens are treated as their parent token for\n    // this purpose.\n    buildTokenGroups(states, skipInfo) {\n        let tokens = this.startState.compile();\n        if (tokens.accepting.length)\n            this.b.raise(`Grammar contains zero-length tokens (in '${tokens.accepting[0].name}')`, this.rules.find(r => r.id.name == tokens.accepting[0].name).start);\n        if (/\\btokens\\b/.test(verbose))\n            console.log(tokens.toString());\n        // If there is a precedence specified for the pair, the conflict is resolved\n        let allConflicts = tokens.findConflicts(checkTogether(states, this.b, skipInfo))\n            .filter(({ a, b }) => !this.precededBy(a, b) && !this.precededBy(b, a));\n        for (let { a, b } of this.explicitConflicts) {\n            if (!allConflicts.some(c => c.a == a && c.b == b))\n                allConflicts.push(new Conflict(a, b, 0, \"\", \"\"));\n        }\n        let softConflicts = allConflicts.filter(c => c.soft), conflicts = allConflicts.filter(c => !c.soft);\n        let errors = [];\n        let groups = [];\n        for (let state of states) {\n            if (state.defaultReduce)\n                continue;\n            // Find potentially-conflicting terms (in terms) and the things\n            // they conflict with (in conflicts), and raise an error if\n            // there's a token conflict directly in this state.\n            let terms = [], incompatible = [];\n            let skip = skipInfo[this.b.skipRules.indexOf(state.skip)].startTokens;\n            for (let term of skip)\n                if (state.actions.some(a => a.term == term))\n                    this.b.raise(`Use of token ${term.name} conflicts with skip rule`);\n            let stateTerms = [];\n            for (let i = 0; i < state.actions.length + (skip ? skip.length : 0); i++) {\n                let term = i < state.actions.length ? state.actions[i].term : skip[i - state.actions.length];\n                let orig = this.b.tokenOrigins[term.name];\n                if (orig && orig.spec)\n                    term = orig.spec;\n                else if (orig && orig.external)\n                    continue;\n                addToSet(stateTerms, term);\n            }\n            if (stateTerms.length == 0)\n                continue;\n            for (let term of stateTerms) {\n                for (let conflict of conflicts) {\n                    let conflicting = conflict.a == term ? conflict.b : conflict.b == term ? conflict.a : null;\n                    if (!conflicting)\n                        continue;\n                    if (stateTerms.includes(conflicting) && !errors.some(e => e.conflict == conflict)) {\n                        let example = conflict.exampleA ? ` (example: ${JSON.stringify(conflict.exampleA)}${conflict.exampleB ? ` vs ${JSON.stringify(conflict.exampleB)}` : \"\"})` : \"\";\n                        errors.push({\n                            error: `Overlapping tokens ${term.name} and ${conflicting.name} used in same context${example}\\n` +\n                                `After: ${state.set[0].trail()}`,\n                            conflict\n                        });\n                    }\n                    addToSet(terms, term);\n                    addToSet(incompatible, conflicting);\n                }\n            }\n            let tokenGroup = null;\n            for (let group of groups) {\n                if (incompatible.some(term => group.tokens.includes(term)))\n                    continue;\n                for (let term of terms)\n                    addToSet(group.tokens, term);\n                tokenGroup = group;\n                break;\n            }\n            if (!tokenGroup) {\n                tokenGroup = new TokenGroup(terms, groups.length);\n                groups.push(tokenGroup);\n            }\n            state.tokenGroup = tokenGroup.id;\n        }\n        if (errors.length)\n            this.b.raise(errors.map(e => e.error).join(\"\\n\\n\"));\n        if (groups.length > 16)\n            this.b.raise(`Too many different token groups (${groups.length}) to represent them as a 16-bit bitfield`);\n        let precTable = [], rel = this.precedenceRelations.slice();\n        // Add entries for soft-conflicting tokens that are in the\n        // precedence table, to make sure they'll appear in the right\n        // order and don't mess up the longer-wins default rule.\n        for (let { a, b, soft } of softConflicts)\n            if (soft) {\n                if (!rel.some(r => r.term == a) || !rel.some(r => r.term == b))\n                    continue;\n                if (soft < 0)\n                    [a, b] = [b, a]; // Now a is longer than b (and should thus take precedence)\n                addRel(rel, b, [a]);\n                addRel(rel, a, []);\n            }\n        add: while (rel.length) {\n            for (let i = 0; i < rel.length; i++) {\n                let record = rel[i];\n                if (record.after.every(t => precTable.includes(t.id))) {\n                    precTable.push(record.term.id);\n                    if (rel.length == 1)\n                        break add;\n                    rel[i] = rel.pop();\n                    continue add;\n                }\n            }\n            this.b.raise(`Cyclic token precedence relation between ${rel.map(r => r.term).join(\", \")}`);\n        }\n        precTable = precTable.filter(id => allConflicts.some(c => !c.soft && (c.a.id == id || c.b.id == id)));\n        return {\n            tokenGroups: groups,\n            tokenPrec: precTable,\n            tokenData: tokens.toArray(buildTokenMasks(groups), precTable)\n        };\n    }\n}\nfunction checkTogether(states, b, skipInfo) {\n    let cache = Object.create(null);\n    function hasTerm(state, term) {\n        return state.actions.some(a => a.term == term) ||\n            skipInfo[b.skipRules.indexOf(state.skip)].startTokens.includes(term);\n    }\n    return (a, b) => {\n        if (a.id < b.id)\n            [a, b] = [b, a];\n        let key = a.id | (b.id << 16), cached = cache[key];\n        if (cached != null)\n            return cached;\n        return cache[key] = states.some(state => hasTerm(state, a) && hasTerm(state, b));\n    };\n}\nfunction invertRanges(ranges) {\n    let pos = 0, result = [];\n    for (let [a, b] of ranges) {\n        if (a > pos)\n            result.push([pos, a]);\n        pos = b;\n    }\n    if (pos <= MAX_CODE)\n        result.push([pos, MAX_CODE + 1]);\n    return result;\n}\nconst ASTRAL = 0x10000, GAP_START = 0xd800, GAP_END = 0xe000, MAX_CODE = 0x10ffff;\nconst LOW_SURR_B = 0xdc00, HIGH_SURR_B = 0xdfff;\n// Create intermediate states for astral characters in a range, if\n// necessary, since the tokenizer acts on UTF16 characters\nfunction rangeEdges(from, to, low, hi) {\n    if (low < GAP_START && hi == MAX_CODE + 1) {\n        from.edge(low, MAX_CHAR + 1, to);\n        return;\n    }\n    if (low < ASTRAL) {\n        if (low < GAP_START)\n            from.edge(low, Math.min(hi, GAP_START), to);\n        if (hi > GAP_END)\n            from.edge(Math.max(low, GAP_END), Math.min(hi, MAX_CHAR + 1), to);\n        low = ASTRAL;\n    }\n    if (hi < ASTRAL)\n        return;\n    let lowStr = String.fromCodePoint(low), hiStr = String.fromCodePoint(hi - 1);\n    let lowA = lowStr.charCodeAt(0), lowB = lowStr.charCodeAt(1);\n    let hiA = hiStr.charCodeAt(0), hiB = hiStr.charCodeAt(1);\n    if (lowA == hiA) { // Share the first char code\n        let hop = new State;\n        from.edge(lowA, lowA + 1, hop);\n        hop.edge(lowB, hiB + 1, to);\n    }\n    else {\n        let midStart = lowA, midEnd = hiA;\n        if (lowB > LOW_SURR_B) {\n            midStart++;\n            let hop = new State;\n            from.edge(lowA, lowA + 1, hop);\n            hop.edge(lowB, HIGH_SURR_B + 1, to);\n        }\n        if (hiB < HIGH_SURR_B) {\n            midEnd--;\n            let hop = new State;\n            from.edge(hiA, hiA + 1, hop);\n            hop.edge(LOW_SURR_B, hiB + 1, to);\n        }\n        if (midStart <= midEnd) {\n            let hop = new State;\n            from.edge(midStart, midEnd + 1, hop);\n            hop.edge(LOW_SURR_B, HIGH_SURR_B + 1, to);\n        }\n    }\n}\nconst STD_RANGES = {\n    asciiLetter: [[65, 91], [97, 123]],\n    asciiLowercase: [[97, 123]],\n    asciiUppercase: [[65, 91]],\n    digit: [[48, 58]],\n    whitespace: [[9, 14], [32, 33], [133, 134], [160, 161], [5760, 5761], [8192, 8203],\n        [8232, 8234], [8239, 8240], [8287, 8288], [12288, 12289]]\n};\nfunction isEmpty(expr) {\n    return expr instanceof SequenceExpression && expr.exprs.length == 0;\n}\nfunction gatherExtTokens(b, tokens) {\n    let result = Object.create(null);\n    for (let token of tokens) {\n        b.unique(token.id);\n        let { name, props, dialect } = b.nodeInfo(token.props, \"d\", token.id.name);\n        let term = b.makeTerminal(token.id.name, name, props);\n        if (dialect != null)\n            (b.tokens.byDialect[dialect] || (b.tokens.byDialect[dialect] = [])).push(term);\n        b.namedTerms[token.id.name] = result[token.id.name] = term;\n    }\n    return result;\n}\nfunction findExtToken(b, tokens, expr) {\n    let found = tokens[expr.id.name];\n    if (!found)\n        return null;\n    if (expr.args.length)\n        b.raise(\"External tokens cannot take arguments\", expr.args[0].start);\n    b.used(expr.id.name);\n    return found;\n}\nfunction addRel(rel, term, after) {\n    let found = rel.findIndex(r => r.term == term);\n    if (found < 0)\n        rel.push({ term, after });\n    else\n        rel[found] = { term, after: rel[found].after.concat(after) };\n}\nclass ExternalTokenSet {\n    constructor(b, ast) {\n        this.b = b;\n        this.ast = ast;\n        this.tokens = gatherExtTokens(b, ast.tokens);\n        for (let name in this.tokens)\n            this.b.tokenOrigins[this.tokens[name].name] = { external: this };\n    }\n    getToken(expr) { return findExtToken(this.b, this.tokens, expr); }\n}\nclass ExternalSpecializer {\n    constructor(b, ast) {\n        this.b = b;\n        this.ast = ast;\n        this.term = null;\n        this.tokens = gatherExtTokens(b, ast.tokens);\n    }\n    finish() {\n        let terms = this.b.normalizeExpr(this.ast.token);\n        if (terms.length != 1 || terms[0].terms.length != 1 || !terms[0].terms[0].terminal)\n            this.b.raise(`The token expression to '@external ${this.ast.type}' must resolve to a token`, this.ast.token.start);\n        this.term = terms[0].terms[0];\n        for (let name in this.tokens)\n            this.b.tokenOrigins[this.tokens[name].name] = { spec: this.term, external: this };\n    }\n    getToken(expr) { return findExtToken(this.b, this.tokens, expr); }\n}\nfunction inlineRules(rules, preserve) {\n    for (let pass = 0;; pass++) {\n        let inlinable = Object.create(null), found;\n        if (pass == 0)\n            for (let rule of rules) {\n                if (rule.name.inline && !inlinable[rule.name.name]) {\n                    let group = rules.filter(r => r.name == rule.name);\n                    if (group.some(r => r.parts.includes(rule.name)))\n                        continue;\n                    found = inlinable[rule.name.name] = group;\n                }\n            }\n        for (let i = 0; i < rules.length; i++) {\n            let rule = rules[i];\n            if (!rule.name.interesting && !rule.parts.includes(rule.name) && rule.parts.length < 3 &&\n                !preserve.includes(rule.name) &&\n                (rule.parts.length == 1 || rules.every(other => other.skip == rule.skip || !other.parts.includes(rule.name))) &&\n                !rule.parts.some(p => !!inlinable[p.name]) &&\n                !rules.some((r, j) => j != i && r.name == rule.name))\n                found = inlinable[rule.name.name] = [rule];\n        }\n        if (!found)\n            return rules;\n        let newRules = [];\n        for (let rule of rules) {\n            if (inlinable[rule.name.name])\n                continue;\n            if (!rule.parts.some(p => !!inlinable[p.name])) {\n                newRules.push(rule);\n                continue;\n            }\n            function expand(at, conflicts, parts) {\n                if (at == rule.parts.length) {\n                    newRules.push(new Rule(rule.name, parts, conflicts, rule.skip));\n                    return;\n                }\n                let next = rule.parts[at], replace = inlinable[next.name];\n                if (!replace) {\n                    expand(at + 1, conflicts.concat(rule.conflicts[at + 1]), parts.concat(next));\n                    return;\n                }\n                for (let r of replace)\n                    expand(at + 1, conflicts.slice(0, conflicts.length - 1)\n                        .concat(conflicts[at].join(r.conflicts[0]))\n                        .concat(r.conflicts.slice(1, r.conflicts.length - 1))\n                        .concat(rule.conflicts[at + 1].join(r.conflicts[r.conflicts.length - 1])), parts.concat(r.parts));\n            }\n            expand(0, [rule.conflicts[0]], []);\n        }\n        rules = newRules;\n    }\n}\nfunction mergeRules(rules) {\n    let merged = Object.create(null), found;\n    for (let i = 0; i < rules.length;) {\n        let groupStart = i;\n        let name = rules[i++].name;\n        while (i < rules.length && rules[i].name == name)\n            i++;\n        let size = i - groupStart;\n        if (name.interesting)\n            continue;\n        for (let j = i; j < rules.length;) {\n            let otherStart = j, otherName = rules[j++].name;\n            while (j < rules.length && rules[j].name == otherName)\n                j++;\n            if (j - otherStart != size || otherName.interesting)\n                continue;\n            let match = true;\n            for (let k = 0; k < size && match; k++) {\n                let a = rules[groupStart + k], b = rules[otherStart + k];\n                if (a.cmpNoName(b) != 0)\n                    match = false;\n            }\n            if (match)\n                found = merged[name.name] = otherName;\n        }\n    }\n    if (!found)\n        return rules;\n    let newRules = [];\n    for (let rule of rules)\n        if (!merged[rule.name.name]) {\n            newRules.push(rule.parts.every(p => !merged[p.name]) ? rule :\n                new Rule(rule.name, rule.parts.map(p => merged[p.name] || p), rule.conflicts, rule.skip));\n        }\n    return newRules;\n}\nfunction simplifyRules(rules, preserve) {\n    return mergeRules(inlineRules(rules, preserve));\n}\n/// Build an in-memory parser instance for a given grammar. This is\n/// mostly useful for testing. If your grammar uses external\n/// tokenizers or nested grammars, you'll have to provide the\n/// `externalTokenizer` and/or `nestedParser` options for the\n/// returned parser to be able to parse anything.\nfunction buildParser(text, options = {}) {\n    return new Builder(text, options).getParser();\n}\nconst KEYWORDS = [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\",\n    \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"while\", \"with\",\n    \"null\", \"true\", \"false\", \"instanceof\", \"typeof\", \"void\", \"delete\", \"new\", \"in\", \"this\",\n    \"const\", \"class\", \"extends\", \"export\", \"import\", \"super\", \"enum\", \"implements\", \"interface\",\n    \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"];\n/// Build the code that represents the parser tables for a given\n/// grammar description. The `parser` property in the return value\n/// holds the main file that exports the `Parser` instance. The\n/// `terms` property holds a declaration file that defines constants\n/// for all of the named terms in grammar, holding their ids as value.\n/// This is useful when external code, such as a tokenizer, needs to\n/// be able to use these ids. It is recommended to run a tree-shaking\n/// bundler when importing this file, since you usually only need a\n/// handful of the many terms in your code.\nfunction buildParserFile(text, options = {}) {\n    return new Builder(text, options).getParserFile();\n}\nfunction ignored(name) {\n    let first = name[0];\n    return first == \"_\" || first.toUpperCase() != first;\n}\nfunction isExported(rule) {\n    return rule.props.some(p => p.at && p.name == \"export\");\n}\n\nexports.GenError = GenError;\nexports.buildParser = buildParser;\nexports.buildParserFile = buildParserFile;\n//# sourceMappingURL=index.cjs.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","walkExprs","exprs","f","result","i","length","expr","walk","slice","push","exprEq","a","b","constructor","eq","exprsEq","every","e","maybeParens","node","parent","prec","toString","hasProps","props","_p","cmpSet","cmp","diff","union","value","includes","sort","charFor","n","MAX_CHAR","String","fromCharCode","minimize","states","start","partition","Object","create","byAccepting","state","id","ids","accepting","group","split","newPartition","parts","p","edges","eA","eB","from","to","target","s","edge","Edge","exampleFromEdges","str","elts","elt","mergeEdges","separate","found","closure","MergedEdge","parseRule","input","named","parseIdent","parseProps","params","eat","expect","parseBracedExpr","RuleDeclaration","type","none$1","name","at","unexpected","PropPart","next","Prop","parseExprChoice","parseExprInner","SequenceExpression","LiteralExpression","AnyExpression","invert","string","unescaped","readString","replace","m","SET_MARKER","ranges","pos","code","codePointAt","end","raise","addRange","SetExpression","rule","Identifier","InlineRuleExpression","namespace","NameExpression","parseArgs","token","content","SpecializeExpression","args","parseExprSuffix","kind","RepeatExpression","endOfSequence","parseExprSequence","markers","localStart","markerType","concat","ConflictMarker","ms","left","ChoiceExpression","parseExternalTokenSet","tokens","parseExternalSpecialize","ExternalSpecializeDeclaration","point","out","exec","all","u1","u2","u3","single","unknown","fromCodePoint","parseInt","hash","conflictsAt","Conflicts","none","join","conflicts","compareRepeatPrec","repeated","posB","isRepeatWrap","cmpStr","termsAhead","after","first","cont","terminal","addTo","term","eqSet","sameSet$1","hashPositions","set","h","addFor","ahead","ambigAhead","skipAhead","via","rules","add","added","find","existing","Pos","none$2","GenError","trail","redo","ambigGroups","skip","pop","finish","origIndex","findIndex","array","computeFirstSets","terms","table","t","change","nt","startLen","part","findConflictOrigin","root","hist","eqSimple","unshift","reverse","map","repeat","p2","buildFullAutomaton","startTerms","getState","core","top","coreHash","byHash","cores","known","hasSet","State$1","timing","console","log","toFixed","Date","now","t0","Core","startTerm","startSkip","names","eof","filled","byTerm","byTermPos","atEnd","index","indexOf","positions","advance","applyCut","addAction","Shift","goto","replaced","count","actions","Reduce","some","splice","c","error","cut","canMergeInner","mapping","other","action","conflict","canMerge","mergeStates","newStates","newID","startRule","tokenGroup","defaultReduce","flags","actionPositions","mapped","g","samePosSet","collapseAutomaton","spill","groupIndex","groups","members","origin","Group","j","pass","idA","idB","mergeIdentical","didMerge","match","encode","max","Error","low","rest","ch","encodeArray","values","Parts","addToProp","prop","cur","buildSpecializeTable","spec","reduceAction","skipInfo","depth","findSkipStates","startRules","nonSkip","work","computeGotoTable","maxTerm","entry","Math","data","DataBuilder","offset","entries","termTable","keys","list","source","storeArray","Uint16Array","addToSet","buildTokenMasks","masks","groupMask","findExprAfter","ast","topRule","topRules","checkTogether","hasTerm","skipRules","startTokens","cache","key","cached","invertRanges","MAX_CODE","rangeEdges","hi","GAP_START","ASTRAL","min","GAP_END","lowStr","hiStr","lowA","charCodeAt","lowB","hiA","hiB","hop","State","midStart","midEnd","LOW_SURR_B","HIGH_SURR_B","isEmpty","gatherExtTokens","unique","dialect","nodeInfo","makeTerminal","byDialect","namedTerms","findExtToken","used","addRel","rel","r","inlineRules","preserve","inlinable","inline","filter","interesting","newRules","expand","Rule","mergeRules","merged","groupStart","size","otherStart","otherName","k","cmpNoName","simplifyRules","isExported","process","defineProperty","lezer","Node","GrammarDeclaration","context","externalTokens","externalSpecializers","precedences","mainSkip","scopedSkip","dialects","grammars","externalProps","autoDelim","PrecDeclaration","items","TokenPrecDeclaration","TokenConflictDeclaration","TokenDeclaration","literals","LiteralDeclaration","literal","ContextDeclaration","ExternalTokenDeclaration","ExternalGrammarDeclaration","externalID","ExternalPropDeclaration","Expression","_other","prototype","eqProps","oRule","om","x","JSON","stringify","inverted","y","v","test","termHash","Term","nodeName","TermSet","tops","makeTop","makeNonTerminal","makeRepeat","uniqueName","nodeTypes","nextID","nodeType","minRepeatTerm","precedence","ruleID","reduce","sameReduce","stateID","nullEdge","compile","explore","newState","labeled","localID","transitions","targets","startState","findConflicts","occurTogether","soft","aEdges","bEdges","Conflict","cycleTerms","reachable","es","hasCycle","orig","Map","haveCycle","get","seen","toArray","groupMasks","offsets","acceptEnd","stateMask","mask","exampleA","exampleB","word","_","Input","fileName","lineInfo","line","message","msg","posInfo","info","re","lastIndex","val","parse","external","specialized","nested","tokenRules","scoped","verbose","env","LOG","time","label","_label","maxLen","addOrigins","addActionInner","fullPos","actionFullPos","actionConflicts","conflictPos","Conflict$1","getGoto","dThis","dOther","member","none$3","ensureConflicts","otherConflicts","withConflicts","empty","BuiltRule","matches","matchesRepeat","Builder","text","options","nestedParsers","tokenOrigins","built","ruleNames","namespaces","knownProps","dynamicRulePrecedences","definedGroups","astRules","currentSkip","NP","NodeProp","externalProp","d","TokenSet","ext","ExternalTokenSet","decl","ExternalSpecializer","defineNamespace","NestNamespace","grammar","noSkip","newName","defineRule","sc","normalizeExpr","buildRule","warn","takePrecedences","takeConflicts","defineGroup","checkGroups","base","prepareParser","placeholder","termNames","fullTable","tokenGroups","tokenPrec","tokenData","buildTokenGroups","skipState","addNestedParsers","tokStart","tokenizer","tokenizers","skipData","Uint32Array","forceReductions","computeForceReductions","finishCx","FinishStateContext","dynamicPrecedences","precTable","nodeProps","skippedTypes","gatherNodeProps","stateData","nodeNames","repeatNodeCount","getParser","rawNodeProps","rawTokenizers","rawSpecialized","externalSpecializer","stack","tok","externalTokenizer","Parser","deserialize","version","skippedNodes","contextTracker","undefined","nestedParser","getParserFile","specializationTableString","serializePropValue","rawDialects","mod","moduleStyle","head","gen","imports","imported","defined","exportName","getName","prefix","importName","src","varName","extName","propID","specHead","tableName","parserStr","includeNames","KEYWORDS","parser","gatherNonSkippedNodes","forEach","notSkipped","rec","nest","tag","createsCycle","parents","gotoEdges","parentIntersection","length1Reductions","reductions","candidates","o","setSize","done","substituteArgs","arg","substituteArgsInProps","substituteInValue","conflictsFor","here","marker","precs","item","choices","choice","resolve","ns","getToken","normalizeRepeat","normalizeSequence","complete","endConflicts","builder","full","getLiteral","resolveSpecialization","dynamicPrec","explicitInline","exported","registerDynamicPrec","allow","defaultName","defaultProps","toUpperCase","finishProp","dialectID","builtin","delim","findDelimiters","param","sp","findToken","lastToken","bracket","brackets","firstToken","_a","recur","getNamed","stateArray","sharedActions","findSharedActions","MinSharedActions","shared","scratch","fill","addr","storeActions","skipReduce","isSkip","forcedReduce","skipID","skipTable","skipTerms","tokenizerMask","num","TokenGroup","NestedParserSpec","endExpr","defaultExpr","extGrammar","endStart","endEnd","build","SyntaxError","TokenArg","scope","BuildingRule","building","precedenceRelations","explicitConflicts","l","buildStd","loop","STD_RANGES","hasOwnProperty","prev","level","precededBy","allConflicts","softConflicts","errors","incompatible","stateTerms","conflicting","example","record","asciiLetter","asciiLowercase","asciiUppercase","digit","whitespace","buildParser","buildParserFile"]
}
